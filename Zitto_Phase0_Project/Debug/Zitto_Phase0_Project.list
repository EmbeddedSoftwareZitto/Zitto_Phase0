
Zitto_Phase0_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000399c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003b24  08003b24  00013b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b5c  08003b5c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003b5c  08003b5c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b5c  08003b5c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b5c  08003b5c  00013b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b60  08003b60  00013b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003b64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000ee8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000ef4  20000ef4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f816  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002175  00000000  00000000  0002f852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c98  00000000  00000000  000319c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ba0  00000000  00000000  00032660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d179  00000000  00000000  00033200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fc5f  00000000  00000000  00050379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ad9fe  00000000  00000000  0005ffd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010d9d6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000349c  00000000  00000000  0010da28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003b0c 	.word	0x08003b0c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003b0c 	.word	0x08003b0c

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fc36 	bl	8000a3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f820 	bl	8000214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  GPIO_Init();
 80001d4:	f000 f956 	bl	8000484 <GPIO_Init>
  I2C1_Init();
 80001d8:	f000 f8b4 	bl	8000344 <I2C1_Init>
  SPI1_Init();
 80001dc:	f000 f8f2 	bl	80003c4 <SPI1_Init>
  USB_PCD_Init();
 80001e0:	f000 f92e 	bl	8000440 <USB_PCD_Init>
  CAN_Init();
 80001e4:	f000 f878 	bl	80002d8 <CAN_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 80001e8:	4809      	ldr	r0, [pc, #36]	; (8000210 <main+0x48>)
 80001ea:	f000 fe52 	bl	8000e92 <HAL_CAN_Start>
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80001ee:	2102      	movs	r1, #2
 80001f0:	4807      	ldr	r0, [pc, #28]	; (8000210 <main+0x48>)
 80001f2:	f001 f8a8 	bl	8001346 <HAL_CAN_ActivateNotification>
 80001f6:	4603      	mov	r3, r0
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d001      	beq.n	8000200 <main+0x38>
  {
	  Error_Handler();
 80001fc:	f000 fa42 	bl	8000684 <Error_Handler>
  }
  HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8000200:	2014      	movs	r0, #20
 8000202:	f001 fbf6 	bl	80019f2 <HAL_NVIC_EnableIRQ>

  CAN_Configuration();
 8000206:	f000 f9c7 	bl	8000598 <CAN_Configuration>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  CAN_Tx();
 800020a:	f000 f9eb 	bl	80005e4 <CAN_Tx>
 800020e:	e7fc      	b.n	800020a <main+0x42>
 8000210:	20000028 	.word	0x20000028

08000214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b09e      	sub	sp, #120	; 0x78
 8000218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800021e:	2228      	movs	r2, #40	; 0x28
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f003 fc6a 	bl	8003afc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000228:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]
 8000234:	60da      	str	r2, [r3, #12]
 8000236:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000238:	463b      	mov	r3, r7
 800023a:	223c      	movs	r2, #60	; 0x3c
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f003 fc5c 	bl	8003afc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000244:	2303      	movs	r3, #3
 8000246:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000248:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800024c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800024e:	2300      	movs	r3, #0
 8000250:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000252:	2301      	movs	r3, #1
 8000254:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000256:	2310      	movs	r3, #16
 8000258:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800025a:	2302      	movs	r3, #2
 800025c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800025e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000262:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000264:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000268:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800026e:	4618      	mov	r0, r3
 8000270:	f001 ff64 	bl	800213c <HAL_RCC_OscConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800027a:	f000 fa03 	bl	8000684 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027e:	230f      	movs	r3, #15
 8000280:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000282:	2302      	movs	r3, #2
 8000284:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000286:	2300      	movs	r3, #0
 8000288:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800028a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800028e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000290:	2300      	movs	r3, #0
 8000292:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000294:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000298:	2101      	movs	r1, #1
 800029a:	4618      	mov	r0, r3
 800029c:	f002 ff8c 	bl	80031b8 <HAL_RCC_ClockConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002a6:	f000 f9ed 	bl	8000684 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 80002aa:	4b0a      	ldr	r3, [pc, #40]	; (80002d4 <SystemClock_Config+0xc0>)
 80002ac:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80002ae:	2300      	movs	r3, #0
 80002b0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80002b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80002b6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002b8:	463b      	mov	r3, r7
 80002ba:	4618      	mov	r0, r3
 80002bc:	f003 f962 	bl	8003584 <HAL_RCCEx_PeriphCLKConfig>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80002c6:	f000 f9dd 	bl	8000684 <Error_Handler>
  }
}
 80002ca:	bf00      	nop
 80002cc:	3778      	adds	r7, #120	; 0x78
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	00020020 	.word	0x00020020

080002d8 <CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void CAN_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80002dc:	4b17      	ldr	r3, [pc, #92]	; (800033c <CAN_Init+0x64>)
 80002de:	4a18      	ldr	r2, [pc, #96]	; (8000340 <CAN_Init+0x68>)
 80002e0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 6;
 80002e2:	4b16      	ldr	r3, [pc, #88]	; (800033c <CAN_Init+0x64>)
 80002e4:	2206      	movs	r2, #6
 80002e6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80002e8:	4b14      	ldr	r3, [pc, #80]	; (800033c <CAN_Init+0x64>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80002ee:	4b13      	ldr	r3, [pc, #76]	; (800033c <CAN_Init+0x64>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80002f4:	4b11      	ldr	r3, [pc, #68]	; (800033c <CAN_Init+0x64>)
 80002f6:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80002fa:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80002fc:	4b0f      	ldr	r3, [pc, #60]	; (800033c <CAN_Init+0x64>)
 80002fe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000302:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000304:	4b0d      	ldr	r3, [pc, #52]	; (800033c <CAN_Init+0x64>)
 8000306:	2200      	movs	r2, #0
 8000308:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800030a:	4b0c      	ldr	r3, [pc, #48]	; (800033c <CAN_Init+0x64>)
 800030c:	2200      	movs	r2, #0
 800030e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000310:	4b0a      	ldr	r3, [pc, #40]	; (800033c <CAN_Init+0x64>)
 8000312:	2200      	movs	r2, #0
 8000314:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000316:	4b09      	ldr	r3, [pc, #36]	; (800033c <CAN_Init+0x64>)
 8000318:	2200      	movs	r2, #0
 800031a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800031c:	4b07      	ldr	r3, [pc, #28]	; (800033c <CAN_Init+0x64>)
 800031e:	2200      	movs	r2, #0
 8000320:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000322:	4b06      	ldr	r3, [pc, #24]	; (800033c <CAN_Init+0x64>)
 8000324:	2200      	movs	r2, #0
 8000326:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000328:	4804      	ldr	r0, [pc, #16]	; (800033c <CAN_Init+0x64>)
 800032a:	f000 fbed 	bl	8000b08 <HAL_CAN_Init>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <CAN_Init+0x60>
  {
    Error_Handler();
 8000334:	f000 f9a6 	bl	8000684 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000338:	bf00      	nop
 800033a:	bd80      	pop	{r7, pc}
 800033c:	20000028 	.word	0x20000028
 8000340:	40006400 	.word	0x40006400

08000344 <I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void I2C1_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000348:	4b1b      	ldr	r3, [pc, #108]	; (80003b8 <I2C1_Init+0x74>)
 800034a:	4a1c      	ldr	r2, [pc, #112]	; (80003bc <I2C1_Init+0x78>)
 800034c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800034e:	4b1a      	ldr	r3, [pc, #104]	; (80003b8 <I2C1_Init+0x74>)
 8000350:	4a1b      	ldr	r2, [pc, #108]	; (80003c0 <I2C1_Init+0x7c>)
 8000352:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000354:	4b18      	ldr	r3, [pc, #96]	; (80003b8 <I2C1_Init+0x74>)
 8000356:	2200      	movs	r2, #0
 8000358:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800035a:	4b17      	ldr	r3, [pc, #92]	; (80003b8 <I2C1_Init+0x74>)
 800035c:	2201      	movs	r2, #1
 800035e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000360:	4b15      	ldr	r3, [pc, #84]	; (80003b8 <I2C1_Init+0x74>)
 8000362:	2200      	movs	r2, #0
 8000364:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000366:	4b14      	ldr	r3, [pc, #80]	; (80003b8 <I2C1_Init+0x74>)
 8000368:	2200      	movs	r2, #0
 800036a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800036c:	4b12      	ldr	r3, [pc, #72]	; (80003b8 <I2C1_Init+0x74>)
 800036e:	2200      	movs	r2, #0
 8000370:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000372:	4b11      	ldr	r3, [pc, #68]	; (80003b8 <I2C1_Init+0x74>)
 8000374:	2200      	movs	r2, #0
 8000376:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000378:	4b0f      	ldr	r3, [pc, #60]	; (80003b8 <I2C1_Init+0x74>)
 800037a:	2200      	movs	r2, #0
 800037c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800037e:	480e      	ldr	r0, [pc, #56]	; (80003b8 <I2C1_Init+0x74>)
 8000380:	f001 fce4 	bl	8001d4c <HAL_I2C_Init>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <I2C1_Init+0x4a>
  {
    Error_Handler();
 800038a:	f000 f97b 	bl	8000684 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800038e:	2100      	movs	r1, #0
 8000390:	4809      	ldr	r0, [pc, #36]	; (80003b8 <I2C1_Init+0x74>)
 8000392:	f001 fd6a 	bl	8001e6a <HAL_I2CEx_ConfigAnalogFilter>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d001      	beq.n	80003a0 <I2C1_Init+0x5c>
  {
    Error_Handler();
 800039c:	f000 f972 	bl	8000684 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003a0:	2100      	movs	r1, #0
 80003a2:	4805      	ldr	r0, [pc, #20]	; (80003b8 <I2C1_Init+0x74>)
 80003a4:	f001 fdac 	bl	8001f00 <HAL_I2CEx_ConfigDigitalFilter>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <I2C1_Init+0x6e>
  {
    Error_Handler();
 80003ae:	f000 f969 	bl	8000684 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	20000050 	.word	0x20000050
 80003bc:	40005400 	.word	0x40005400
 80003c0:	2000090e 	.word	0x2000090e

080003c4 <SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void SPI1_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003c8:	4b1b      	ldr	r3, [pc, #108]	; (8000438 <SPI1_Init+0x74>)
 80003ca:	4a1c      	ldr	r2, [pc, #112]	; (800043c <SPI1_Init+0x78>)
 80003cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003ce:	4b1a      	ldr	r3, [pc, #104]	; (8000438 <SPI1_Init+0x74>)
 80003d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003d6:	4b18      	ldr	r3, [pc, #96]	; (8000438 <SPI1_Init+0x74>)
 80003d8:	2200      	movs	r2, #0
 80003da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80003dc:	4b16      	ldr	r3, [pc, #88]	; (8000438 <SPI1_Init+0x74>)
 80003de:	f44f 7240 	mov.w	r2, #768	; 0x300
 80003e2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003e4:	4b14      	ldr	r3, [pc, #80]	; (8000438 <SPI1_Init+0x74>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003ea:	4b13      	ldr	r3, [pc, #76]	; (8000438 <SPI1_Init+0x74>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003f0:	4b11      	ldr	r3, [pc, #68]	; (8000438 <SPI1_Init+0x74>)
 80003f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003f6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80003f8:	4b0f      	ldr	r3, [pc, #60]	; (8000438 <SPI1_Init+0x74>)
 80003fa:	2208      	movs	r2, #8
 80003fc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003fe:	4b0e      	ldr	r3, [pc, #56]	; (8000438 <SPI1_Init+0x74>)
 8000400:	2200      	movs	r2, #0
 8000402:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000404:	4b0c      	ldr	r3, [pc, #48]	; (8000438 <SPI1_Init+0x74>)
 8000406:	2200      	movs	r2, #0
 8000408:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800040a:	4b0b      	ldr	r3, [pc, #44]	; (8000438 <SPI1_Init+0x74>)
 800040c:	2200      	movs	r2, #0
 800040e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000410:	4b09      	ldr	r3, [pc, #36]	; (8000438 <SPI1_Init+0x74>)
 8000412:	2207      	movs	r2, #7
 8000414:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000416:	4b08      	ldr	r3, [pc, #32]	; (8000438 <SPI1_Init+0x74>)
 8000418:	2200      	movs	r2, #0
 800041a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800041c:	4b06      	ldr	r3, [pc, #24]	; (8000438 <SPI1_Init+0x74>)
 800041e:	2208      	movs	r2, #8
 8000420:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000422:	4805      	ldr	r0, [pc, #20]	; (8000438 <SPI1_Init+0x74>)
 8000424:	f003 fa5e 	bl	80038e4 <HAL_SPI_Init>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <SPI1_Init+0x6e>
  {
    Error_Handler();
 800042e:	f000 f929 	bl	8000684 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000432:	bf00      	nop
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	200000a4 	.word	0x200000a4
 800043c:	40013000 	.word	0x40013000

08000440 <USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void USB_PCD_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000444:	4b0d      	ldr	r3, [pc, #52]	; (800047c <USB_PCD_Init+0x3c>)
 8000446:	4a0e      	ldr	r2, [pc, #56]	; (8000480 <USB_PCD_Init+0x40>)
 8000448:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800044a:	4b0c      	ldr	r3, [pc, #48]	; (800047c <USB_PCD_Init+0x3c>)
 800044c:	2208      	movs	r2, #8
 800044e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000450:	4b0a      	ldr	r3, [pc, #40]	; (800047c <USB_PCD_Init+0x3c>)
 8000452:	2202      	movs	r2, #2
 8000454:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000456:	4b09      	ldr	r3, [pc, #36]	; (800047c <USB_PCD_Init+0x3c>)
 8000458:	2202      	movs	r2, #2
 800045a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800045c:	4b07      	ldr	r3, [pc, #28]	; (800047c <USB_PCD_Init+0x3c>)
 800045e:	2200      	movs	r2, #0
 8000460:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000462:	4b06      	ldr	r3, [pc, #24]	; (800047c <USB_PCD_Init+0x3c>)
 8000464:	2200      	movs	r2, #0
 8000466:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000468:	4804      	ldr	r0, [pc, #16]	; (800047c <USB_PCD_Init+0x3c>)
 800046a:	f001 fd95 	bl	8001f98 <HAL_PCD_Init>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000474:	f000 f906 	bl	8000684 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000478:	bf00      	nop
 800047a:	bd80      	pop	{r7, pc}
 800047c:	20000108 	.word	0x20000108
 8000480:	40005c00 	.word	0x40005c00

08000484 <GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void GPIO_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b08c      	sub	sp, #48	; 0x30
 8000488:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048a:	f107 031c 	add.w	r3, r7, #28
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
 8000492:	605a      	str	r2, [r3, #4]
 8000494:	609a      	str	r2, [r3, #8]
 8000496:	60da      	str	r2, [r3, #12]
 8000498:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800049a:	4b3d      	ldr	r3, [pc, #244]	; (8000590 <GPIO_Init+0x10c>)
 800049c:	695b      	ldr	r3, [r3, #20]
 800049e:	4a3c      	ldr	r2, [pc, #240]	; (8000590 <GPIO_Init+0x10c>)
 80004a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004a4:	6153      	str	r3, [r2, #20]
 80004a6:	4b3a      	ldr	r3, [pc, #232]	; (8000590 <GPIO_Init+0x10c>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004ae:	61bb      	str	r3, [r7, #24]
 80004b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004b2:	4b37      	ldr	r3, [pc, #220]	; (8000590 <GPIO_Init+0x10c>)
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	4a36      	ldr	r2, [pc, #216]	; (8000590 <GPIO_Init+0x10c>)
 80004b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004bc:	6153      	str	r3, [r2, #20]
 80004be:	4b34      	ldr	r3, [pc, #208]	; (8000590 <GPIO_Init+0x10c>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004c6:	617b      	str	r3, [r7, #20]
 80004c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004ca:	4b31      	ldr	r3, [pc, #196]	; (8000590 <GPIO_Init+0x10c>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	4a30      	ldr	r2, [pc, #192]	; (8000590 <GPIO_Init+0x10c>)
 80004d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004d4:	6153      	str	r3, [r2, #20]
 80004d6:	4b2e      	ldr	r3, [pc, #184]	; (8000590 <GPIO_Init+0x10c>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004de:	613b      	str	r3, [r7, #16]
 80004e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e2:	4b2b      	ldr	r3, [pc, #172]	; (8000590 <GPIO_Init+0x10c>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	4a2a      	ldr	r2, [pc, #168]	; (8000590 <GPIO_Init+0x10c>)
 80004e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004ec:	6153      	str	r3, [r2, #20]
 80004ee:	4b28      	ldr	r3, [pc, #160]	; (8000590 <GPIO_Init+0x10c>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004f6:	60fb      	str	r3, [r7, #12]
 80004f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004fa:	4b25      	ldr	r3, [pc, #148]	; (8000590 <GPIO_Init+0x10c>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	4a24      	ldr	r2, [pc, #144]	; (8000590 <GPIO_Init+0x10c>)
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	6153      	str	r3, [r2, #20]
 8000506:	4b22      	ldr	r3, [pc, #136]	; (8000590 <GPIO_Init+0x10c>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800050e:	60bb      	str	r3, [r7, #8]
 8000510:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000512:	4b1f      	ldr	r3, [pc, #124]	; (8000590 <GPIO_Init+0x10c>)
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	4a1e      	ldr	r2, [pc, #120]	; (8000590 <GPIO_Init+0x10c>)
 8000518:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800051c:	6153      	str	r3, [r2, #20]
 800051e:	4b1c      	ldr	r3, [pc, #112]	; (8000590 <GPIO_Init+0x10c>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800052a:	2200      	movs	r2, #0
 800052c:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000530:	4818      	ldr	r0, [pc, #96]	; (8000594 <GPIO_Init+0x110>)
 8000532:	f001 fbf3 	bl	8001d1c <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000536:	2337      	movs	r3, #55	; 0x37
 8000538:	61fb      	str	r3, [r7, #28]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800053a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800053e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000540:	2300      	movs	r3, #0
 8000542:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000544:	f107 031c 	add.w	r3, r7, #28
 8000548:	4619      	mov	r1, r3
 800054a:	4812      	ldr	r0, [pc, #72]	; (8000594 <GPIO_Init+0x110>)
 800054c:	f001 fa6c 	bl	8001a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000550:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000554:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000556:	2301      	movs	r3, #1
 8000558:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055a:	2300      	movs	r3, #0
 800055c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055e:	2300      	movs	r3, #0
 8000560:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000562:	f107 031c 	add.w	r3, r7, #28
 8000566:	4619      	mov	r1, r3
 8000568:	480a      	ldr	r0, [pc, #40]	; (8000594 <GPIO_Init+0x110>)
 800056a:	f001 fa5d 	bl	8001a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800056e:	2301      	movs	r3, #1
 8000570:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000572:	2300      	movs	r3, #0
 8000574:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000576:	2300      	movs	r3, #0
 8000578:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800057a:	f107 031c 	add.w	r3, r7, #28
 800057e:	4619      	mov	r1, r3
 8000580:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000584:	f001 fa50 	bl	8001a28 <HAL_GPIO_Init>

}
 8000588:	bf00      	nop
 800058a:	3730      	adds	r7, #48	; 0x30
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	40021000 	.word	0x40021000
 8000594:	48001000 	.word	0x48001000

08000598 <CAN_Configuration>:

/* USER CODE BEGIN 4 */

void CAN_Configuration()
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08a      	sub	sp, #40	; 0x28
 800059c:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig;

	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800059e:	2300      	movs	r3, #0
 80005a0:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005a2:	2301      	movs	r3, #1
 80005a4:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 80005ba:	2301      	movs	r3, #1
 80005bc:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterBank = 0;
 80005be:	2300      	movs	r3, #0
 80005c0:	617b      	str	r3, [r7, #20]

	if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80005c2:	463b      	mov	r3, r7
 80005c4:	4619      	mov	r1, r3
 80005c6:	4806      	ldr	r0, [pc, #24]	; (80005e0 <CAN_Configuration+0x48>)
 80005c8:	f000 fb99 	bl	8000cfe <HAL_CAN_ConfigFilter>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <CAN_Configuration+0x3e>
	{
		Error_Handler();
 80005d2:	f000 f857 	bl	8000684 <Error_Handler>
	}
}
 80005d6:	bf00      	nop
 80005d8:	3728      	adds	r7, #40	; 0x28
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000028 	.word	0x20000028

080005e4 <CAN_Tx>:
void CAN_Tx()
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef TxHeader;

	uint32_t TxMailbox;
	uint8_t tx_message[5] = {'H','E','L','L','O'};
 80005ea:	4a15      	ldr	r2, [pc, #84]	; (8000640 <CAN_Tx+0x5c>)
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005f2:	6018      	str	r0, [r3, #0]
 80005f4:	3304      	adds	r3, #4
 80005f6:	7019      	strb	r1, [r3, #0]
	TxHeader.DLC = 5;
 80005f8:	2305      	movs	r3, #5
 80005fa:	623b      	str	r3, [r7, #32]
	TxHeader.StdId = 0x65D;
 80005fc:	f240 635d 	movw	r3, #1629	; 0x65d
 8000600:	613b      	str	r3, [r7, #16]
	TxHeader.IDE = CAN_ID_STD;
 8000602:	2300      	movs	r3, #0
 8000604:	61bb      	str	r3, [r7, #24]
	TxHeader.RTR = CAN_RTR_DATA;
 8000606:	2300      	movs	r3, #0
 8000608:	61fb      	str	r3, [r7, #28]

	if(HAL_CAN_AddTxMessage(&hcan, &TxHeader, tx_message, &TxMailbox)!=HAL_OK)
 800060a:	f107 030c 	add.w	r3, r7, #12
 800060e:	1d3a      	adds	r2, r7, #4
 8000610:	f107 0110 	add.w	r1, r7, #16
 8000614:	480b      	ldr	r0, [pc, #44]	; (8000644 <CAN_Tx+0x60>)
 8000616:	f000 fc80 	bl	8000f1a <HAL_CAN_AddTxMessage>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <CAN_Tx+0x40>
	{
		Error_Handler();
 8000620:	f000 f830 	bl	8000684 <Error_Handler>
	}

	while(HAL_CAN_IsTxMessagePending(&hcan,TxMailbox));
 8000624:	bf00      	nop
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	4619      	mov	r1, r3
 800062a:	4806      	ldr	r0, [pc, #24]	; (8000644 <CAN_Tx+0x60>)
 800062c:	f000 fd45 	bl	80010ba <HAL_CAN_IsTxMessagePending>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d1f7      	bne.n	8000626 <CAN_Tx+0x42>


}
 8000636:	bf00      	nop
 8000638:	bf00      	nop
 800063a:	3728      	adds	r7, #40	; 0x28
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	08003b24 	.word	0x08003b24
 8000644:	20000028 	.word	0x20000028

08000648 <USB_LP_CAN_RX0_IRQHandler>:
/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800064c:	4809      	ldr	r0, [pc, #36]	; (8000674 <USB_LP_CAN_RX0_IRQHandler+0x2c>)
 800064e:	f000 fea0 	bl	8001392 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */
	if(HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &can_rx_header_st[arrary_size_u8], can_rx_data_u8) == HAL_OK)
 8000652:	4b09      	ldr	r3, [pc, #36]	; (8000678 <USB_LP_CAN_RX0_IRQHandler+0x30>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	461a      	mov	r2, r3
 8000658:	4613      	mov	r3, r2
 800065a:	00db      	lsls	r3, r3, #3
 800065c:	1a9b      	subs	r3, r3, r2
 800065e:	009b      	lsls	r3, r3, #2
 8000660:	4a06      	ldr	r2, [pc, #24]	; (800067c <USB_LP_CAN_RX0_IRQHandler+0x34>)
 8000662:	441a      	add	r2, r3
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <USB_LP_CAN_RX0_IRQHandler+0x38>)
 8000666:	2100      	movs	r1, #0
 8000668:	4802      	ldr	r0, [pc, #8]	; (8000674 <USB_LP_CAN_RX0_IRQHandler+0x2c>)
 800066a:	f000 fd4a 	bl	8001102 <HAL_CAN_GetRxMessage>
	else
	{

	}
  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000028 	.word	0x20000028
 8000678:	20000eec 	.word	0x20000eec
 800067c:	200003fc 	.word	0x200003fc
 8000680:	200003f4 	.word	0x200003f4

08000684 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000688:	b672      	cpsid	i
}
 800068a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800068c:	e7fe      	b.n	800068c <Error_Handler+0x8>
	...

08000690 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000696:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <HAL_MspInit+0x44>)
 8000698:	699b      	ldr	r3, [r3, #24]
 800069a:	4a0e      	ldr	r2, [pc, #56]	; (80006d4 <HAL_MspInit+0x44>)
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	6193      	str	r3, [r2, #24]
 80006a2:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <HAL_MspInit+0x44>)
 80006a4:	699b      	ldr	r3, [r3, #24]
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ae:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <HAL_MspInit+0x44>)
 80006b0:	69db      	ldr	r3, [r3, #28]
 80006b2:	4a08      	ldr	r2, [pc, #32]	; (80006d4 <HAL_MspInit+0x44>)
 80006b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b8:	61d3      	str	r3, [r2, #28]
 80006ba:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <HAL_MspInit+0x44>)
 80006bc:	69db      	ldr	r3, [r3, #28]
 80006be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80006c6:	2007      	movs	r0, #7
 80006c8:	f001 f96c 	bl	80019a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40021000 	.word	0x40021000

080006d8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08a      	sub	sp, #40	; 0x28
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e0:	f107 0314 	add.w	r3, r7, #20
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a27      	ldr	r2, [pc, #156]	; (8000794 <HAL_CAN_MspInit+0xbc>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d147      	bne.n	800078a <HAL_CAN_MspInit+0xb2>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80006fa:	4b27      	ldr	r3, [pc, #156]	; (8000798 <HAL_CAN_MspInit+0xc0>)
 80006fc:	69db      	ldr	r3, [r3, #28]
 80006fe:	4a26      	ldr	r2, [pc, #152]	; (8000798 <HAL_CAN_MspInit+0xc0>)
 8000700:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000704:	61d3      	str	r3, [r2, #28]
 8000706:	4b24      	ldr	r3, [pc, #144]	; (8000798 <HAL_CAN_MspInit+0xc0>)
 8000708:	69db      	ldr	r3, [r3, #28]
 800070a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000712:	4b21      	ldr	r3, [pc, #132]	; (8000798 <HAL_CAN_MspInit+0xc0>)
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	4a20      	ldr	r2, [pc, #128]	; (8000798 <HAL_CAN_MspInit+0xc0>)
 8000718:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800071c:	6153      	str	r3, [r2, #20]
 800071e:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <HAL_CAN_MspInit+0xc0>)
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PD0     ------> CAN_RX
    PD1     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800072a:	2303      	movs	r3, #3
 800072c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072e:	2302      	movs	r3, #2
 8000730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000736:	2303      	movs	r3, #3
 8000738:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_CAN;
 800073a:	2307      	movs	r3, #7
 800073c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800073e:	f107 0314 	add.w	r3, r7, #20
 8000742:	4619      	mov	r1, r3
 8000744:	4815      	ldr	r0, [pc, #84]	; (800079c <HAL_CAN_MspInit+0xc4>)
 8000746:	f001 f96f 	bl	8001a28 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN_TX_IRQn, 15, 0);
 800074a:	2200      	movs	r2, #0
 800074c:	210f      	movs	r1, #15
 800074e:	2013      	movs	r0, #19
 8000750:	f001 f933 	bl	80019ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN_TX_IRQn);
 8000754:	2013      	movs	r0, #19
 8000756:	f001 f94c 	bl	80019f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 15, 0);
 800075a:	2200      	movs	r2, #0
 800075c:	210f      	movs	r1, #15
 800075e:	2014      	movs	r0, #20
 8000760:	f001 f92b 	bl	80019ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8000764:	2014      	movs	r0, #20
 8000766:	f001 f944 	bl	80019f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 15, 0);
 800076a:	2200      	movs	r2, #0
 800076c:	210f      	movs	r1, #15
 800076e:	2015      	movs	r0, #21
 8000770:	f001 f923 	bl	80019ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8000774:	2015      	movs	r0, #21
 8000776:	f001 f93c 	bl	80019f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_SCE_IRQn, 15, 0);
 800077a:	2200      	movs	r2, #0
 800077c:	210f      	movs	r1, #15
 800077e:	2016      	movs	r0, #22
 8000780:	f001 f91b 	bl	80019ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
 8000784:	2016      	movs	r0, #22
 8000786:	f001 f934 	bl	80019f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800078a:	bf00      	nop
 800078c:	3728      	adds	r7, #40	; 0x28
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40006400 	.word	0x40006400
 8000798:	40021000 	.word	0x40021000
 800079c:	48000c00 	.word	0x48000c00

080007a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08a      	sub	sp, #40	; 0x28
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a17      	ldr	r2, [pc, #92]	; (800081c <HAL_I2C_MspInit+0x7c>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d127      	bne.n	8000812 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c2:	4b17      	ldr	r3, [pc, #92]	; (8000820 <HAL_I2C_MspInit+0x80>)
 80007c4:	695b      	ldr	r3, [r3, #20]
 80007c6:	4a16      	ldr	r2, [pc, #88]	; (8000820 <HAL_I2C_MspInit+0x80>)
 80007c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007cc:	6153      	str	r3, [r2, #20]
 80007ce:	4b14      	ldr	r3, [pc, #80]	; (8000820 <HAL_I2C_MspInit+0x80>)
 80007d0:	695b      	ldr	r3, [r3, #20]
 80007d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007d6:	613b      	str	r3, [r7, #16]
 80007d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80007da:	23c0      	movs	r3, #192	; 0xc0
 80007dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007de:	2312      	movs	r3, #18
 80007e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007e6:	2303      	movs	r3, #3
 80007e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007ea:	2304      	movs	r3, #4
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	4619      	mov	r1, r3
 80007f4:	480b      	ldr	r0, [pc, #44]	; (8000824 <HAL_I2C_MspInit+0x84>)
 80007f6:	f001 f917 	bl	8001a28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007fa:	4b09      	ldr	r3, [pc, #36]	; (8000820 <HAL_I2C_MspInit+0x80>)
 80007fc:	69db      	ldr	r3, [r3, #28]
 80007fe:	4a08      	ldr	r2, [pc, #32]	; (8000820 <HAL_I2C_MspInit+0x80>)
 8000800:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000804:	61d3      	str	r3, [r2, #28]
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <HAL_I2C_MspInit+0x80>)
 8000808:	69db      	ldr	r3, [r3, #28]
 800080a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000812:	bf00      	nop
 8000814:	3728      	adds	r7, #40	; 0x28
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40005400 	.word	0x40005400
 8000820:	40021000 	.word	0x40021000
 8000824:	48000400 	.word	0x48000400

08000828 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08a      	sub	sp, #40	; 0x28
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a17      	ldr	r2, [pc, #92]	; (80008a4 <HAL_SPI_MspInit+0x7c>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d128      	bne.n	800089c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800084a:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <HAL_SPI_MspInit+0x80>)
 800084c:	699b      	ldr	r3, [r3, #24]
 800084e:	4a16      	ldr	r2, [pc, #88]	; (80008a8 <HAL_SPI_MspInit+0x80>)
 8000850:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000854:	6193      	str	r3, [r2, #24]
 8000856:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <HAL_SPI_MspInit+0x80>)
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <HAL_SPI_MspInit+0x80>)
 8000864:	695b      	ldr	r3, [r3, #20]
 8000866:	4a10      	ldr	r2, [pc, #64]	; (80008a8 <HAL_SPI_MspInit+0x80>)
 8000868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800086c:	6153      	str	r3, [r2, #20]
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <HAL_SPI_MspInit+0x80>)
 8000870:	695b      	ldr	r3, [r3, #20]
 8000872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800087a:	23e0      	movs	r3, #224	; 0xe0
 800087c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087e:	2302      	movs	r3, #2
 8000880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000886:	2303      	movs	r3, #3
 8000888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800088a:	2305      	movs	r3, #5
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088e:	f107 0314 	add.w	r3, r7, #20
 8000892:	4619      	mov	r1, r3
 8000894:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000898:	f001 f8c6 	bl	8001a28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800089c:	bf00      	nop
 800089e:	3728      	adds	r7, #40	; 0x28
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40013000 	.word	0x40013000
 80008a8:	40021000 	.word	0x40021000

080008ac <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08a      	sub	sp, #40	; 0x28
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a18      	ldr	r2, [pc, #96]	; (800092c <HAL_PCD_MspInit+0x80>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d129      	bne.n	8000922 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ce:	4b18      	ldr	r3, [pc, #96]	; (8000930 <HAL_PCD_MspInit+0x84>)
 80008d0:	695b      	ldr	r3, [r3, #20]
 80008d2:	4a17      	ldr	r2, [pc, #92]	; (8000930 <HAL_PCD_MspInit+0x84>)
 80008d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008d8:	6153      	str	r3, [r2, #20]
 80008da:	4b15      	ldr	r3, [pc, #84]	; (8000930 <HAL_PCD_MspInit+0x84>)
 80008dc:	695b      	ldr	r3, [r3, #20]
 80008de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80008e6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80008ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008f4:	2303      	movs	r3, #3
 80008f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80008f8:	230e      	movs	r3, #14
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	4619      	mov	r1, r3
 8000902:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000906:	f001 f88f 	bl	8001a28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <HAL_PCD_MspInit+0x84>)
 800090c:	69db      	ldr	r3, [r3, #28]
 800090e:	4a08      	ldr	r2, [pc, #32]	; (8000930 <HAL_PCD_MspInit+0x84>)
 8000910:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000914:	61d3      	str	r3, [r2, #28]
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <HAL_PCD_MspInit+0x84>)
 8000918:	69db      	ldr	r3, [r3, #28]
 800091a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000922:	bf00      	nop
 8000924:	3728      	adds	r7, #40	; 0x28
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40005c00 	.word	0x40005c00
 8000930:	40021000 	.word	0x40021000

08000934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <NMI_Handler+0x4>

0800093a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800093e:	e7fe      	b.n	800093e <HardFault_Handler+0x4>

08000940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000944:	e7fe      	b.n	8000944 <MemManage_Handler+0x4>

08000946 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800094a:	e7fe      	b.n	800094a <BusFault_Handler+0x4>

0800094c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <UsageFault_Handler+0x4>

08000952 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr

0800096e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000980:	f000 f8a2 	bl	8000ac8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}

08000988 <USB_HP_CAN_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN_TX interrupts.
  */
void USB_HP_CAN_TX_IRQHandler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800098c:	4802      	ldr	r0, [pc, #8]	; (8000998 <USB_HP_CAN_TX_IRQHandler+0x10>)
 800098e:	f000 fd00 	bl	8001392 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000028 	.word	0x20000028

0800099c <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80009a0:	4802      	ldr	r0, [pc, #8]	; (80009ac <CAN_RX1_IRQHandler+0x10>)
 80009a2:	f000 fcf6 	bl	8001392 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000028 	.word	0x20000028

080009b0 <CAN_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN_SCE_IRQHandler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_SCE_IRQn 0 */

  /* USER CODE END CAN_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80009b4:	4802      	ldr	r0, [pc, #8]	; (80009c0 <CAN_SCE_IRQHandler+0x10>)
 80009b6:	f000 fcec 	bl	8001392 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_SCE_IRQn 1 */

  /* USER CODE END CAN_SCE_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000028 	.word	0x20000028

080009c4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <SystemInit+0x20>)
 80009ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ce:	4a05      	ldr	r2, [pc, #20]	; (80009e4 <SystemInit+0x20>)
 80009d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a20 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80009ec:	f7ff ffea 	bl	80009c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009f0:	480c      	ldr	r0, [pc, #48]	; (8000a24 <LoopForever+0x6>)
  ldr r1, =_edata
 80009f2:	490d      	ldr	r1, [pc, #52]	; (8000a28 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009f4:	4a0d      	ldr	r2, [pc, #52]	; (8000a2c <LoopForever+0xe>)
  movs r3, #0
 80009f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f8:	e002      	b.n	8000a00 <LoopCopyDataInit>

080009fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009fe:	3304      	adds	r3, #4

08000a00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a04:	d3f9      	bcc.n	80009fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a06:	4a0a      	ldr	r2, [pc, #40]	; (8000a30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a08:	4c0a      	ldr	r4, [pc, #40]	; (8000a34 <LoopForever+0x16>)
  movs r3, #0
 8000a0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a0c:	e001      	b.n	8000a12 <LoopFillZerobss>

08000a0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a10:	3204      	adds	r2, #4

08000a12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a14:	d3fb      	bcc.n	8000a0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a16:	f003 f84d 	bl	8003ab4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a1a:	f7ff fbd5 	bl	80001c8 <main>

08000a1e <LoopForever>:

LoopForever:
    b LoopForever
 8000a1e:	e7fe      	b.n	8000a1e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a20:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000a24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a28:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a2c:	08003b64 	.word	0x08003b64
  ldr r2, =_sbss
 8000a30:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a34:	20000ef4 	.word	0x20000ef4

08000a38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a38:	e7fe      	b.n	8000a38 <ADC1_2_IRQHandler>
	...

08000a3c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a40:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <HAL_Init+0x28>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a07      	ldr	r2, [pc, #28]	; (8000a64 <HAL_Init+0x28>)
 8000a46:	f043 0310 	orr.w	r3, r3, #16
 8000a4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a4c:	2003      	movs	r0, #3
 8000a4e:	f000 ffa9 	bl	80019a4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a52:	2000      	movs	r0, #0
 8000a54:	f000 f808 	bl	8000a68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a58:	f7ff fe1a 	bl	8000690 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40022000 	.word	0x40022000

08000a68 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a70:	4b12      	ldr	r3, [pc, #72]	; (8000abc <HAL_InitTick+0x54>)
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <HAL_InitTick+0x58>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	4619      	mov	r1, r3
 8000a7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a86:	4618      	mov	r0, r3
 8000a88:	f000 ffc1 	bl	8001a0e <HAL_SYSTICK_Config>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a92:	2301      	movs	r3, #1
 8000a94:	e00e      	b.n	8000ab4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2b0f      	cmp	r3, #15
 8000a9a:	d80a      	bhi.n	8000ab2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	6879      	ldr	r1, [r7, #4]
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	f000 ff89 	bl	80019ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aa8:	4a06      	ldr	r2, [pc, #24]	; (8000ac4 <HAL_InitTick+0x5c>)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	e000      	b.n	8000ab4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000000 	.word	0x20000000
 8000ac0:	20000008 	.word	0x20000008
 8000ac4:	20000004 	.word	0x20000004

08000ac8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HAL_IncTick+0x20>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	4b06      	ldr	r3, [pc, #24]	; (8000aec <HAL_IncTick+0x24>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	4a04      	ldr	r2, [pc, #16]	; (8000aec <HAL_IncTick+0x24>)
 8000ada:	6013      	str	r3, [r2, #0]
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	20000008 	.word	0x20000008
 8000aec:	20000ef0 	.word	0x20000ef0

08000af0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000af4:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <HAL_GetTick+0x14>)
 8000af6:	681b      	ldr	r3, [r3, #0]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	20000ef0 	.word	0x20000ef0

08000b08 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d101      	bne.n	8000b1a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	e0ed      	b.n	8000cf6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d102      	bne.n	8000b2c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f7ff fdd6 	bl	80006d8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f042 0201 	orr.w	r2, r2, #1
 8000b3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b3c:	f7ff ffd8 	bl	8000af0 <HAL_GetTick>
 8000b40:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b42:	e012      	b.n	8000b6a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b44:	f7ff ffd4 	bl	8000af0 <HAL_GetTick>
 8000b48:	4602      	mov	r2, r0
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	2b0a      	cmp	r3, #10
 8000b50:	d90b      	bls.n	8000b6a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b56:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2205      	movs	r2, #5
 8000b62:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	e0c5      	b.n	8000cf6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f003 0301 	and.w	r3, r3, #1
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d0e5      	beq.n	8000b44 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f022 0202 	bic.w	r2, r2, #2
 8000b86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b88:	f7ff ffb2 	bl	8000af0 <HAL_GetTick>
 8000b8c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b8e:	e012      	b.n	8000bb6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b90:	f7ff ffae 	bl	8000af0 <HAL_GetTick>
 8000b94:	4602      	mov	r2, r0
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	2b0a      	cmp	r3, #10
 8000b9c:	d90b      	bls.n	8000bb6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ba2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2205      	movs	r2, #5
 8000bae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e09f      	b.n	8000cf6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f003 0302 	and.w	r3, r3, #2
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d1e5      	bne.n	8000b90 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	7e1b      	ldrb	r3, [r3, #24]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d108      	bne.n	8000bde <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	e007      	b.n	8000bee <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000bec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	7e5b      	ldrb	r3, [r3, #25]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d108      	bne.n	8000c08 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	e007      	b.n	8000c18 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000c16:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	7e9b      	ldrb	r3, [r3, #26]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d108      	bne.n	8000c32 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f042 0220 	orr.w	r2, r2, #32
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	e007      	b.n	8000c42 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f022 0220 	bic.w	r2, r2, #32
 8000c40:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	7edb      	ldrb	r3, [r3, #27]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d108      	bne.n	8000c5c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f022 0210 	bic.w	r2, r2, #16
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	e007      	b.n	8000c6c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f042 0210 	orr.w	r2, r2, #16
 8000c6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	7f1b      	ldrb	r3, [r3, #28]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d108      	bne.n	8000c86 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f042 0208 	orr.w	r2, r2, #8
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	e007      	b.n	8000c96 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f022 0208 	bic.w	r2, r2, #8
 8000c94:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	7f5b      	ldrb	r3, [r3, #29]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d108      	bne.n	8000cb0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f042 0204 	orr.w	r2, r2, #4
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	e007      	b.n	8000cc0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f022 0204 	bic.w	r2, r2, #4
 8000cbe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	689a      	ldr	r2, [r3, #8]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	691b      	ldr	r3, [r3, #16]
 8000cce:	431a      	orrs	r2, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	695b      	ldr	r3, [r3, #20]
 8000cd4:	ea42 0103 	orr.w	r1, r2, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	1e5a      	subs	r2, r3, #1
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	430a      	orrs	r2, r1
 8000ce4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2200      	movs	r2, #0
 8000cea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2201      	movs	r2, #1
 8000cf0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	b087      	sub	sp, #28
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
 8000d06:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d14:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000d16:	7cfb      	ldrb	r3, [r7, #19]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d003      	beq.n	8000d24 <HAL_CAN_ConfigFilter+0x26>
 8000d1c:	7cfb      	ldrb	r3, [r7, #19]
 8000d1e:	2b02      	cmp	r3, #2
 8000d20:	f040 80aa 	bne.w	8000e78 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000d2a:	f043 0201 	orr.w	r2, r3, #1
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	695b      	ldr	r3, [r3, #20]
 8000d38:	f003 031f 	and.w	r3, r3, #31
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	401a      	ands	r2, r3
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	69db      	ldr	r3, [r3, #28]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d123      	bne.n	8000da6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	43db      	mvns	r3, r3
 8000d68:	401a      	ands	r2, r3
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d7c:	683a      	ldr	r2, [r7, #0]
 8000d7e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d80:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	3248      	adds	r2, #72	; 0x48
 8000d86:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d9a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d9c:	6979      	ldr	r1, [r7, #20]
 8000d9e:	3348      	adds	r3, #72	; 0x48
 8000da0:	00db      	lsls	r3, r3, #3
 8000da2:	440b      	add	r3, r1
 8000da4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	69db      	ldr	r3, [r3, #28]
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d122      	bne.n	8000df4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	431a      	orrs	r2, r3
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000dca:	683a      	ldr	r2, [r7, #0]
 8000dcc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000dce:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	3248      	adds	r2, #72	; 0x48
 8000dd4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	68db      	ldr	r3, [r3, #12]
 8000de2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000de8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000dea:	6979      	ldr	r1, [r7, #20]
 8000dec:	3348      	adds	r3, #72	; 0x48
 8000dee:	00db      	lsls	r3, r3, #3
 8000df0:	440b      	add	r3, r1
 8000df2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d109      	bne.n	8000e10 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	43db      	mvns	r3, r3
 8000e06:	401a      	ands	r2, r3
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000e0e:	e007      	b.n	8000e20 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	431a      	orrs	r2, r3
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	691b      	ldr	r3, [r3, #16]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d109      	bne.n	8000e3c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	43db      	mvns	r3, r3
 8000e32:	401a      	ands	r2, r3
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000e3a:	e007      	b.n	8000e4c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	431a      	orrs	r2, r3
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	6a1b      	ldr	r3, [r3, #32]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d107      	bne.n	8000e64 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	431a      	orrs	r2, r3
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e6a:	f023 0201 	bic.w	r2, r3, #1
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000e74:	2300      	movs	r3, #0
 8000e76:	e006      	b.n	8000e86 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e7c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e84:	2301      	movs	r3, #1
  }
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	371c      	adds	r7, #28
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b084      	sub	sp, #16
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d12e      	bne.n	8000f04 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2202      	movs	r2, #2
 8000eaa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f022 0201 	bic.w	r2, r2, #1
 8000ebc:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000ebe:	f7ff fe17 	bl	8000af0 <HAL_GetTick>
 8000ec2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000ec4:	e012      	b.n	8000eec <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ec6:	f7ff fe13 	bl	8000af0 <HAL_GetTick>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	2b0a      	cmp	r3, #10
 8000ed2:	d90b      	bls.n	8000eec <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2205      	movs	r2, #5
 8000ee4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e012      	b.n	8000f12 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d1e5      	bne.n	8000ec6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2200      	movs	r2, #0
 8000efe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000f00:	2300      	movs	r3, #0
 8000f02:	e006      	b.n	8000f12 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f08:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f10:	2301      	movs	r3, #1
  }
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b089      	sub	sp, #36	; 0x24
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	60f8      	str	r0, [r7, #12]
 8000f22:	60b9      	str	r1, [r7, #8]
 8000f24:	607a      	str	r2, [r7, #4]
 8000f26:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f2e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f38:	7ffb      	ldrb	r3, [r7, #31]
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d003      	beq.n	8000f46 <HAL_CAN_AddTxMessage+0x2c>
 8000f3e:	7ffb      	ldrb	r3, [r7, #31]
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	f040 80ad 	bne.w	80010a0 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d10a      	bne.n	8000f66 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d105      	bne.n	8000f66 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	f000 8095 	beq.w	8001090 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	0e1b      	lsrs	r3, r3, #24
 8000f6a:	f003 0303 	and.w	r3, r3, #3
 8000f6e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000f70:	2201      	movs	r2, #1
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	409a      	lsls	r2, r3
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d10d      	bne.n	8000f9e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f8c:	68f9      	ldr	r1, [r7, #12]
 8000f8e:	6809      	ldr	r1, [r1, #0]
 8000f90:	431a      	orrs	r2, r3
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	3318      	adds	r3, #24
 8000f96:	011b      	lsls	r3, r3, #4
 8000f98:	440b      	add	r3, r1
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	e00f      	b.n	8000fbe <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000fa8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000fae:	68f9      	ldr	r1, [r7, #12]
 8000fb0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000fb2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	3318      	adds	r3, #24
 8000fb8:	011b      	lsls	r3, r3, #4
 8000fba:	440b      	add	r3, r1
 8000fbc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	6819      	ldr	r1, [r3, #0]
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	691a      	ldr	r2, [r3, #16]
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	3318      	adds	r3, #24
 8000fca:	011b      	lsls	r3, r3, #4
 8000fcc:	440b      	add	r3, r1
 8000fce:	3304      	adds	r3, #4
 8000fd0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	7d1b      	ldrb	r3, [r3, #20]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d111      	bne.n	8000ffe <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	3318      	adds	r3, #24
 8000fe2:	011b      	lsls	r3, r3, #4
 8000fe4:	4413      	add	r3, r2
 8000fe6:	3304      	adds	r3, #4
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	6811      	ldr	r1, [r2, #0]
 8000fee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	3318      	adds	r3, #24
 8000ff6:	011b      	lsls	r3, r3, #4
 8000ff8:	440b      	add	r3, r1
 8000ffa:	3304      	adds	r3, #4
 8000ffc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	3307      	adds	r3, #7
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	061a      	lsls	r2, r3, #24
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3306      	adds	r3, #6
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	041b      	lsls	r3, r3, #16
 800100e:	431a      	orrs	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3305      	adds	r3, #5
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	021b      	lsls	r3, r3, #8
 8001018:	4313      	orrs	r3, r2
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	3204      	adds	r2, #4
 800101e:	7812      	ldrb	r2, [r2, #0]
 8001020:	4610      	mov	r0, r2
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	6811      	ldr	r1, [r2, #0]
 8001026:	ea43 0200 	orr.w	r2, r3, r0
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	011b      	lsls	r3, r3, #4
 800102e:	440b      	add	r3, r1
 8001030:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001034:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	3303      	adds	r3, #3
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	061a      	lsls	r2, r3, #24
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	3302      	adds	r3, #2
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	041b      	lsls	r3, r3, #16
 8001046:	431a      	orrs	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3301      	adds	r3, #1
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	021b      	lsls	r3, r3, #8
 8001050:	4313      	orrs	r3, r2
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	7812      	ldrb	r2, [r2, #0]
 8001056:	4610      	mov	r0, r2
 8001058:	68fa      	ldr	r2, [r7, #12]
 800105a:	6811      	ldr	r1, [r2, #0]
 800105c:	ea43 0200 	orr.w	r2, r3, r0
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	011b      	lsls	r3, r3, #4
 8001064:	440b      	add	r3, r1
 8001066:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800106a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	3318      	adds	r3, #24
 8001074:	011b      	lsls	r3, r3, #4
 8001076:	4413      	add	r3, r2
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	6811      	ldr	r1, [r2, #0]
 800107e:	f043 0201 	orr.w	r2, r3, #1
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	3318      	adds	r3, #24
 8001086:	011b      	lsls	r3, r3, #4
 8001088:	440b      	add	r3, r1
 800108a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800108c:	2300      	movs	r3, #0
 800108e:	e00e      	b.n	80010ae <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001094:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800109c:	2301      	movs	r3, #1
 800109e:	e006      	b.n	80010ae <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
  }
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3724      	adds	r7, #36	; 0x24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80010ba:	b480      	push	{r7}
 80010bc:	b085      	sub	sp, #20
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
 80010c2:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 80010c4:	2300      	movs	r3, #0
 80010c6:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010ce:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80010d0:	7afb      	ldrb	r3, [r7, #11]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d002      	beq.n	80010dc <HAL_CAN_IsTxMessagePending+0x22>
 80010d6:	7afb      	ldrb	r3, [r7, #11]
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d10b      	bne.n	80010f4 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	689a      	ldr	r2, [r3, #8]
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	069b      	lsls	r3, r3, #26
 80010e6:	401a      	ands	r2, r3
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	069b      	lsls	r3, r3, #26
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d001      	beq.n	80010f4 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 80010f0:	2301      	movs	r3, #1
 80010f2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 80010f4:	68fb      	ldr	r3, [r7, #12]
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001102:	b480      	push	{r7}
 8001104:	b087      	sub	sp, #28
 8001106:	af00      	add	r7, sp, #0
 8001108:	60f8      	str	r0, [r7, #12]
 800110a:	60b9      	str	r1, [r7, #8]
 800110c:	607a      	str	r2, [r7, #4]
 800110e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001116:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001118:	7dfb      	ldrb	r3, [r7, #23]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d003      	beq.n	8001126 <HAL_CAN_GetRxMessage+0x24>
 800111e:	7dfb      	ldrb	r3, [r7, #23]
 8001120:	2b02      	cmp	r3, #2
 8001122:	f040 8103 	bne.w	800132c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d10e      	bne.n	800114a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	f003 0303 	and.w	r3, r3, #3
 8001136:	2b00      	cmp	r3, #0
 8001138:	d116      	bne.n	8001168 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e0f7      	b.n	800133a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	691b      	ldr	r3, [r3, #16]
 8001150:	f003 0303 	and.w	r3, r3, #3
 8001154:	2b00      	cmp	r3, #0
 8001156:	d107      	bne.n	8001168 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e0e8      	b.n	800133a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	331b      	adds	r3, #27
 8001170:	011b      	lsls	r3, r3, #4
 8001172:	4413      	add	r3, r2
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0204 	and.w	r2, r3, #4
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d10c      	bne.n	80011a0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	331b      	adds	r3, #27
 800118e:	011b      	lsls	r3, r3, #4
 8001190:	4413      	add	r3, r2
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	0d5b      	lsrs	r3, r3, #21
 8001196:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	e00b      	b.n	80011b8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	331b      	adds	r3, #27
 80011a8:	011b      	lsls	r3, r3, #4
 80011aa:	4413      	add	r3, r2
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	08db      	lsrs	r3, r3, #3
 80011b0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	331b      	adds	r3, #27
 80011c0:	011b      	lsls	r3, r3, #4
 80011c2:	4413      	add	r3, r2
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0202 	and.w	r2, r3, #2
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	331b      	adds	r3, #27
 80011d6:	011b      	lsls	r3, r3, #4
 80011d8:	4413      	add	r3, r2
 80011da:	3304      	adds	r3, #4
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0308 	and.w	r3, r3, #8
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2208      	movs	r2, #8
 80011ea:	611a      	str	r2, [r3, #16]
 80011ec:	e00b      	b.n	8001206 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	331b      	adds	r3, #27
 80011f6:	011b      	lsls	r3, r3, #4
 80011f8:	4413      	add	r3, r2
 80011fa:	3304      	adds	r3, #4
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 020f 	and.w	r2, r3, #15
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	331b      	adds	r3, #27
 800120e:	011b      	lsls	r3, r3, #4
 8001210:	4413      	add	r3, r2
 8001212:	3304      	adds	r3, #4
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	0a1b      	lsrs	r3, r3, #8
 8001218:	b2da      	uxtb	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	331b      	adds	r3, #27
 8001226:	011b      	lsls	r3, r3, #4
 8001228:	4413      	add	r3, r2
 800122a:	3304      	adds	r3, #4
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	0c1b      	lsrs	r3, r3, #16
 8001230:	b29a      	uxth	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	011b      	lsls	r3, r3, #4
 800123e:	4413      	add	r3, r2
 8001240:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	b2da      	uxtb	r2, r3
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	011b      	lsls	r3, r3, #4
 8001254:	4413      	add	r3, r2
 8001256:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	0a1a      	lsrs	r2, r3, #8
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	3301      	adds	r3, #1
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	011b      	lsls	r3, r3, #4
 800126e:	4413      	add	r3, r2
 8001270:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	0c1a      	lsrs	r2, r3, #16
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	3302      	adds	r3, #2
 800127c:	b2d2      	uxtb	r2, r2
 800127e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	011b      	lsls	r3, r3, #4
 8001288:	4413      	add	r3, r2
 800128a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	0e1a      	lsrs	r2, r3, #24
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	3303      	adds	r3, #3
 8001296:	b2d2      	uxtb	r2, r2
 8001298:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	011b      	lsls	r3, r3, #4
 80012a2:	4413      	add	r3, r2
 80012a4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	3304      	adds	r3, #4
 80012ae:	b2d2      	uxtb	r2, r2
 80012b0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	011b      	lsls	r3, r3, #4
 80012ba:	4413      	add	r3, r2
 80012bc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	0a1a      	lsrs	r2, r3, #8
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	3305      	adds	r3, #5
 80012c8:	b2d2      	uxtb	r2, r2
 80012ca:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	011b      	lsls	r3, r3, #4
 80012d4:	4413      	add	r3, r2
 80012d6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	0c1a      	lsrs	r2, r3, #16
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	3306      	adds	r3, #6
 80012e2:	b2d2      	uxtb	r2, r2
 80012e4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	011b      	lsls	r3, r3, #4
 80012ee:	4413      	add	r3, r2
 80012f0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	0e1a      	lsrs	r2, r3, #24
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	3307      	adds	r3, #7
 80012fc:	b2d2      	uxtb	r2, r2
 80012fe:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d108      	bne.n	8001318 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	68da      	ldr	r2, [r3, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f042 0220 	orr.w	r2, r2, #32
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	e007      	b.n	8001328 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	691a      	ldr	r2, [r3, #16]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f042 0220 	orr.w	r2, r2, #32
 8001326:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001328:	2300      	movs	r3, #0
 800132a:	e006      	b.n	800133a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001330:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
  }
}
 800133a:	4618      	mov	r0, r3
 800133c:	371c      	adds	r7, #28
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001346:	b480      	push	{r7}
 8001348:	b085      	sub	sp, #20
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
 800134e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001356:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001358:	7bfb      	ldrb	r3, [r7, #15]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d002      	beq.n	8001364 <HAL_CAN_ActivateNotification+0x1e>
 800135e:	7bfb      	ldrb	r3, [r7, #15]
 8001360:	2b02      	cmp	r3, #2
 8001362:	d109      	bne.n	8001378 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	6959      	ldr	r1, [r3, #20]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	683a      	ldr	r2, [r7, #0]
 8001370:	430a      	orrs	r2, r1
 8001372:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001374:	2300      	movs	r3, #0
 8001376:	e006      	b.n	8001386 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
  }
}
 8001386:	4618      	mov	r0, r3
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b08a      	sub	sp, #40	; 0x28
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800139a:	2300      	movs	r3, #0
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	695b      	ldr	r3, [r3, #20]
 80013a4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	691b      	ldr	r3, [r3, #16]
 80013c4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80013ce:	6a3b      	ldr	r3, [r7, #32]
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d07c      	beq.n	80014d2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d023      	beq.n	800142a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2201      	movs	r2, #1
 80013e8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	f003 0302 	and.w	r3, r3, #2
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d003      	beq.n	80013fc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f000 f983 	bl	8001700 <HAL_CAN_TxMailbox0CompleteCallback>
 80013fa:	e016      	b.n	800142a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	f003 0304 	and.w	r3, r3, #4
 8001402:	2b00      	cmp	r3, #0
 8001404:	d004      	beq.n	8001410 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001408:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
 800140e:	e00c      	b.n	800142a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	f003 0308 	and.w	r3, r3, #8
 8001416:	2b00      	cmp	r3, #0
 8001418:	d004      	beq.n	8001424 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800141a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
 8001422:	e002      	b.n	800142a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f000 f989 	bl	800173c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001430:	2b00      	cmp	r3, #0
 8001432:	d024      	beq.n	800147e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f44f 7280 	mov.w	r2, #256	; 0x100
 800143c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001444:	2b00      	cmp	r3, #0
 8001446:	d003      	beq.n	8001450 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f000 f963 	bl	8001714 <HAL_CAN_TxMailbox1CompleteCallback>
 800144e:	e016      	b.n	800147e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001456:	2b00      	cmp	r3, #0
 8001458:	d004      	beq.n	8001464 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800145a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
 8001462:	e00c      	b.n	800147e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800146a:	2b00      	cmp	r3, #0
 800146c:	d004      	beq.n	8001478 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001470:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
 8001476:	e002      	b.n	800147e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f000 f969 	bl	8001750 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d024      	beq.n	80014d2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001490:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d003      	beq.n	80014a4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f000 f943 	bl	8001728 <HAL_CAN_TxMailbox2CompleteCallback>
 80014a2:	e016      	b.n	80014d2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d004      	beq.n	80014b8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80014ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
 80014b6:	e00c      	b.n	80014d2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d004      	beq.n	80014cc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80014c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
 80014ca:	e002      	b.n	80014d2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f000 f949 	bl	8001764 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80014d2:	6a3b      	ldr	r3, [r7, #32]
 80014d4:	f003 0308 	and.w	r3, r3, #8
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d00c      	beq.n	80014f6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	f003 0310 	and.w	r3, r3, #16
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d007      	beq.n	80014f6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80014e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2210      	movs	r2, #16
 80014f4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80014f6:	6a3b      	ldr	r3, [r7, #32]
 80014f8:	f003 0304 	and.w	r3, r3, #4
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d00b      	beq.n	8001518 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	f003 0308 	and.w	r3, r3, #8
 8001506:	2b00      	cmp	r3, #0
 8001508:	d006      	beq.n	8001518 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2208      	movs	r2, #8
 8001510:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f000 f93a 	bl	800178c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001518:	6a3b      	ldr	r3, [r7, #32]
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d009      	beq.n	8001536 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	f003 0303 	and.w	r3, r3, #3
 800152c:	2b00      	cmp	r3, #0
 800152e:	d002      	beq.n	8001536 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f000 f921 	bl	8001778 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001536:	6a3b      	ldr	r3, [r7, #32]
 8001538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800153c:	2b00      	cmp	r3, #0
 800153e:	d00c      	beq.n	800155a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	f003 0310 	and.w	r3, r3, #16
 8001546:	2b00      	cmp	r3, #0
 8001548:	d007      	beq.n	800155a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800154a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001550:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2210      	movs	r2, #16
 8001558:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800155a:	6a3b      	ldr	r3, [r7, #32]
 800155c:	f003 0320 	and.w	r3, r3, #32
 8001560:	2b00      	cmp	r3, #0
 8001562:	d00b      	beq.n	800157c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	f003 0308 	and.w	r3, r3, #8
 800156a:	2b00      	cmp	r3, #0
 800156c:	d006      	beq.n	800157c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2208      	movs	r2, #8
 8001574:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f000 f91c 	bl	80017b4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800157c:	6a3b      	ldr	r3, [r7, #32]
 800157e:	f003 0310 	and.w	r3, r3, #16
 8001582:	2b00      	cmp	r3, #0
 8001584:	d009      	beq.n	800159a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	f003 0303 	and.w	r3, r3, #3
 8001590:	2b00      	cmp	r3, #0
 8001592:	d002      	beq.n	800159a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f000 f903 	bl	80017a0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800159a:	6a3b      	ldr	r3, [r7, #32]
 800159c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d00b      	beq.n	80015bc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	f003 0310 	and.w	r3, r3, #16
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d006      	beq.n	80015bc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2210      	movs	r2, #16
 80015b4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f000 f906 	bl	80017c8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80015bc:	6a3b      	ldr	r3, [r7, #32]
 80015be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d00b      	beq.n	80015de <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	f003 0308 	and.w	r3, r3, #8
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d006      	beq.n	80015de <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2208      	movs	r2, #8
 80015d6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f000 f8ff 	bl	80017dc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80015de:	6a3b      	ldr	r3, [r7, #32]
 80015e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d07b      	beq.n	80016e0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	f003 0304 	and.w	r3, r3, #4
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d072      	beq.n	80016d8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80015f2:	6a3b      	ldr	r3, [r7, #32]
 80015f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d008      	beq.n	800160e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001602:	2b00      	cmp	r3, #0
 8001604:	d003      	beq.n	800160e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800160e:	6a3b      	ldr	r3, [r7, #32]
 8001610:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001614:	2b00      	cmp	r3, #0
 8001616:	d008      	beq.n	800162a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800161e:	2b00      	cmp	r3, #0
 8001620:	d003      	beq.n	800162a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001624:	f043 0302 	orr.w	r3, r3, #2
 8001628:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800162a:	6a3b      	ldr	r3, [r7, #32]
 800162c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001630:	2b00      	cmp	r3, #0
 8001632:	d008      	beq.n	8001646 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001640:	f043 0304 	orr.w	r3, r3, #4
 8001644:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001646:	6a3b      	ldr	r3, [r7, #32]
 8001648:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800164c:	2b00      	cmp	r3, #0
 800164e:	d043      	beq.n	80016d8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001656:	2b00      	cmp	r3, #0
 8001658:	d03e      	beq.n	80016d8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001660:	2b60      	cmp	r3, #96	; 0x60
 8001662:	d02b      	beq.n	80016bc <HAL_CAN_IRQHandler+0x32a>
 8001664:	2b60      	cmp	r3, #96	; 0x60
 8001666:	d82e      	bhi.n	80016c6 <HAL_CAN_IRQHandler+0x334>
 8001668:	2b50      	cmp	r3, #80	; 0x50
 800166a:	d022      	beq.n	80016b2 <HAL_CAN_IRQHandler+0x320>
 800166c:	2b50      	cmp	r3, #80	; 0x50
 800166e:	d82a      	bhi.n	80016c6 <HAL_CAN_IRQHandler+0x334>
 8001670:	2b40      	cmp	r3, #64	; 0x40
 8001672:	d019      	beq.n	80016a8 <HAL_CAN_IRQHandler+0x316>
 8001674:	2b40      	cmp	r3, #64	; 0x40
 8001676:	d826      	bhi.n	80016c6 <HAL_CAN_IRQHandler+0x334>
 8001678:	2b30      	cmp	r3, #48	; 0x30
 800167a:	d010      	beq.n	800169e <HAL_CAN_IRQHandler+0x30c>
 800167c:	2b30      	cmp	r3, #48	; 0x30
 800167e:	d822      	bhi.n	80016c6 <HAL_CAN_IRQHandler+0x334>
 8001680:	2b10      	cmp	r3, #16
 8001682:	d002      	beq.n	800168a <HAL_CAN_IRQHandler+0x2f8>
 8001684:	2b20      	cmp	r3, #32
 8001686:	d005      	beq.n	8001694 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001688:	e01d      	b.n	80016c6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168c:	f043 0308 	orr.w	r3, r3, #8
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001692:	e019      	b.n	80016c8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	f043 0310 	orr.w	r3, r3, #16
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800169c:	e014      	b.n	80016c8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800169e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a0:	f043 0320 	orr.w	r3, r3, #32
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016a6:	e00f      	b.n	80016c8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80016a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016b0:	e00a      	b.n	80016c8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80016b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016ba:	e005      	b.n	80016c8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80016bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016c4:	e000      	b.n	80016c8 <HAL_CAN_IRQHandler+0x336>
            break;
 80016c6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	699a      	ldr	r2, [r3, #24]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80016d6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2204      	movs	r2, #4
 80016de:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80016e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d008      	beq.n	80016f8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ec:	431a      	orrs	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f000 f87c 	bl	80017f0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80016f8:	bf00      	nop
 80016fa:	3728      	adds	r7, #40	; 0x28
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001814:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <__NVIC_SetPriorityGrouping+0x44>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800181a:	68ba      	ldr	r2, [r7, #8]
 800181c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001820:	4013      	ands	r3, r2
 8001822:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800182c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001836:	4a04      	ldr	r2, [pc, #16]	; (8001848 <__NVIC_SetPriorityGrouping+0x44>)
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	60d3      	str	r3, [r2, #12]
}
 800183c:	bf00      	nop
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001850:	4b04      	ldr	r3, [pc, #16]	; (8001864 <__NVIC_GetPriorityGrouping+0x18>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	0a1b      	lsrs	r3, r3, #8
 8001856:	f003 0307 	and.w	r3, r3, #7
}
 800185a:	4618      	mov	r0, r3
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001876:	2b00      	cmp	r3, #0
 8001878:	db0b      	blt.n	8001892 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	f003 021f 	and.w	r2, r3, #31
 8001880:	4907      	ldr	r1, [pc, #28]	; (80018a0 <__NVIC_EnableIRQ+0x38>)
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	095b      	lsrs	r3, r3, #5
 8001888:	2001      	movs	r0, #1
 800188a:	fa00 f202 	lsl.w	r2, r0, r2
 800188e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	e000e100 	.word	0xe000e100

080018a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	6039      	str	r1, [r7, #0]
 80018ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	db0a      	blt.n	80018ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	490c      	ldr	r1, [pc, #48]	; (80018f0 <__NVIC_SetPriority+0x4c>)
 80018be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c2:	0112      	lsls	r2, r2, #4
 80018c4:	b2d2      	uxtb	r2, r2
 80018c6:	440b      	add	r3, r1
 80018c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018cc:	e00a      	b.n	80018e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	4908      	ldr	r1, [pc, #32]	; (80018f4 <__NVIC_SetPriority+0x50>)
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	3b04      	subs	r3, #4
 80018dc:	0112      	lsls	r2, r2, #4
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	440b      	add	r3, r1
 80018e2:	761a      	strb	r2, [r3, #24]
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	e000e100 	.word	0xe000e100
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b089      	sub	sp, #36	; 0x24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	f1c3 0307 	rsb	r3, r3, #7
 8001912:	2b04      	cmp	r3, #4
 8001914:	bf28      	it	cs
 8001916:	2304      	movcs	r3, #4
 8001918:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	3304      	adds	r3, #4
 800191e:	2b06      	cmp	r3, #6
 8001920:	d902      	bls.n	8001928 <NVIC_EncodePriority+0x30>
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	3b03      	subs	r3, #3
 8001926:	e000      	b.n	800192a <NVIC_EncodePriority+0x32>
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800192c:	f04f 32ff 	mov.w	r2, #4294967295
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	43da      	mvns	r2, r3
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	401a      	ands	r2, r3
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001940:	f04f 31ff 	mov.w	r1, #4294967295
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	fa01 f303 	lsl.w	r3, r1, r3
 800194a:	43d9      	mvns	r1, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001950:	4313      	orrs	r3, r2
         );
}
 8001952:	4618      	mov	r0, r3
 8001954:	3724      	adds	r7, #36	; 0x24
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
	...

08001960 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	3b01      	subs	r3, #1
 800196c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001970:	d301      	bcc.n	8001976 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001972:	2301      	movs	r3, #1
 8001974:	e00f      	b.n	8001996 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001976:	4a0a      	ldr	r2, [pc, #40]	; (80019a0 <SysTick_Config+0x40>)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3b01      	subs	r3, #1
 800197c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800197e:	210f      	movs	r1, #15
 8001980:	f04f 30ff 	mov.w	r0, #4294967295
 8001984:	f7ff ff8e 	bl	80018a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001988:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <SysTick_Config+0x40>)
 800198a:	2200      	movs	r2, #0
 800198c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800198e:	4b04      	ldr	r3, [pc, #16]	; (80019a0 <SysTick_Config+0x40>)
 8001990:	2207      	movs	r2, #7
 8001992:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	e000e010 	.word	0xe000e010

080019a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f7ff ff29 	bl	8001804 <__NVIC_SetPriorityGrouping>
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b086      	sub	sp, #24
 80019be:	af00      	add	r7, sp, #0
 80019c0:	4603      	mov	r3, r0
 80019c2:	60b9      	str	r1, [r7, #8]
 80019c4:	607a      	str	r2, [r7, #4]
 80019c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019cc:	f7ff ff3e 	bl	800184c <__NVIC_GetPriorityGrouping>
 80019d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	68b9      	ldr	r1, [r7, #8]
 80019d6:	6978      	ldr	r0, [r7, #20]
 80019d8:	f7ff ff8e 	bl	80018f8 <NVIC_EncodePriority>
 80019dc:	4602      	mov	r2, r0
 80019de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019e2:	4611      	mov	r1, r2
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff ff5d 	bl	80018a4 <__NVIC_SetPriority>
}
 80019ea:	bf00      	nop
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b082      	sub	sp, #8
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	4603      	mov	r3, r0
 80019fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff ff31 	bl	8001868 <__NVIC_EnableIRQ>
}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b082      	sub	sp, #8
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff ffa2 	bl	8001960 <SysTick_Config>
 8001a1c:	4603      	mov	r3, r0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
	...

08001a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b087      	sub	sp, #28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a32:	2300      	movs	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a36:	e154      	b.n	8001ce2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	fa01 f303 	lsl.w	r3, r1, r3
 8001a44:	4013      	ands	r3, r2
 8001a46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f000 8146 	beq.w	8001cdc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 0303 	and.w	r3, r3, #3
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d005      	beq.n	8001a68 <HAL_GPIO_Init+0x40>
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 0303 	and.w	r3, r3, #3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d130      	bne.n	8001aca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	2203      	movs	r2, #3
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	68da      	ldr	r2, [r3, #12]
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	091b      	lsrs	r3, r3, #4
 8001ab4:	f003 0201 	and.w	r2, r3, #1
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f003 0303 	and.w	r3, r3, #3
 8001ad2:	2b03      	cmp	r3, #3
 8001ad4:	d017      	beq.n	8001b06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	2203      	movs	r2, #3
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	4013      	ands	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	689a      	ldr	r2, [r3, #8]
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f003 0303 	and.w	r3, r3, #3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d123      	bne.n	8001b5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	08da      	lsrs	r2, r3, #3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	3208      	adds	r2, #8
 8001b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	220f      	movs	r2, #15
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	4013      	ands	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	691a      	ldr	r2, [r3, #16]
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	f003 0307 	and.w	r3, r3, #7
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	08da      	lsrs	r2, r3, #3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3208      	adds	r2, #8
 8001b54:	6939      	ldr	r1, [r7, #16]
 8001b56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	2203      	movs	r2, #3
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f003 0203 	and.w	r2, r3, #3
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f000 80a0 	beq.w	8001cdc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b9c:	4b58      	ldr	r3, [pc, #352]	; (8001d00 <HAL_GPIO_Init+0x2d8>)
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	4a57      	ldr	r2, [pc, #348]	; (8001d00 <HAL_GPIO_Init+0x2d8>)
 8001ba2:	f043 0301 	orr.w	r3, r3, #1
 8001ba6:	6193      	str	r3, [r2, #24]
 8001ba8:	4b55      	ldr	r3, [pc, #340]	; (8001d00 <HAL_GPIO_Init+0x2d8>)
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	60bb      	str	r3, [r7, #8]
 8001bb2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bb4:	4a53      	ldr	r2, [pc, #332]	; (8001d04 <HAL_GPIO_Init+0x2dc>)
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	089b      	lsrs	r3, r3, #2
 8001bba:	3302      	adds	r3, #2
 8001bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	f003 0303 	and.w	r3, r3, #3
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	220f      	movs	r2, #15
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bde:	d019      	beq.n	8001c14 <HAL_GPIO_Init+0x1ec>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4a49      	ldr	r2, [pc, #292]	; (8001d08 <HAL_GPIO_Init+0x2e0>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d013      	beq.n	8001c10 <HAL_GPIO_Init+0x1e8>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a48      	ldr	r2, [pc, #288]	; (8001d0c <HAL_GPIO_Init+0x2e4>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d00d      	beq.n	8001c0c <HAL_GPIO_Init+0x1e4>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a47      	ldr	r2, [pc, #284]	; (8001d10 <HAL_GPIO_Init+0x2e8>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d007      	beq.n	8001c08 <HAL_GPIO_Init+0x1e0>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a46      	ldr	r2, [pc, #280]	; (8001d14 <HAL_GPIO_Init+0x2ec>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d101      	bne.n	8001c04 <HAL_GPIO_Init+0x1dc>
 8001c00:	2304      	movs	r3, #4
 8001c02:	e008      	b.n	8001c16 <HAL_GPIO_Init+0x1ee>
 8001c04:	2305      	movs	r3, #5
 8001c06:	e006      	b.n	8001c16 <HAL_GPIO_Init+0x1ee>
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e004      	b.n	8001c16 <HAL_GPIO_Init+0x1ee>
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	e002      	b.n	8001c16 <HAL_GPIO_Init+0x1ee>
 8001c10:	2301      	movs	r3, #1
 8001c12:	e000      	b.n	8001c16 <HAL_GPIO_Init+0x1ee>
 8001c14:	2300      	movs	r3, #0
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	f002 0203 	and.w	r2, r2, #3
 8001c1c:	0092      	lsls	r2, r2, #2
 8001c1e:	4093      	lsls	r3, r2
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c26:	4937      	ldr	r1, [pc, #220]	; (8001d04 <HAL_GPIO_Init+0x2dc>)
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	089b      	lsrs	r3, r3, #2
 8001c2c:	3302      	adds	r3, #2
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c34:	4b38      	ldr	r3, [pc, #224]	; (8001d18 <HAL_GPIO_Init+0x2f0>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	4013      	ands	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d003      	beq.n	8001c58 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c58:	4a2f      	ldr	r2, [pc, #188]	; (8001d18 <HAL_GPIO_Init+0x2f0>)
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c5e:	4b2e      	ldr	r3, [pc, #184]	; (8001d18 <HAL_GPIO_Init+0x2f0>)
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	43db      	mvns	r3, r3
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c82:	4a25      	ldr	r2, [pc, #148]	; (8001d18 <HAL_GPIO_Init+0x2f0>)
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c88:	4b23      	ldr	r3, [pc, #140]	; (8001d18 <HAL_GPIO_Init+0x2f0>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	43db      	mvns	r3, r3
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	4013      	ands	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d003      	beq.n	8001cac <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001cac:	4a1a      	ldr	r2, [pc, #104]	; (8001d18 <HAL_GPIO_Init+0x2f0>)
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cb2:	4b19      	ldr	r3, [pc, #100]	; (8001d18 <HAL_GPIO_Init+0x2f0>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001cd6:	4a10      	ldr	r2, [pc, #64]	; (8001d18 <HAL_GPIO_Init+0x2f0>)
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f47f aea3 	bne.w	8001a38 <HAL_GPIO_Init+0x10>
  }
}
 8001cf2:	bf00      	nop
 8001cf4:	bf00      	nop
 8001cf6:	371c      	adds	r7, #28
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	40021000 	.word	0x40021000
 8001d04:	40010000 	.word	0x40010000
 8001d08:	48000400 	.word	0x48000400
 8001d0c:	48000800 	.word	0x48000800
 8001d10:	48000c00 	.word	0x48000c00
 8001d14:	48001000 	.word	0x48001000
 8001d18:	40010400 	.word	0x40010400

08001d1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	460b      	mov	r3, r1
 8001d26:	807b      	strh	r3, [r7, #2]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d2c:	787b      	ldrb	r3, [r7, #1]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d32:	887a      	ldrh	r2, [r7, #2]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d38:	e002      	b.n	8001d40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d3a:	887a      	ldrh	r2, [r7, #2]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e081      	b.n	8001e62 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d106      	bne.n	8001d78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7fe fd14 	bl	80007a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2224      	movs	r2, #36	; 0x24
 8001d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f022 0201 	bic.w	r2, r2, #1
 8001d8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d9c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d107      	bne.n	8001dc6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689a      	ldr	r2, [r3, #8]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	e006      	b.n	8001dd4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	689a      	ldr	r2, [r3, #8]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001dd2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d104      	bne.n	8001de6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001de4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	6812      	ldr	r2, [r2, #0]
 8001df0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001df4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001df8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68da      	ldr	r2, [r3, #12]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e08:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	691a      	ldr	r2, [r3, #16]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	430a      	orrs	r2, r1
 8001e22:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	69d9      	ldr	r1, [r3, #28]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a1a      	ldr	r2, [r3, #32]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	430a      	orrs	r2, r1
 8001e32:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f042 0201 	orr.w	r2, r2, #1
 8001e42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2220      	movs	r2, #32
 8001e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
 8001e72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b20      	cmp	r3, #32
 8001e7e:	d138      	bne.n	8001ef2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d101      	bne.n	8001e8e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	e032      	b.n	8001ef4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2224      	movs	r2, #36	; 0x24
 8001e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f022 0201 	bic.w	r2, r2, #1
 8001eac:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ebc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6819      	ldr	r1, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f042 0201 	orr.w	r2, r2, #1
 8001edc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2220      	movs	r2, #32
 8001ee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	e000      	b.n	8001ef4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ef2:	2302      	movs	r3, #2
  }
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b20      	cmp	r3, #32
 8001f14:	d139      	bne.n	8001f8a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d101      	bne.n	8001f24 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f20:	2302      	movs	r3, #2
 8001f22:	e033      	b.n	8001f8c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2224      	movs	r2, #36	; 0x24
 8001f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f022 0201 	bic.w	r2, r2, #1
 8001f42:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f52:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	021b      	lsls	r3, r3, #8
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f042 0201 	orr.w	r2, r2, #1
 8001f74:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2220      	movs	r2, #32
 8001f7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f86:	2300      	movs	r3, #0
 8001f88:	e000      	b.n	8001f8c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f8a:	2302      	movs	r3, #2
  }
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f9a:	b08b      	sub	sp, #44	; 0x2c
 8001f9c:	af06      	add	r7, sp, #24
 8001f9e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e0c4      	b.n	8002134 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d106      	bne.n	8001fc4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7fe fc74 	bl	80008ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2203      	movs	r2, #3
 8001fc8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f001 fd32 	bl	8003a3a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	73fb      	strb	r3, [r7, #15]
 8001fda:	e040      	b.n	800205e <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	1c5a      	adds	r2, r3, #1
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	4413      	add	r3, r2
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	440b      	add	r3, r1
 8001fec:	3301      	adds	r3, #1
 8001fee:	2201      	movs	r2, #1
 8001ff0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ff2:	7bfb      	ldrb	r3, [r7, #15]
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	1c5a      	adds	r2, r3, #1
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	440b      	add	r3, r1
 8002002:	7bfa      	ldrb	r2, [r7, #15]
 8002004:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002006:	7bfb      	ldrb	r3, [r7, #15]
 8002008:	6879      	ldr	r1, [r7, #4]
 800200a:	1c5a      	adds	r2, r3, #1
 800200c:	4613      	mov	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4413      	add	r3, r2
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	440b      	add	r3, r1
 8002016:	3303      	adds	r3, #3
 8002018:	2200      	movs	r2, #0
 800201a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800201c:	7bfa      	ldrb	r2, [r7, #15]
 800201e:	6879      	ldr	r1, [r7, #4]
 8002020:	4613      	mov	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4413      	add	r3, r2
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	440b      	add	r3, r1
 800202a:	3338      	adds	r3, #56	; 0x38
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002030:	7bfa      	ldrb	r2, [r7, #15]
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	4613      	mov	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	440b      	add	r3, r1
 800203e:	333c      	adds	r3, #60	; 0x3c
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002044:	7bfa      	ldrb	r2, [r7, #15]
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	4613      	mov	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	4413      	add	r3, r2
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	440b      	add	r3, r1
 8002052:	3340      	adds	r3, #64	; 0x40
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002058:	7bfb      	ldrb	r3, [r7, #15]
 800205a:	3301      	adds	r3, #1
 800205c:	73fb      	strb	r3, [r7, #15]
 800205e:	7bfa      	ldrb	r2, [r7, #15]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	429a      	cmp	r2, r3
 8002066:	d3b9      	bcc.n	8001fdc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002068:	2300      	movs	r3, #0
 800206a:	73fb      	strb	r3, [r7, #15]
 800206c:	e044      	b.n	80020f8 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800206e:	7bfa      	ldrb	r2, [r7, #15]
 8002070:	6879      	ldr	r1, [r7, #4]
 8002072:	4613      	mov	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	440b      	add	r3, r1
 800207c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002080:	2200      	movs	r2, #0
 8002082:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002084:	7bfa      	ldrb	r2, [r7, #15]
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	4613      	mov	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	440b      	add	r3, r1
 8002092:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002096:	7bfa      	ldrb	r2, [r7, #15]
 8002098:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800209a:	7bfa      	ldrb	r2, [r7, #15]
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	4613      	mov	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4413      	add	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	440b      	add	r3, r1
 80020a8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80020ac:	2200      	movs	r2, #0
 80020ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020b0:	7bfa      	ldrb	r2, [r7, #15]
 80020b2:	6879      	ldr	r1, [r7, #4]
 80020b4:	4613      	mov	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	440b      	add	r3, r1
 80020be:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020c6:	7bfa      	ldrb	r2, [r7, #15]
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	4613      	mov	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	440b      	add	r3, r1
 80020d4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020dc:	7bfa      	ldrb	r2, [r7, #15]
 80020de:	6879      	ldr	r1, [r7, #4]
 80020e0:	4613      	mov	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	440b      	add	r3, r1
 80020ea:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020f2:	7bfb      	ldrb	r3, [r7, #15]
 80020f4:	3301      	adds	r3, #1
 80020f6:	73fb      	strb	r3, [r7, #15]
 80020f8:	7bfa      	ldrb	r2, [r7, #15]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d3b5      	bcc.n	800206e <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	603b      	str	r3, [r7, #0]
 8002108:	687e      	ldr	r6, [r7, #4]
 800210a:	466d      	mov	r5, sp
 800210c:	f106 0410 	add.w	r4, r6, #16
 8002110:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002112:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002114:	6823      	ldr	r3, [r4, #0]
 8002116:	602b      	str	r3, [r5, #0]
 8002118:	1d33      	adds	r3, r6, #4
 800211a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800211c:	6838      	ldr	r0, [r7, #0]
 800211e:	f001 fca7 	bl	8003a70 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3714      	adds	r7, #20
 8002138:	46bd      	mov	sp, r7
 800213a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800213c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002142:	af00      	add	r7, sp, #0
 8002144:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002148:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800214c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800214e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002152:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d102      	bne.n	8002162 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	f001 b823 	b.w	80031a8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002162:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002166:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	f000 817d 	beq.w	8002472 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002178:	4bbc      	ldr	r3, [pc, #752]	; (800246c <HAL_RCC_OscConfig+0x330>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 030c 	and.w	r3, r3, #12
 8002180:	2b04      	cmp	r3, #4
 8002182:	d00c      	beq.n	800219e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002184:	4bb9      	ldr	r3, [pc, #740]	; (800246c <HAL_RCC_OscConfig+0x330>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 030c 	and.w	r3, r3, #12
 800218c:	2b08      	cmp	r3, #8
 800218e:	d15c      	bne.n	800224a <HAL_RCC_OscConfig+0x10e>
 8002190:	4bb6      	ldr	r3, [pc, #728]	; (800246c <HAL_RCC_OscConfig+0x330>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800219c:	d155      	bne.n	800224a <HAL_RCC_OscConfig+0x10e>
 800219e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021a2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80021aa:	fa93 f3a3 	rbit	r3, r3
 80021ae:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021b2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b6:	fab3 f383 	clz	r3, r3
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	095b      	lsrs	r3, r3, #5
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	f043 0301 	orr.w	r3, r3, #1
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d102      	bne.n	80021d0 <HAL_RCC_OscConfig+0x94>
 80021ca:	4ba8      	ldr	r3, [pc, #672]	; (800246c <HAL_RCC_OscConfig+0x330>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	e015      	b.n	80021fc <HAL_RCC_OscConfig+0xc0>
 80021d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021d4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80021dc:	fa93 f3a3 	rbit	r3, r3
 80021e0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80021e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021e8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80021ec:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80021f0:	fa93 f3a3 	rbit	r3, r3
 80021f4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80021f8:	4b9c      	ldr	r3, [pc, #624]	; (800246c <HAL_RCC_OscConfig+0x330>)
 80021fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002200:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002204:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002208:	fa92 f2a2 	rbit	r2, r2
 800220c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002210:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002214:	fab2 f282 	clz	r2, r2
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	f042 0220 	orr.w	r2, r2, #32
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	f002 021f 	and.w	r2, r2, #31
 8002224:	2101      	movs	r1, #1
 8002226:	fa01 f202 	lsl.w	r2, r1, r2
 800222a:	4013      	ands	r3, r2
 800222c:	2b00      	cmp	r3, #0
 800222e:	f000 811f 	beq.w	8002470 <HAL_RCC_OscConfig+0x334>
 8002232:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002236:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	f040 8116 	bne.w	8002470 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	f000 bfaf 	b.w	80031a8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800224a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800224e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800225a:	d106      	bne.n	800226a <HAL_RCC_OscConfig+0x12e>
 800225c:	4b83      	ldr	r3, [pc, #524]	; (800246c <HAL_RCC_OscConfig+0x330>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a82      	ldr	r2, [pc, #520]	; (800246c <HAL_RCC_OscConfig+0x330>)
 8002262:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002266:	6013      	str	r3, [r2, #0]
 8002268:	e036      	b.n	80022d8 <HAL_RCC_OscConfig+0x19c>
 800226a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800226e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d10c      	bne.n	8002294 <HAL_RCC_OscConfig+0x158>
 800227a:	4b7c      	ldr	r3, [pc, #496]	; (800246c <HAL_RCC_OscConfig+0x330>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a7b      	ldr	r2, [pc, #492]	; (800246c <HAL_RCC_OscConfig+0x330>)
 8002280:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002284:	6013      	str	r3, [r2, #0]
 8002286:	4b79      	ldr	r3, [pc, #484]	; (800246c <HAL_RCC_OscConfig+0x330>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a78      	ldr	r2, [pc, #480]	; (800246c <HAL_RCC_OscConfig+0x330>)
 800228c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002290:	6013      	str	r3, [r2, #0]
 8002292:	e021      	b.n	80022d8 <HAL_RCC_OscConfig+0x19c>
 8002294:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002298:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022a4:	d10c      	bne.n	80022c0 <HAL_RCC_OscConfig+0x184>
 80022a6:	4b71      	ldr	r3, [pc, #452]	; (800246c <HAL_RCC_OscConfig+0x330>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a70      	ldr	r2, [pc, #448]	; (800246c <HAL_RCC_OscConfig+0x330>)
 80022ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	4b6e      	ldr	r3, [pc, #440]	; (800246c <HAL_RCC_OscConfig+0x330>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a6d      	ldr	r2, [pc, #436]	; (800246c <HAL_RCC_OscConfig+0x330>)
 80022b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	e00b      	b.n	80022d8 <HAL_RCC_OscConfig+0x19c>
 80022c0:	4b6a      	ldr	r3, [pc, #424]	; (800246c <HAL_RCC_OscConfig+0x330>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a69      	ldr	r2, [pc, #420]	; (800246c <HAL_RCC_OscConfig+0x330>)
 80022c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ca:	6013      	str	r3, [r2, #0]
 80022cc:	4b67      	ldr	r3, [pc, #412]	; (800246c <HAL_RCC_OscConfig+0x330>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a66      	ldr	r2, [pc, #408]	; (800246c <HAL_RCC_OscConfig+0x330>)
 80022d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022d6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022d8:	4b64      	ldr	r3, [pc, #400]	; (800246c <HAL_RCC_OscConfig+0x330>)
 80022da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022dc:	f023 020f 	bic.w	r2, r3, #15
 80022e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	495f      	ldr	r1, [pc, #380]	; (800246c <HAL_RCC_OscConfig+0x330>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d059      	beq.n	80023b6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002302:	f7fe fbf5 	bl	8000af0 <HAL_GetTick>
 8002306:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800230a:	e00a      	b.n	8002322 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800230c:	f7fe fbf0 	bl	8000af0 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b64      	cmp	r3, #100	; 0x64
 800231a:	d902      	bls.n	8002322 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	f000 bf43 	b.w	80031a8 <HAL_RCC_OscConfig+0x106c>
 8002322:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002326:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800232e:	fa93 f3a3 	rbit	r3, r3
 8002332:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002336:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800233a:	fab3 f383 	clz	r3, r3
 800233e:	b2db      	uxtb	r3, r3
 8002340:	095b      	lsrs	r3, r3, #5
 8002342:	b2db      	uxtb	r3, r3
 8002344:	f043 0301 	orr.w	r3, r3, #1
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b01      	cmp	r3, #1
 800234c:	d102      	bne.n	8002354 <HAL_RCC_OscConfig+0x218>
 800234e:	4b47      	ldr	r3, [pc, #284]	; (800246c <HAL_RCC_OscConfig+0x330>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	e015      	b.n	8002380 <HAL_RCC_OscConfig+0x244>
 8002354:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002358:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002360:	fa93 f3a3 	rbit	r3, r3
 8002364:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002368:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800236c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002370:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002374:	fa93 f3a3 	rbit	r3, r3
 8002378:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800237c:	4b3b      	ldr	r3, [pc, #236]	; (800246c <HAL_RCC_OscConfig+0x330>)
 800237e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002380:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002384:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002388:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800238c:	fa92 f2a2 	rbit	r2, r2
 8002390:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002394:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002398:	fab2 f282 	clz	r2, r2
 800239c:	b2d2      	uxtb	r2, r2
 800239e:	f042 0220 	orr.w	r2, r2, #32
 80023a2:	b2d2      	uxtb	r2, r2
 80023a4:	f002 021f 	and.w	r2, r2, #31
 80023a8:	2101      	movs	r1, #1
 80023aa:	fa01 f202 	lsl.w	r2, r1, r2
 80023ae:	4013      	ands	r3, r2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d0ab      	beq.n	800230c <HAL_RCC_OscConfig+0x1d0>
 80023b4:	e05d      	b.n	8002472 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b6:	f7fe fb9b 	bl	8000af0 <HAL_GetTick>
 80023ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023be:	e00a      	b.n	80023d6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023c0:	f7fe fb96 	bl	8000af0 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b64      	cmp	r3, #100	; 0x64
 80023ce:	d902      	bls.n	80023d6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	f000 bee9 	b.w	80031a8 <HAL_RCC_OscConfig+0x106c>
 80023d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023da:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023de:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80023e2:	fa93 f3a3 	rbit	r3, r3
 80023e6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80023ea:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ee:	fab3 f383 	clz	r3, r3
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	095b      	lsrs	r3, r3, #5
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	f043 0301 	orr.w	r3, r3, #1
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d102      	bne.n	8002408 <HAL_RCC_OscConfig+0x2cc>
 8002402:	4b1a      	ldr	r3, [pc, #104]	; (800246c <HAL_RCC_OscConfig+0x330>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	e015      	b.n	8002434 <HAL_RCC_OscConfig+0x2f8>
 8002408:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800240c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002410:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002414:	fa93 f3a3 	rbit	r3, r3
 8002418:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800241c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002420:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002424:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002428:	fa93 f3a3 	rbit	r3, r3
 800242c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002430:	4b0e      	ldr	r3, [pc, #56]	; (800246c <HAL_RCC_OscConfig+0x330>)
 8002432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002434:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002438:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800243c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002440:	fa92 f2a2 	rbit	r2, r2
 8002444:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002448:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800244c:	fab2 f282 	clz	r2, r2
 8002450:	b2d2      	uxtb	r2, r2
 8002452:	f042 0220 	orr.w	r2, r2, #32
 8002456:	b2d2      	uxtb	r2, r2
 8002458:	f002 021f 	and.w	r2, r2, #31
 800245c:	2101      	movs	r1, #1
 800245e:	fa01 f202 	lsl.w	r2, r1, r2
 8002462:	4013      	ands	r3, r2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1ab      	bne.n	80023c0 <HAL_RCC_OscConfig+0x284>
 8002468:	e003      	b.n	8002472 <HAL_RCC_OscConfig+0x336>
 800246a:	bf00      	nop
 800246c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002476:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 817d 	beq.w	8002782 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002488:	4ba6      	ldr	r3, [pc, #664]	; (8002724 <HAL_RCC_OscConfig+0x5e8>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f003 030c 	and.w	r3, r3, #12
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00b      	beq.n	80024ac <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002494:	4ba3      	ldr	r3, [pc, #652]	; (8002724 <HAL_RCC_OscConfig+0x5e8>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f003 030c 	and.w	r3, r3, #12
 800249c:	2b08      	cmp	r3, #8
 800249e:	d172      	bne.n	8002586 <HAL_RCC_OscConfig+0x44a>
 80024a0:	4ba0      	ldr	r3, [pc, #640]	; (8002724 <HAL_RCC_OscConfig+0x5e8>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d16c      	bne.n	8002586 <HAL_RCC_OscConfig+0x44a>
 80024ac:	2302      	movs	r3, #2
 80024ae:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80024b6:	fa93 f3a3 	rbit	r3, r3
 80024ba:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80024be:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024c2:	fab3 f383 	clz	r3, r3
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	095b      	lsrs	r3, r3, #5
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	f043 0301 	orr.w	r3, r3, #1
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d102      	bne.n	80024dc <HAL_RCC_OscConfig+0x3a0>
 80024d6:	4b93      	ldr	r3, [pc, #588]	; (8002724 <HAL_RCC_OscConfig+0x5e8>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	e013      	b.n	8002504 <HAL_RCC_OscConfig+0x3c8>
 80024dc:	2302      	movs	r3, #2
 80024de:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80024e6:	fa93 f3a3 	rbit	r3, r3
 80024ea:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80024ee:	2302      	movs	r3, #2
 80024f0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80024f4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80024f8:	fa93 f3a3 	rbit	r3, r3
 80024fc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002500:	4b88      	ldr	r3, [pc, #544]	; (8002724 <HAL_RCC_OscConfig+0x5e8>)
 8002502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002504:	2202      	movs	r2, #2
 8002506:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800250a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800250e:	fa92 f2a2 	rbit	r2, r2
 8002512:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002516:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800251a:	fab2 f282 	clz	r2, r2
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	f042 0220 	orr.w	r2, r2, #32
 8002524:	b2d2      	uxtb	r2, r2
 8002526:	f002 021f 	and.w	r2, r2, #31
 800252a:	2101      	movs	r1, #1
 800252c:	fa01 f202 	lsl.w	r2, r1, r2
 8002530:	4013      	ands	r3, r2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00a      	beq.n	800254c <HAL_RCC_OscConfig+0x410>
 8002536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d002      	beq.n	800254c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	f000 be2e 	b.w	80031a8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800254c:	4b75      	ldr	r3, [pc, #468]	; (8002724 <HAL_RCC_OscConfig+0x5e8>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002554:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002558:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	695b      	ldr	r3, [r3, #20]
 8002560:	21f8      	movs	r1, #248	; 0xf8
 8002562:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002566:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800256a:	fa91 f1a1 	rbit	r1, r1
 800256e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002572:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002576:	fab1 f181 	clz	r1, r1
 800257a:	b2c9      	uxtb	r1, r1
 800257c:	408b      	lsls	r3, r1
 800257e:	4969      	ldr	r1, [pc, #420]	; (8002724 <HAL_RCC_OscConfig+0x5e8>)
 8002580:	4313      	orrs	r3, r2
 8002582:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002584:	e0fd      	b.n	8002782 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800258a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	2b00      	cmp	r3, #0
 8002594:	f000 8088 	beq.w	80026a8 <HAL_RCC_OscConfig+0x56c>
 8002598:	2301      	movs	r3, #1
 800259a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80025a2:	fa93 f3a3 	rbit	r3, r3
 80025a6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80025aa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025ae:	fab3 f383 	clz	r3, r3
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	461a      	mov	r2, r3
 80025c0:	2301      	movs	r3, #1
 80025c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c4:	f7fe fa94 	bl	8000af0 <HAL_GetTick>
 80025c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025cc:	e00a      	b.n	80025e4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025ce:	f7fe fa8f 	bl	8000af0 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d902      	bls.n	80025e4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	f000 bde2 	b.w	80031a8 <HAL_RCC_OscConfig+0x106c>
 80025e4:	2302      	movs	r3, #2
 80025e6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ea:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80025ee:	fa93 f3a3 	rbit	r3, r3
 80025f2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80025f6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025fa:	fab3 f383 	clz	r3, r3
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	095b      	lsrs	r3, r3, #5
 8002602:	b2db      	uxtb	r3, r3
 8002604:	f043 0301 	orr.w	r3, r3, #1
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b01      	cmp	r3, #1
 800260c:	d102      	bne.n	8002614 <HAL_RCC_OscConfig+0x4d8>
 800260e:	4b45      	ldr	r3, [pc, #276]	; (8002724 <HAL_RCC_OscConfig+0x5e8>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	e013      	b.n	800263c <HAL_RCC_OscConfig+0x500>
 8002614:	2302      	movs	r3, #2
 8002616:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800261e:	fa93 f3a3 	rbit	r3, r3
 8002622:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002626:	2302      	movs	r3, #2
 8002628:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800262c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002630:	fa93 f3a3 	rbit	r3, r3
 8002634:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002638:	4b3a      	ldr	r3, [pc, #232]	; (8002724 <HAL_RCC_OscConfig+0x5e8>)
 800263a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263c:	2202      	movs	r2, #2
 800263e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002642:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002646:	fa92 f2a2 	rbit	r2, r2
 800264a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800264e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002652:	fab2 f282 	clz	r2, r2
 8002656:	b2d2      	uxtb	r2, r2
 8002658:	f042 0220 	orr.w	r2, r2, #32
 800265c:	b2d2      	uxtb	r2, r2
 800265e:	f002 021f 	and.w	r2, r2, #31
 8002662:	2101      	movs	r1, #1
 8002664:	fa01 f202 	lsl.w	r2, r1, r2
 8002668:	4013      	ands	r3, r2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0af      	beq.n	80025ce <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800266e:	4b2d      	ldr	r3, [pc, #180]	; (8002724 <HAL_RCC_OscConfig+0x5e8>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800267a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	21f8      	movs	r1, #248	; 0xf8
 8002684:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002688:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800268c:	fa91 f1a1 	rbit	r1, r1
 8002690:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002694:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002698:	fab1 f181 	clz	r1, r1
 800269c:	b2c9      	uxtb	r1, r1
 800269e:	408b      	lsls	r3, r1
 80026a0:	4920      	ldr	r1, [pc, #128]	; (8002724 <HAL_RCC_OscConfig+0x5e8>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	600b      	str	r3, [r1, #0]
 80026a6:	e06c      	b.n	8002782 <HAL_RCC_OscConfig+0x646>
 80026a8:	2301      	movs	r3, #1
 80026aa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ae:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80026b2:	fa93 f3a3 	rbit	r3, r3
 80026b6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80026ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026be:	fab3 f383 	clz	r3, r3
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	461a      	mov	r2, r3
 80026d0:	2300      	movs	r3, #0
 80026d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d4:	f7fe fa0c 	bl	8000af0 <HAL_GetTick>
 80026d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026dc:	e00a      	b.n	80026f4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026de:	f7fe fa07 	bl	8000af0 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d902      	bls.n	80026f4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	f000 bd5a 	b.w	80031a8 <HAL_RCC_OscConfig+0x106c>
 80026f4:	2302      	movs	r3, #2
 80026f6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80026fe:	fa93 f3a3 	rbit	r3, r3
 8002702:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002706:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800270a:	fab3 f383 	clz	r3, r3
 800270e:	b2db      	uxtb	r3, r3
 8002710:	095b      	lsrs	r3, r3, #5
 8002712:	b2db      	uxtb	r3, r3
 8002714:	f043 0301 	orr.w	r3, r3, #1
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b01      	cmp	r3, #1
 800271c:	d104      	bne.n	8002728 <HAL_RCC_OscConfig+0x5ec>
 800271e:	4b01      	ldr	r3, [pc, #4]	; (8002724 <HAL_RCC_OscConfig+0x5e8>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	e015      	b.n	8002750 <HAL_RCC_OscConfig+0x614>
 8002724:	40021000 	.word	0x40021000
 8002728:	2302      	movs	r3, #2
 800272a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002732:	fa93 f3a3 	rbit	r3, r3
 8002736:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800273a:	2302      	movs	r3, #2
 800273c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002740:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002744:	fa93 f3a3 	rbit	r3, r3
 8002748:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800274c:	4bc8      	ldr	r3, [pc, #800]	; (8002a70 <HAL_RCC_OscConfig+0x934>)
 800274e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002750:	2202      	movs	r2, #2
 8002752:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002756:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800275a:	fa92 f2a2 	rbit	r2, r2
 800275e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002762:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002766:	fab2 f282 	clz	r2, r2
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	f042 0220 	orr.w	r2, r2, #32
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	f002 021f 	and.w	r2, r2, #31
 8002776:	2101      	movs	r1, #1
 8002778:	fa01 f202 	lsl.w	r2, r1, r2
 800277c:	4013      	ands	r3, r2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1ad      	bne.n	80026de <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002786:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0308 	and.w	r3, r3, #8
 8002792:	2b00      	cmp	r3, #0
 8002794:	f000 8110 	beq.w	80029b8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002798:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d079      	beq.n	800289c <HAL_RCC_OscConfig+0x760>
 80027a8:	2301      	movs	r3, #1
 80027aa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80027b2:	fa93 f3a3 	rbit	r3, r3
 80027b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80027ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027be:	fab3 f383 	clz	r3, r3
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	461a      	mov	r2, r3
 80027c6:	4bab      	ldr	r3, [pc, #684]	; (8002a74 <HAL_RCC_OscConfig+0x938>)
 80027c8:	4413      	add	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	461a      	mov	r2, r3
 80027ce:	2301      	movs	r3, #1
 80027d0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d2:	f7fe f98d 	bl	8000af0 <HAL_GetTick>
 80027d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027da:	e00a      	b.n	80027f2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027dc:	f7fe f988 	bl	8000af0 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d902      	bls.n	80027f2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	f000 bcdb 	b.w	80031a8 <HAL_RCC_OscConfig+0x106c>
 80027f2:	2302      	movs	r3, #2
 80027f4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80027fc:	fa93 f3a3 	rbit	r3, r3
 8002800:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002804:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002808:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800280c:	2202      	movs	r2, #2
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002814:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	fa93 f2a3 	rbit	r2, r3
 800281e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002822:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800282c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002830:	2202      	movs	r2, #2
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002838:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	fa93 f2a3 	rbit	r2, r3
 8002842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002846:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800284a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800284c:	4b88      	ldr	r3, [pc, #544]	; (8002a70 <HAL_RCC_OscConfig+0x934>)
 800284e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002850:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002854:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002858:	2102      	movs	r1, #2
 800285a:	6019      	str	r1, [r3, #0]
 800285c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002860:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	fa93 f1a3 	rbit	r1, r3
 800286a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800286e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002872:	6019      	str	r1, [r3, #0]
  return result;
 8002874:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002878:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	fab3 f383 	clz	r3, r3
 8002882:	b2db      	uxtb	r3, r3
 8002884:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002888:	b2db      	uxtb	r3, r3
 800288a:	f003 031f 	and.w	r3, r3, #31
 800288e:	2101      	movs	r1, #1
 8002890:	fa01 f303 	lsl.w	r3, r1, r3
 8002894:	4013      	ands	r3, r2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d0a0      	beq.n	80027dc <HAL_RCC_OscConfig+0x6a0>
 800289a:	e08d      	b.n	80029b8 <HAL_RCC_OscConfig+0x87c>
 800289c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80028a4:	2201      	movs	r2, #1
 80028a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ac:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	fa93 f2a3 	rbit	r2, r3
 80028b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ba:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80028be:	601a      	str	r2, [r3, #0]
  return result;
 80028c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80028c8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ca:	fab3 f383 	clz	r3, r3
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	461a      	mov	r2, r3
 80028d2:	4b68      	ldr	r3, [pc, #416]	; (8002a74 <HAL_RCC_OscConfig+0x938>)
 80028d4:	4413      	add	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	461a      	mov	r2, r3
 80028da:	2300      	movs	r3, #0
 80028dc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028de:	f7fe f907 	bl	8000af0 <HAL_GetTick>
 80028e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028e6:	e00a      	b.n	80028fe <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028e8:	f7fe f902 	bl	8000af0 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d902      	bls.n	80028fe <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	f000 bc55 	b.w	80031a8 <HAL_RCC_OscConfig+0x106c>
 80028fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002902:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002906:	2202      	movs	r2, #2
 8002908:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800290e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	fa93 f2a3 	rbit	r2, r3
 8002918:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800291c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002926:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800292a:	2202      	movs	r2, #2
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002932:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	fa93 f2a3 	rbit	r2, r3
 800293c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002940:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800294a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800294e:	2202      	movs	r2, #2
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002956:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	fa93 f2a3 	rbit	r2, r3
 8002960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002964:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002968:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800296a:	4b41      	ldr	r3, [pc, #260]	; (8002a70 <HAL_RCC_OscConfig+0x934>)
 800296c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800296e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002972:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002976:	2102      	movs	r1, #2
 8002978:	6019      	str	r1, [r3, #0]
 800297a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800297e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	fa93 f1a3 	rbit	r1, r3
 8002988:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800298c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002990:	6019      	str	r1, [r3, #0]
  return result;
 8002992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002996:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	fab3 f383 	clz	r3, r3
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	f003 031f 	and.w	r3, r3, #31
 80029ac:	2101      	movs	r1, #1
 80029ae:	fa01 f303 	lsl.w	r3, r1, r3
 80029b2:	4013      	ands	r3, r2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d197      	bne.n	80028e8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0304 	and.w	r3, r3, #4
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f000 81a1 	beq.w	8002d10 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ce:	2300      	movs	r3, #0
 80029d0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029d4:	4b26      	ldr	r3, [pc, #152]	; (8002a70 <HAL_RCC_OscConfig+0x934>)
 80029d6:	69db      	ldr	r3, [r3, #28]
 80029d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d116      	bne.n	8002a0e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029e0:	4b23      	ldr	r3, [pc, #140]	; (8002a70 <HAL_RCC_OscConfig+0x934>)
 80029e2:	69db      	ldr	r3, [r3, #28]
 80029e4:	4a22      	ldr	r2, [pc, #136]	; (8002a70 <HAL_RCC_OscConfig+0x934>)
 80029e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ea:	61d3      	str	r3, [r2, #28]
 80029ec:	4b20      	ldr	r3, [pc, #128]	; (8002a70 <HAL_RCC_OscConfig+0x934>)
 80029ee:	69db      	ldr	r3, [r3, #28]
 80029f0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80029f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a02:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002a06:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a0e:	4b1a      	ldr	r3, [pc, #104]	; (8002a78 <HAL_RCC_OscConfig+0x93c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d11a      	bne.n	8002a50 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a1a:	4b17      	ldr	r3, [pc, #92]	; (8002a78 <HAL_RCC_OscConfig+0x93c>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a16      	ldr	r2, [pc, #88]	; (8002a78 <HAL_RCC_OscConfig+0x93c>)
 8002a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a24:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a26:	f7fe f863 	bl	8000af0 <HAL_GetTick>
 8002a2a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a2e:	e009      	b.n	8002a44 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a30:	f7fe f85e 	bl	8000af0 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b64      	cmp	r3, #100	; 0x64
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e3b1      	b.n	80031a8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a44:	4b0c      	ldr	r3, [pc, #48]	; (8002a78 <HAL_RCC_OscConfig+0x93c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d0ef      	beq.n	8002a30 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d10d      	bne.n	8002a7c <HAL_RCC_OscConfig+0x940>
 8002a60:	4b03      	ldr	r3, [pc, #12]	; (8002a70 <HAL_RCC_OscConfig+0x934>)
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	4a02      	ldr	r2, [pc, #8]	; (8002a70 <HAL_RCC_OscConfig+0x934>)
 8002a66:	f043 0301 	orr.w	r3, r3, #1
 8002a6a:	6213      	str	r3, [r2, #32]
 8002a6c:	e03c      	b.n	8002ae8 <HAL_RCC_OscConfig+0x9ac>
 8002a6e:	bf00      	nop
 8002a70:	40021000 	.word	0x40021000
 8002a74:	10908120 	.word	0x10908120
 8002a78:	40007000 	.word	0x40007000
 8002a7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d10c      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x96a>
 8002a8c:	4bc1      	ldr	r3, [pc, #772]	; (8002d94 <HAL_RCC_OscConfig+0xc58>)
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	4ac0      	ldr	r2, [pc, #768]	; (8002d94 <HAL_RCC_OscConfig+0xc58>)
 8002a92:	f023 0301 	bic.w	r3, r3, #1
 8002a96:	6213      	str	r3, [r2, #32]
 8002a98:	4bbe      	ldr	r3, [pc, #760]	; (8002d94 <HAL_RCC_OscConfig+0xc58>)
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	4abd      	ldr	r2, [pc, #756]	; (8002d94 <HAL_RCC_OscConfig+0xc58>)
 8002a9e:	f023 0304 	bic.w	r3, r3, #4
 8002aa2:	6213      	str	r3, [r2, #32]
 8002aa4:	e020      	b.n	8002ae8 <HAL_RCC_OscConfig+0x9ac>
 8002aa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aaa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	2b05      	cmp	r3, #5
 8002ab4:	d10c      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x994>
 8002ab6:	4bb7      	ldr	r3, [pc, #732]	; (8002d94 <HAL_RCC_OscConfig+0xc58>)
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	4ab6      	ldr	r2, [pc, #728]	; (8002d94 <HAL_RCC_OscConfig+0xc58>)
 8002abc:	f043 0304 	orr.w	r3, r3, #4
 8002ac0:	6213      	str	r3, [r2, #32]
 8002ac2:	4bb4      	ldr	r3, [pc, #720]	; (8002d94 <HAL_RCC_OscConfig+0xc58>)
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	4ab3      	ldr	r2, [pc, #716]	; (8002d94 <HAL_RCC_OscConfig+0xc58>)
 8002ac8:	f043 0301 	orr.w	r3, r3, #1
 8002acc:	6213      	str	r3, [r2, #32]
 8002ace:	e00b      	b.n	8002ae8 <HAL_RCC_OscConfig+0x9ac>
 8002ad0:	4bb0      	ldr	r3, [pc, #704]	; (8002d94 <HAL_RCC_OscConfig+0xc58>)
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	4aaf      	ldr	r2, [pc, #700]	; (8002d94 <HAL_RCC_OscConfig+0xc58>)
 8002ad6:	f023 0301 	bic.w	r3, r3, #1
 8002ada:	6213      	str	r3, [r2, #32]
 8002adc:	4bad      	ldr	r3, [pc, #692]	; (8002d94 <HAL_RCC_OscConfig+0xc58>)
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	4aac      	ldr	r2, [pc, #688]	; (8002d94 <HAL_RCC_OscConfig+0xc58>)
 8002ae2:	f023 0304 	bic.w	r3, r3, #4
 8002ae6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ae8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f000 8081 	beq.w	8002bfc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002afa:	f7fd fff9 	bl	8000af0 <HAL_GetTick>
 8002afe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b02:	e00b      	b.n	8002b1c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b04:	f7fd fff4 	bl	8000af0 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e345      	b.n	80031a8 <HAL_RCC_OscConfig+0x106c>
 8002b1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b20:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002b24:	2202      	movs	r2, #2
 8002b26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b2c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	fa93 f2a3 	rbit	r2, r3
 8002b36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b3a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b44:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002b48:	2202      	movs	r2, #2
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b50:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	fa93 f2a3 	rbit	r2, r3
 8002b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b5e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002b62:	601a      	str	r2, [r3, #0]
  return result;
 8002b64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b68:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002b6c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b6e:	fab3 f383 	clz	r3, r3
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	095b      	lsrs	r3, r3, #5
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	f043 0302 	orr.w	r3, r3, #2
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d102      	bne.n	8002b88 <HAL_RCC_OscConfig+0xa4c>
 8002b82:	4b84      	ldr	r3, [pc, #528]	; (8002d94 <HAL_RCC_OscConfig+0xc58>)
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	e013      	b.n	8002bb0 <HAL_RCC_OscConfig+0xa74>
 8002b88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b8c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002b90:	2202      	movs	r2, #2
 8002b92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b98:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	fa93 f2a3 	rbit	r2, r3
 8002ba2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	4b79      	ldr	r3, [pc, #484]	; (8002d94 <HAL_RCC_OscConfig+0xc58>)
 8002bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bb4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002bb8:	2102      	movs	r1, #2
 8002bba:	6011      	str	r1, [r2, #0]
 8002bbc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bc0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002bc4:	6812      	ldr	r2, [r2, #0]
 8002bc6:	fa92 f1a2 	rbit	r1, r2
 8002bca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bce:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002bd2:	6011      	str	r1, [r2, #0]
  return result;
 8002bd4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bd8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002bdc:	6812      	ldr	r2, [r2, #0]
 8002bde:	fab2 f282 	clz	r2, r2
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002be8:	b2d2      	uxtb	r2, r2
 8002bea:	f002 021f 	and.w	r2, r2, #31
 8002bee:	2101      	movs	r1, #1
 8002bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d084      	beq.n	8002b04 <HAL_RCC_OscConfig+0x9c8>
 8002bfa:	e07f      	b.n	8002cfc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bfc:	f7fd ff78 	bl	8000af0 <HAL_GetTick>
 8002c00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c04:	e00b      	b.n	8002c1e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c06:	f7fd ff73 	bl	8000af0 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e2c4      	b.n	80031a8 <HAL_RCC_OscConfig+0x106c>
 8002c1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c22:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002c26:	2202      	movs	r2, #2
 8002c28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c2e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	fa93 f2a3 	rbit	r2, r3
 8002c38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c3c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002c40:	601a      	str	r2, [r3, #0]
 8002c42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c46:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c52:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	fa93 f2a3 	rbit	r2, r3
 8002c5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c60:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002c64:	601a      	str	r2, [r3, #0]
  return result;
 8002c66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c6a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002c6e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c70:	fab3 f383 	clz	r3, r3
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	095b      	lsrs	r3, r3, #5
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	f043 0302 	orr.w	r3, r3, #2
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d102      	bne.n	8002c8a <HAL_RCC_OscConfig+0xb4e>
 8002c84:	4b43      	ldr	r3, [pc, #268]	; (8002d94 <HAL_RCC_OscConfig+0xc58>)
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	e013      	b.n	8002cb2 <HAL_RCC_OscConfig+0xb76>
 8002c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c8e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002c92:	2202      	movs	r2, #2
 8002c94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c9a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	fa93 f2a3 	rbit	r2, r3
 8002ca4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	4b39      	ldr	r3, [pc, #228]	; (8002d94 <HAL_RCC_OscConfig+0xc58>)
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cb6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002cba:	2102      	movs	r1, #2
 8002cbc:	6011      	str	r1, [r2, #0]
 8002cbe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cc2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002cc6:	6812      	ldr	r2, [r2, #0]
 8002cc8:	fa92 f1a2 	rbit	r1, r2
 8002ccc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cd0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002cd4:	6011      	str	r1, [r2, #0]
  return result;
 8002cd6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cda:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002cde:	6812      	ldr	r2, [r2, #0]
 8002ce0:	fab2 f282 	clz	r2, r2
 8002ce4:	b2d2      	uxtb	r2, r2
 8002ce6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cea:	b2d2      	uxtb	r2, r2
 8002cec:	f002 021f 	and.w	r2, r2, #31
 8002cf0:	2101      	movs	r1, #1
 8002cf2:	fa01 f202 	lsl.w	r2, r1, r2
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d184      	bne.n	8002c06 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002cfc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d105      	bne.n	8002d10 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d04:	4b23      	ldr	r3, [pc, #140]	; (8002d94 <HAL_RCC_OscConfig+0xc58>)
 8002d06:	69db      	ldr	r3, [r3, #28]
 8002d08:	4a22      	ldr	r2, [pc, #136]	; (8002d94 <HAL_RCC_OscConfig+0xc58>)
 8002d0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d0e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	69db      	ldr	r3, [r3, #28]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f000 8242 	beq.w	80031a6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d22:	4b1c      	ldr	r3, [pc, #112]	; (8002d94 <HAL_RCC_OscConfig+0xc58>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f003 030c 	and.w	r3, r3, #12
 8002d2a:	2b08      	cmp	r3, #8
 8002d2c:	f000 8213 	beq.w	8003156 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	69db      	ldr	r3, [r3, #28]
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	f040 8162 	bne.w	8003006 <HAL_RCC_OscConfig+0xeca>
 8002d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d46:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002d4a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d54:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	fa93 f2a3 	rbit	r2, r3
 8002d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d62:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002d66:	601a      	str	r2, [r3, #0]
  return result;
 8002d68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d6c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002d70:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d72:	fab3 f383 	clz	r3, r3
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	461a      	mov	r2, r3
 8002d84:	2300      	movs	r3, #0
 8002d86:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d88:	f7fd feb2 	bl	8000af0 <HAL_GetTick>
 8002d8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d90:	e00c      	b.n	8002dac <HAL_RCC_OscConfig+0xc70>
 8002d92:	bf00      	nop
 8002d94:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d98:	f7fd feaa 	bl	8000af0 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e1fd      	b.n	80031a8 <HAL_RCC_OscConfig+0x106c>
 8002dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002db4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002db8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dbe:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	fa93 f2a3 	rbit	r2, r3
 8002dc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dcc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002dd0:	601a      	str	r2, [r3, #0]
  return result;
 8002dd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002dda:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ddc:	fab3 f383 	clz	r3, r3
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	095b      	lsrs	r3, r3, #5
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	f043 0301 	orr.w	r3, r3, #1
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d102      	bne.n	8002df6 <HAL_RCC_OscConfig+0xcba>
 8002df0:	4bb0      	ldr	r3, [pc, #704]	; (80030b4 <HAL_RCC_OscConfig+0xf78>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	e027      	b.n	8002e46 <HAL_RCC_OscConfig+0xd0a>
 8002df6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dfa:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002dfe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e08:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	fa93 f2a3 	rbit	r2, r3
 8002e12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e16:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e20:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002e24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e28:	601a      	str	r2, [r3, #0]
 8002e2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e2e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	fa93 f2a3 	rbit	r2, r3
 8002e38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e3c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002e40:	601a      	str	r2, [r3, #0]
 8002e42:	4b9c      	ldr	r3, [pc, #624]	; (80030b4 <HAL_RCC_OscConfig+0xf78>)
 8002e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e4a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002e4e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e52:	6011      	str	r1, [r2, #0]
 8002e54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e58:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002e5c:	6812      	ldr	r2, [r2, #0]
 8002e5e:	fa92 f1a2 	rbit	r1, r2
 8002e62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e66:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002e6a:	6011      	str	r1, [r2, #0]
  return result;
 8002e6c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e70:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002e74:	6812      	ldr	r2, [r2, #0]
 8002e76:	fab2 f282 	clz	r2, r2
 8002e7a:	b2d2      	uxtb	r2, r2
 8002e7c:	f042 0220 	orr.w	r2, r2, #32
 8002e80:	b2d2      	uxtb	r2, r2
 8002e82:	f002 021f 	and.w	r2, r2, #31
 8002e86:	2101      	movs	r1, #1
 8002e88:	fa01 f202 	lsl.w	r2, r1, r2
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d182      	bne.n	8002d98 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e92:	4b88      	ldr	r3, [pc, #544]	; (80030b4 <HAL_RCC_OscConfig+0xf78>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002ea6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eaa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	430b      	orrs	r3, r1
 8002eb4:	497f      	ldr	r1, [pc, #508]	; (80030b4 <HAL_RCC_OscConfig+0xf78>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	604b      	str	r3, [r1, #4]
 8002eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ebe:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002ec2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ec6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ecc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	fa93 f2a3 	rbit	r2, r3
 8002ed6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eda:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002ede:	601a      	str	r2, [r3, #0]
  return result;
 8002ee0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002ee8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002eea:	fab3 f383 	clz	r3, r3
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ef4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	461a      	mov	r2, r3
 8002efc:	2301      	movs	r3, #1
 8002efe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f00:	f7fd fdf6 	bl	8000af0 <HAL_GetTick>
 8002f04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f08:	e009      	b.n	8002f1e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f0a:	f7fd fdf1 	bl	8000af0 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e144      	b.n	80031a8 <HAL_RCC_OscConfig+0x106c>
 8002f1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f22:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002f26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f30:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	fa93 f2a3 	rbit	r2, r3
 8002f3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f3e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002f42:	601a      	str	r2, [r3, #0]
  return result;
 8002f44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f48:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002f4c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f4e:	fab3 f383 	clz	r3, r3
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	095b      	lsrs	r3, r3, #5
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	f043 0301 	orr.w	r3, r3, #1
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d102      	bne.n	8002f68 <HAL_RCC_OscConfig+0xe2c>
 8002f62:	4b54      	ldr	r3, [pc, #336]	; (80030b4 <HAL_RCC_OscConfig+0xf78>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	e027      	b.n	8002fb8 <HAL_RCC_OscConfig+0xe7c>
 8002f68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f6c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002f70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f7a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	fa93 f2a3 	rbit	r2, r3
 8002f84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f88:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002f8c:	601a      	str	r2, [r3, #0]
 8002f8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f92:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002f96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	fa93 f2a3 	rbit	r2, r3
 8002faa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fae:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	4b3f      	ldr	r3, [pc, #252]	; (80030b4 <HAL_RCC_OscConfig+0xf78>)
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fbc:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002fc0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002fc4:	6011      	str	r1, [r2, #0]
 8002fc6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fca:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002fce:	6812      	ldr	r2, [r2, #0]
 8002fd0:	fa92 f1a2 	rbit	r1, r2
 8002fd4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fd8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002fdc:	6011      	str	r1, [r2, #0]
  return result;
 8002fde:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fe2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002fe6:	6812      	ldr	r2, [r2, #0]
 8002fe8:	fab2 f282 	clz	r2, r2
 8002fec:	b2d2      	uxtb	r2, r2
 8002fee:	f042 0220 	orr.w	r2, r2, #32
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	f002 021f 	and.w	r2, r2, #31
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	fa01 f202 	lsl.w	r2, r1, r2
 8002ffe:	4013      	ands	r3, r2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d082      	beq.n	8002f0a <HAL_RCC_OscConfig+0xdce>
 8003004:	e0cf      	b.n	80031a6 <HAL_RCC_OscConfig+0x106a>
 8003006:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800300a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800300e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003012:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003014:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003018:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	fa93 f2a3 	rbit	r2, r3
 8003022:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003026:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800302a:	601a      	str	r2, [r3, #0]
  return result;
 800302c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003030:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003034:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003036:	fab3 f383 	clz	r3, r3
 800303a:	b2db      	uxtb	r3, r3
 800303c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003040:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	461a      	mov	r2, r3
 8003048:	2300      	movs	r3, #0
 800304a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304c:	f7fd fd50 	bl	8000af0 <HAL_GetTick>
 8003050:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003054:	e009      	b.n	800306a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003056:	f7fd fd4b 	bl	8000af0 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e09e      	b.n	80031a8 <HAL_RCC_OscConfig+0x106c>
 800306a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800306e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003072:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003076:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003078:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800307c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	fa93 f2a3 	rbit	r2, r3
 8003086:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800308a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800308e:	601a      	str	r2, [r3, #0]
  return result;
 8003090:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003094:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003098:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800309a:	fab3 f383 	clz	r3, r3
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	095b      	lsrs	r3, r3, #5
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	f043 0301 	orr.w	r3, r3, #1
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d104      	bne.n	80030b8 <HAL_RCC_OscConfig+0xf7c>
 80030ae:	4b01      	ldr	r3, [pc, #4]	; (80030b4 <HAL_RCC_OscConfig+0xf78>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	e029      	b.n	8003108 <HAL_RCC_OscConfig+0xfcc>
 80030b4:	40021000 	.word	0x40021000
 80030b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030bc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80030c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ca:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	fa93 f2a3 	rbit	r2, r3
 80030d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80030e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	fa93 f2a3 	rbit	r2, r3
 80030fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030fe:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	4b2b      	ldr	r3, [pc, #172]	; (80031b4 <HAL_RCC_OscConfig+0x1078>)
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800310c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003110:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003114:	6011      	str	r1, [r2, #0]
 8003116:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800311a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800311e:	6812      	ldr	r2, [r2, #0]
 8003120:	fa92 f1a2 	rbit	r1, r2
 8003124:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003128:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800312c:	6011      	str	r1, [r2, #0]
  return result;
 800312e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003132:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003136:	6812      	ldr	r2, [r2, #0]
 8003138:	fab2 f282 	clz	r2, r2
 800313c:	b2d2      	uxtb	r2, r2
 800313e:	f042 0220 	orr.w	r2, r2, #32
 8003142:	b2d2      	uxtb	r2, r2
 8003144:	f002 021f 	and.w	r2, r2, #31
 8003148:	2101      	movs	r1, #1
 800314a:	fa01 f202 	lsl.w	r2, r1, r2
 800314e:	4013      	ands	r3, r2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d180      	bne.n	8003056 <HAL_RCC_OscConfig+0xf1a>
 8003154:	e027      	b.n	80031a6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003156:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800315a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d101      	bne.n	800316a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e01e      	b.n	80031a8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800316a:	4b12      	ldr	r3, [pc, #72]	; (80031b4 <HAL_RCC_OscConfig+0x1078>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003172:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003176:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800317a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800317e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	429a      	cmp	r2, r3
 8003188:	d10b      	bne.n	80031a2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800318a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800318e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003192:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003196:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800319e:	429a      	cmp	r2, r3
 80031a0:	d001      	beq.n	80031a6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e000      	b.n	80031a8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	40021000 	.word	0x40021000

080031b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b09e      	sub	sp, #120	; 0x78
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80031c2:	2300      	movs	r3, #0
 80031c4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d101      	bne.n	80031d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e162      	b.n	8003496 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031d0:	4b90      	ldr	r3, [pc, #576]	; (8003414 <HAL_RCC_ClockConfig+0x25c>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0307 	and.w	r3, r3, #7
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d910      	bls.n	8003200 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031de:	4b8d      	ldr	r3, [pc, #564]	; (8003414 <HAL_RCC_ClockConfig+0x25c>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f023 0207 	bic.w	r2, r3, #7
 80031e6:	498b      	ldr	r1, [pc, #556]	; (8003414 <HAL_RCC_ClockConfig+0x25c>)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ee:	4b89      	ldr	r3, [pc, #548]	; (8003414 <HAL_RCC_ClockConfig+0x25c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0307 	and.w	r3, r3, #7
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d001      	beq.n	8003200 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e14a      	b.n	8003496 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d008      	beq.n	800321e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800320c:	4b82      	ldr	r3, [pc, #520]	; (8003418 <HAL_RCC_ClockConfig+0x260>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	497f      	ldr	r1, [pc, #508]	; (8003418 <HAL_RCC_ClockConfig+0x260>)
 800321a:	4313      	orrs	r3, r2
 800321c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	f000 80dc 	beq.w	80033e4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d13c      	bne.n	80032ae <HAL_RCC_ClockConfig+0xf6>
 8003234:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003238:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800323c:	fa93 f3a3 	rbit	r3, r3
 8003240:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003244:	fab3 f383 	clz	r3, r3
 8003248:	b2db      	uxtb	r3, r3
 800324a:	095b      	lsrs	r3, r3, #5
 800324c:	b2db      	uxtb	r3, r3
 800324e:	f043 0301 	orr.w	r3, r3, #1
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b01      	cmp	r3, #1
 8003256:	d102      	bne.n	800325e <HAL_RCC_ClockConfig+0xa6>
 8003258:	4b6f      	ldr	r3, [pc, #444]	; (8003418 <HAL_RCC_ClockConfig+0x260>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	e00f      	b.n	800327e <HAL_RCC_ClockConfig+0xc6>
 800325e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003262:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003264:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003266:	fa93 f3a3 	rbit	r3, r3
 800326a:	667b      	str	r3, [r7, #100]	; 0x64
 800326c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003270:	663b      	str	r3, [r7, #96]	; 0x60
 8003272:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003274:	fa93 f3a3 	rbit	r3, r3
 8003278:	65fb      	str	r3, [r7, #92]	; 0x5c
 800327a:	4b67      	ldr	r3, [pc, #412]	; (8003418 <HAL_RCC_ClockConfig+0x260>)
 800327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003282:	65ba      	str	r2, [r7, #88]	; 0x58
 8003284:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003286:	fa92 f2a2 	rbit	r2, r2
 800328a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800328c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800328e:	fab2 f282 	clz	r2, r2
 8003292:	b2d2      	uxtb	r2, r2
 8003294:	f042 0220 	orr.w	r2, r2, #32
 8003298:	b2d2      	uxtb	r2, r2
 800329a:	f002 021f 	and.w	r2, r2, #31
 800329e:	2101      	movs	r1, #1
 80032a0:	fa01 f202 	lsl.w	r2, r1, r2
 80032a4:	4013      	ands	r3, r2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d17b      	bne.n	80033a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e0f3      	b.n	8003496 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d13c      	bne.n	8003330 <HAL_RCC_ClockConfig+0x178>
 80032b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032ba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032be:	fa93 f3a3 	rbit	r3, r3
 80032c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80032c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032c6:	fab3 f383 	clz	r3, r3
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	095b      	lsrs	r3, r3, #5
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	f043 0301 	orr.w	r3, r3, #1
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d102      	bne.n	80032e0 <HAL_RCC_ClockConfig+0x128>
 80032da:	4b4f      	ldr	r3, [pc, #316]	; (8003418 <HAL_RCC_ClockConfig+0x260>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	e00f      	b.n	8003300 <HAL_RCC_ClockConfig+0x148>
 80032e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032e4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032e8:	fa93 f3a3 	rbit	r3, r3
 80032ec:	647b      	str	r3, [r7, #68]	; 0x44
 80032ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032f2:	643b      	str	r3, [r7, #64]	; 0x40
 80032f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032f6:	fa93 f3a3 	rbit	r3, r3
 80032fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032fc:	4b46      	ldr	r3, [pc, #280]	; (8003418 <HAL_RCC_ClockConfig+0x260>)
 80032fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003300:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003304:	63ba      	str	r2, [r7, #56]	; 0x38
 8003306:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003308:	fa92 f2a2 	rbit	r2, r2
 800330c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800330e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003310:	fab2 f282 	clz	r2, r2
 8003314:	b2d2      	uxtb	r2, r2
 8003316:	f042 0220 	orr.w	r2, r2, #32
 800331a:	b2d2      	uxtb	r2, r2
 800331c:	f002 021f 	and.w	r2, r2, #31
 8003320:	2101      	movs	r1, #1
 8003322:	fa01 f202 	lsl.w	r2, r1, r2
 8003326:	4013      	ands	r3, r2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d13a      	bne.n	80033a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e0b2      	b.n	8003496 <HAL_RCC_ClockConfig+0x2de>
 8003330:	2302      	movs	r3, #2
 8003332:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003336:	fa93 f3a3 	rbit	r3, r3
 800333a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800333c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800333e:	fab3 f383 	clz	r3, r3
 8003342:	b2db      	uxtb	r3, r3
 8003344:	095b      	lsrs	r3, r3, #5
 8003346:	b2db      	uxtb	r3, r3
 8003348:	f043 0301 	orr.w	r3, r3, #1
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b01      	cmp	r3, #1
 8003350:	d102      	bne.n	8003358 <HAL_RCC_ClockConfig+0x1a0>
 8003352:	4b31      	ldr	r3, [pc, #196]	; (8003418 <HAL_RCC_ClockConfig+0x260>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	e00d      	b.n	8003374 <HAL_RCC_ClockConfig+0x1bc>
 8003358:	2302      	movs	r3, #2
 800335a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800335e:	fa93 f3a3 	rbit	r3, r3
 8003362:	627b      	str	r3, [r7, #36]	; 0x24
 8003364:	2302      	movs	r3, #2
 8003366:	623b      	str	r3, [r7, #32]
 8003368:	6a3b      	ldr	r3, [r7, #32]
 800336a:	fa93 f3a3 	rbit	r3, r3
 800336e:	61fb      	str	r3, [r7, #28]
 8003370:	4b29      	ldr	r3, [pc, #164]	; (8003418 <HAL_RCC_ClockConfig+0x260>)
 8003372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003374:	2202      	movs	r2, #2
 8003376:	61ba      	str	r2, [r7, #24]
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	fa92 f2a2 	rbit	r2, r2
 800337e:	617a      	str	r2, [r7, #20]
  return result;
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	fab2 f282 	clz	r2, r2
 8003386:	b2d2      	uxtb	r2, r2
 8003388:	f042 0220 	orr.w	r2, r2, #32
 800338c:	b2d2      	uxtb	r2, r2
 800338e:	f002 021f 	and.w	r2, r2, #31
 8003392:	2101      	movs	r1, #1
 8003394:	fa01 f202 	lsl.w	r2, r1, r2
 8003398:	4013      	ands	r3, r2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e079      	b.n	8003496 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033a2:	4b1d      	ldr	r3, [pc, #116]	; (8003418 <HAL_RCC_ClockConfig+0x260>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f023 0203 	bic.w	r2, r3, #3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	491a      	ldr	r1, [pc, #104]	; (8003418 <HAL_RCC_ClockConfig+0x260>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033b4:	f7fd fb9c 	bl	8000af0 <HAL_GetTick>
 80033b8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ba:	e00a      	b.n	80033d2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033bc:	f7fd fb98 	bl	8000af0 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e061      	b.n	8003496 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033d2:	4b11      	ldr	r3, [pc, #68]	; (8003418 <HAL_RCC_ClockConfig+0x260>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f003 020c 	and.w	r2, r3, #12
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d1eb      	bne.n	80033bc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033e4:	4b0b      	ldr	r3, [pc, #44]	; (8003414 <HAL_RCC_ClockConfig+0x25c>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0307 	and.w	r3, r3, #7
 80033ec:	683a      	ldr	r2, [r7, #0]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d214      	bcs.n	800341c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033f2:	4b08      	ldr	r3, [pc, #32]	; (8003414 <HAL_RCC_ClockConfig+0x25c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f023 0207 	bic.w	r2, r3, #7
 80033fa:	4906      	ldr	r1, [pc, #24]	; (8003414 <HAL_RCC_ClockConfig+0x25c>)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	4313      	orrs	r3, r2
 8003400:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003402:	4b04      	ldr	r3, [pc, #16]	; (8003414 <HAL_RCC_ClockConfig+0x25c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0307 	and.w	r3, r3, #7
 800340a:	683a      	ldr	r2, [r7, #0]
 800340c:	429a      	cmp	r2, r3
 800340e:	d005      	beq.n	800341c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e040      	b.n	8003496 <HAL_RCC_ClockConfig+0x2de>
 8003414:	40022000 	.word	0x40022000
 8003418:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0304 	and.w	r3, r3, #4
 8003424:	2b00      	cmp	r3, #0
 8003426:	d008      	beq.n	800343a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003428:	4b1d      	ldr	r3, [pc, #116]	; (80034a0 <HAL_RCC_ClockConfig+0x2e8>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	491a      	ldr	r1, [pc, #104]	; (80034a0 <HAL_RCC_ClockConfig+0x2e8>)
 8003436:	4313      	orrs	r3, r2
 8003438:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0308 	and.w	r3, r3, #8
 8003442:	2b00      	cmp	r3, #0
 8003444:	d009      	beq.n	800345a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003446:	4b16      	ldr	r3, [pc, #88]	; (80034a0 <HAL_RCC_ClockConfig+0x2e8>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	4912      	ldr	r1, [pc, #72]	; (80034a0 <HAL_RCC_ClockConfig+0x2e8>)
 8003456:	4313      	orrs	r3, r2
 8003458:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800345a:	f000 f829 	bl	80034b0 <HAL_RCC_GetSysClockFreq>
 800345e:	4601      	mov	r1, r0
 8003460:	4b0f      	ldr	r3, [pc, #60]	; (80034a0 <HAL_RCC_ClockConfig+0x2e8>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003468:	22f0      	movs	r2, #240	; 0xf0
 800346a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	fa92 f2a2 	rbit	r2, r2
 8003472:	60fa      	str	r2, [r7, #12]
  return result;
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	fab2 f282 	clz	r2, r2
 800347a:	b2d2      	uxtb	r2, r2
 800347c:	40d3      	lsrs	r3, r2
 800347e:	4a09      	ldr	r2, [pc, #36]	; (80034a4 <HAL_RCC_ClockConfig+0x2ec>)
 8003480:	5cd3      	ldrb	r3, [r2, r3]
 8003482:	fa21 f303 	lsr.w	r3, r1, r3
 8003486:	4a08      	ldr	r2, [pc, #32]	; (80034a8 <HAL_RCC_ClockConfig+0x2f0>)
 8003488:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800348a:	4b08      	ldr	r3, [pc, #32]	; (80034ac <HAL_RCC_ClockConfig+0x2f4>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f7fd faea 	bl	8000a68 <HAL_InitTick>
  
  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3778      	adds	r7, #120	; 0x78
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	40021000 	.word	0x40021000
 80034a4:	08003b2c 	.word	0x08003b2c
 80034a8:	20000000 	.word	0x20000000
 80034ac:	20000004 	.word	0x20000004

080034b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b08b      	sub	sp, #44	; 0x2c
 80034b4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034b6:	2300      	movs	r3, #0
 80034b8:	61fb      	str	r3, [r7, #28]
 80034ba:	2300      	movs	r3, #0
 80034bc:	61bb      	str	r3, [r7, #24]
 80034be:	2300      	movs	r3, #0
 80034c0:	627b      	str	r3, [r7, #36]	; 0x24
 80034c2:	2300      	movs	r3, #0
 80034c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80034c6:	2300      	movs	r3, #0
 80034c8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80034ca:	4b29      	ldr	r3, [pc, #164]	; (8003570 <HAL_RCC_GetSysClockFreq+0xc0>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	f003 030c 	and.w	r3, r3, #12
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	d002      	beq.n	80034e0 <HAL_RCC_GetSysClockFreq+0x30>
 80034da:	2b08      	cmp	r3, #8
 80034dc:	d003      	beq.n	80034e6 <HAL_RCC_GetSysClockFreq+0x36>
 80034de:	e03c      	b.n	800355a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034e0:	4b24      	ldr	r3, [pc, #144]	; (8003574 <HAL_RCC_GetSysClockFreq+0xc4>)
 80034e2:	623b      	str	r3, [r7, #32]
      break;
 80034e4:	e03c      	b.n	8003560 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80034ec:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80034f0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f2:	68ba      	ldr	r2, [r7, #8]
 80034f4:	fa92 f2a2 	rbit	r2, r2
 80034f8:	607a      	str	r2, [r7, #4]
  return result;
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	fab2 f282 	clz	r2, r2
 8003500:	b2d2      	uxtb	r2, r2
 8003502:	40d3      	lsrs	r3, r2
 8003504:	4a1c      	ldr	r2, [pc, #112]	; (8003578 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003506:	5cd3      	ldrb	r3, [r2, r3]
 8003508:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800350a:	4b19      	ldr	r3, [pc, #100]	; (8003570 <HAL_RCC_GetSysClockFreq+0xc0>)
 800350c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350e:	f003 030f 	and.w	r3, r3, #15
 8003512:	220f      	movs	r2, #15
 8003514:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	fa92 f2a2 	rbit	r2, r2
 800351c:	60fa      	str	r2, [r7, #12]
  return result;
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	fab2 f282 	clz	r2, r2
 8003524:	b2d2      	uxtb	r2, r2
 8003526:	40d3      	lsrs	r3, r2
 8003528:	4a14      	ldr	r2, [pc, #80]	; (800357c <HAL_RCC_GetSysClockFreq+0xcc>)
 800352a:	5cd3      	ldrb	r3, [r2, r3]
 800352c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d008      	beq.n	800354a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003538:	4a0e      	ldr	r2, [pc, #56]	; (8003574 <HAL_RCC_GetSysClockFreq+0xc4>)
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	fb02 f303 	mul.w	r3, r2, r3
 8003546:	627b      	str	r3, [r7, #36]	; 0x24
 8003548:	e004      	b.n	8003554 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	4a0c      	ldr	r2, [pc, #48]	; (8003580 <HAL_RCC_GetSysClockFreq+0xd0>)
 800354e:	fb02 f303 	mul.w	r3, r2, r3
 8003552:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	623b      	str	r3, [r7, #32]
      break;
 8003558:	e002      	b.n	8003560 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800355a:	4b06      	ldr	r3, [pc, #24]	; (8003574 <HAL_RCC_GetSysClockFreq+0xc4>)
 800355c:	623b      	str	r3, [r7, #32]
      break;
 800355e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003560:	6a3b      	ldr	r3, [r7, #32]
}
 8003562:	4618      	mov	r0, r3
 8003564:	372c      	adds	r7, #44	; 0x2c
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	40021000 	.word	0x40021000
 8003574:	007a1200 	.word	0x007a1200
 8003578:	08003b3c 	.word	0x08003b3c
 800357c:	08003b4c 	.word	0x08003b4c
 8003580:	003d0900 	.word	0x003d0900

08003584 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b092      	sub	sp, #72	; 0x48
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800358c:	2300      	movs	r3, #0
 800358e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003590:	2300      	movs	r3, #0
 8003592:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003594:	2300      	movs	r3, #0
 8003596:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f000 80d4 	beq.w	8003750 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035a8:	4b4e      	ldr	r3, [pc, #312]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035aa:	69db      	ldr	r3, [r3, #28]
 80035ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d10e      	bne.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035b4:	4b4b      	ldr	r3, [pc, #300]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035b6:	69db      	ldr	r3, [r3, #28]
 80035b8:	4a4a      	ldr	r2, [pc, #296]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035be:	61d3      	str	r3, [r2, #28]
 80035c0:	4b48      	ldr	r3, [pc, #288]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c8:	60bb      	str	r3, [r7, #8]
 80035ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035cc:	2301      	movs	r3, #1
 80035ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d2:	4b45      	ldr	r3, [pc, #276]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d118      	bne.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035de:	4b42      	ldr	r3, [pc, #264]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a41      	ldr	r2, [pc, #260]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035e8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ea:	f7fd fa81 	bl	8000af0 <HAL_GetTick>
 80035ee:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f0:	e008      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035f2:	f7fd fa7d 	bl	8000af0 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b64      	cmp	r3, #100	; 0x64
 80035fe:	d901      	bls.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e169      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003604:	4b38      	ldr	r3, [pc, #224]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0f0      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003610:	4b34      	ldr	r3, [pc, #208]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003618:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800361a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800361c:	2b00      	cmp	r3, #0
 800361e:	f000 8084 	beq.w	800372a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800362a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800362c:	429a      	cmp	r2, r3
 800362e:	d07c      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003630:	4b2c      	ldr	r3, [pc, #176]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003638:	63fb      	str	r3, [r7, #60]	; 0x3c
 800363a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800363e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003642:	fa93 f3a3 	rbit	r3, r3
 8003646:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800364a:	fab3 f383 	clz	r3, r3
 800364e:	b2db      	uxtb	r3, r3
 8003650:	461a      	mov	r2, r3
 8003652:	4b26      	ldr	r3, [pc, #152]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003654:	4413      	add	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	461a      	mov	r2, r3
 800365a:	2301      	movs	r3, #1
 800365c:	6013      	str	r3, [r2, #0]
 800365e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003662:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003666:	fa93 f3a3 	rbit	r3, r3
 800366a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800366c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800366e:	fab3 f383 	clz	r3, r3
 8003672:	b2db      	uxtb	r3, r3
 8003674:	461a      	mov	r2, r3
 8003676:	4b1d      	ldr	r3, [pc, #116]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003678:	4413      	add	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	461a      	mov	r2, r3
 800367e:	2300      	movs	r3, #0
 8003680:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003682:	4a18      	ldr	r2, [pc, #96]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003686:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b00      	cmp	r3, #0
 8003690:	d04b      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003692:	f7fd fa2d 	bl	8000af0 <HAL_GetTick>
 8003696:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003698:	e00a      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800369a:	f7fd fa29 	bl	8000af0 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e113      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80036b0:	2302      	movs	r3, #2
 80036b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b6:	fa93 f3a3 	rbit	r3, r3
 80036ba:	627b      	str	r3, [r7, #36]	; 0x24
 80036bc:	2302      	movs	r3, #2
 80036be:	623b      	str	r3, [r7, #32]
 80036c0:	6a3b      	ldr	r3, [r7, #32]
 80036c2:	fa93 f3a3 	rbit	r3, r3
 80036c6:	61fb      	str	r3, [r7, #28]
  return result;
 80036c8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ca:	fab3 f383 	clz	r3, r3
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	095b      	lsrs	r3, r3, #5
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	f043 0302 	orr.w	r3, r3, #2
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d108      	bne.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80036de:	4b01      	ldr	r3, [pc, #4]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	e00d      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80036e4:	40021000 	.word	0x40021000
 80036e8:	40007000 	.word	0x40007000
 80036ec:	10908100 	.word	0x10908100
 80036f0:	2302      	movs	r3, #2
 80036f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	fa93 f3a3 	rbit	r3, r3
 80036fa:	617b      	str	r3, [r7, #20]
 80036fc:	4b78      	ldr	r3, [pc, #480]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	2202      	movs	r2, #2
 8003702:	613a      	str	r2, [r7, #16]
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	fa92 f2a2 	rbit	r2, r2
 800370a:	60fa      	str	r2, [r7, #12]
  return result;
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	fab2 f282 	clz	r2, r2
 8003712:	b2d2      	uxtb	r2, r2
 8003714:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003718:	b2d2      	uxtb	r2, r2
 800371a:	f002 021f 	and.w	r2, r2, #31
 800371e:	2101      	movs	r1, #1
 8003720:	fa01 f202 	lsl.w	r2, r1, r2
 8003724:	4013      	ands	r3, r2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d0b7      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800372a:	4b6d      	ldr	r3, [pc, #436]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	496a      	ldr	r1, [pc, #424]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003738:	4313      	orrs	r3, r2
 800373a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800373c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003740:	2b01      	cmp	r3, #1
 8003742:	d105      	bne.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003744:	4b66      	ldr	r3, [pc, #408]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003746:	69db      	ldr	r3, [r3, #28]
 8003748:	4a65      	ldr	r2, [pc, #404]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800374a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800374e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0301 	and.w	r3, r3, #1
 8003758:	2b00      	cmp	r3, #0
 800375a:	d008      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800375c:	4b60      	ldr	r3, [pc, #384]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800375e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003760:	f023 0203 	bic.w	r2, r3, #3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	495d      	ldr	r1, [pc, #372]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800376a:	4313      	orrs	r3, r2
 800376c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d008      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800377a:	4b59      	ldr	r3, [pc, #356]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800377c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	4956      	ldr	r1, [pc, #344]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003788:	4313      	orrs	r3, r2
 800378a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0304 	and.w	r3, r3, #4
 8003794:	2b00      	cmp	r3, #0
 8003796:	d008      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003798:	4b51      	ldr	r3, [pc, #324]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800379a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	494e      	ldr	r1, [pc, #312]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0320 	and.w	r3, r3, #32
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d008      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037b6:	4b4a      	ldr	r3, [pc, #296]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ba:	f023 0210 	bic.w	r2, r3, #16
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	4947      	ldr	r1, [pc, #284]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d008      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80037d4:	4b42      	ldr	r3, [pc, #264]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e0:	493f      	ldr	r1, [pc, #252]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d008      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037f2:	4b3b      	ldr	r3, [pc, #236]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	f023 0220 	bic.w	r2, r3, #32
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	4938      	ldr	r1, [pc, #224]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003800:	4313      	orrs	r3, r2
 8003802:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0308 	and.w	r3, r3, #8
 800380c:	2b00      	cmp	r3, #0
 800380e:	d008      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003810:	4b33      	ldr	r3, [pc, #204]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003814:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	4930      	ldr	r1, [pc, #192]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800381e:	4313      	orrs	r3, r2
 8003820:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0310 	and.w	r3, r3, #16
 800382a:	2b00      	cmp	r3, #0
 800382c:	d008      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800382e:	4b2c      	ldr	r3, [pc, #176]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003832:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	4929      	ldr	r1, [pc, #164]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800383c:	4313      	orrs	r3, r2
 800383e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003848:	2b00      	cmp	r3, #0
 800384a:	d008      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800384c:	4b24      	ldr	r3, [pc, #144]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003858:	4921      	ldr	r1, [pc, #132]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800385a:	4313      	orrs	r3, r2
 800385c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003866:	2b00      	cmp	r3, #0
 8003868:	d008      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800386a:	4b1d      	ldr	r3, [pc, #116]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800386c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003876:	491a      	ldr	r1, [pc, #104]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003878:	4313      	orrs	r3, r2
 800387a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003884:	2b00      	cmp	r3, #0
 8003886:	d008      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003888:	4b15      	ldr	r3, [pc, #84]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800388a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003894:	4912      	ldr	r1, [pc, #72]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003896:	4313      	orrs	r3, r2
 8003898:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d008      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80038a6:	4b0e      	ldr	r3, [pc, #56]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b2:	490b      	ldr	r1, [pc, #44]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d008      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80038c4:	4b06      	ldr	r3, [pc, #24]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d0:	4903      	ldr	r1, [pc, #12]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3748      	adds	r7, #72	; 0x48
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	40021000 	.word	0x40021000

080038e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e09d      	b.n	8003a32 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d108      	bne.n	8003910 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003906:	d009      	beq.n	800391c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	61da      	str	r2, [r3, #28]
 800390e:	e005      	b.n	800391c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d106      	bne.n	800393c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7fc ff76 	bl	8000828 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2202      	movs	r2, #2
 8003940:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003952:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800395c:	d902      	bls.n	8003964 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800395e:	2300      	movs	r3, #0
 8003960:	60fb      	str	r3, [r7, #12]
 8003962:	e002      	b.n	800396a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003964:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003968:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003972:	d007      	beq.n	8003984 <HAL_SPI_Init+0xa0>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800397c:	d002      	beq.n	8003984 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003994:	431a      	orrs	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	431a      	orrs	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	431a      	orrs	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039b2:	431a      	orrs	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	69db      	ldr	r3, [r3, #28]
 80039b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039bc:	431a      	orrs	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c6:	ea42 0103 	orr.w	r1, r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	0c1b      	lsrs	r3, r3, #16
 80039e0:	f003 0204 	and.w	r2, r3, #4
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e8:	f003 0310 	and.w	r3, r3, #16
 80039ec:	431a      	orrs	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f2:	f003 0308 	and.w	r3, r3, #8
 80039f6:	431a      	orrs	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003a00:	ea42 0103 	orr.w	r1, r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	69da      	ldr	r2, [r3, #28]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b085      	sub	sp, #20
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003a42:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003a46:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	43db      	mvns	r3, r3
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	4013      	ands	r3, r2
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3714      	adds	r7, #20
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003a70:	b084      	sub	sp, #16
 8003a72:	b480      	push	{r7}
 8003a74:	b083      	sub	sp, #12
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
 8003a7a:	f107 0014 	add.w	r0, r7, #20
 8003a7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	b004      	add	sp, #16
 8003ab0:	4770      	bx	lr
	...

08003ab4 <__libc_init_array>:
 8003ab4:	b570      	push	{r4, r5, r6, lr}
 8003ab6:	4d0d      	ldr	r5, [pc, #52]	; (8003aec <__libc_init_array+0x38>)
 8003ab8:	4c0d      	ldr	r4, [pc, #52]	; (8003af0 <__libc_init_array+0x3c>)
 8003aba:	1b64      	subs	r4, r4, r5
 8003abc:	10a4      	asrs	r4, r4, #2
 8003abe:	2600      	movs	r6, #0
 8003ac0:	42a6      	cmp	r6, r4
 8003ac2:	d109      	bne.n	8003ad8 <__libc_init_array+0x24>
 8003ac4:	4d0b      	ldr	r5, [pc, #44]	; (8003af4 <__libc_init_array+0x40>)
 8003ac6:	4c0c      	ldr	r4, [pc, #48]	; (8003af8 <__libc_init_array+0x44>)
 8003ac8:	f000 f820 	bl	8003b0c <_init>
 8003acc:	1b64      	subs	r4, r4, r5
 8003ace:	10a4      	asrs	r4, r4, #2
 8003ad0:	2600      	movs	r6, #0
 8003ad2:	42a6      	cmp	r6, r4
 8003ad4:	d105      	bne.n	8003ae2 <__libc_init_array+0x2e>
 8003ad6:	bd70      	pop	{r4, r5, r6, pc}
 8003ad8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003adc:	4798      	blx	r3
 8003ade:	3601      	adds	r6, #1
 8003ae0:	e7ee      	b.n	8003ac0 <__libc_init_array+0xc>
 8003ae2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ae6:	4798      	blx	r3
 8003ae8:	3601      	adds	r6, #1
 8003aea:	e7f2      	b.n	8003ad2 <__libc_init_array+0x1e>
 8003aec:	08003b5c 	.word	0x08003b5c
 8003af0:	08003b5c 	.word	0x08003b5c
 8003af4:	08003b5c 	.word	0x08003b5c
 8003af8:	08003b60 	.word	0x08003b60

08003afc <memset>:
 8003afc:	4402      	add	r2, r0
 8003afe:	4603      	mov	r3, r0
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d100      	bne.n	8003b06 <memset+0xa>
 8003b04:	4770      	bx	lr
 8003b06:	f803 1b01 	strb.w	r1, [r3], #1
 8003b0a:	e7f9      	b.n	8003b00 <memset+0x4>

08003b0c <_init>:
 8003b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b0e:	bf00      	nop
 8003b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b12:	bc08      	pop	{r3}
 8003b14:	469e      	mov	lr, r3
 8003b16:	4770      	bx	lr

08003b18 <_fini>:
 8003b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b1a:	bf00      	nop
 8003b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b1e:	bc08      	pop	{r3}
 8003b20:	469e      	mov	lr, r3
 8003b22:	4770      	bx	lr
