
Zitto_Phase0_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b80  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003d08  08003d08  00013d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d38  08003d38  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003d38  08003d38  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d38  08003d38  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d38  08003d38  00013d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d3c  08003d3c  00013d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003d40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000ee8  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ef8  20000ef8  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010aa3  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a46  00000000  00000000  00030ae3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd0  00000000  00000000  00033530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c60  00000000  00000000  00034300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e26b  00000000  00000000  00034f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000132eb  00000000  00000000  000531cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000af95d  00000000  00000000  000664b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00115e13  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003794  00000000  00000000  00115e64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003cf0 	.word	0x08003cf0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08003cf0 	.word	0x08003cf0

080001c8 <app_main_start_u8>:
Description  :
Input Data   :
Return Value :
**/
U8 app_main_start_u8(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
	U8 ret_val_u8 = 0;
 80001ce:	2300      	movs	r3, #0
 80001d0:	71fb      	strb	r3, [r7, #7]

	ret_val_u8 =  app_main_peripherals_init_pru8();
 80001d2:	f000 f80f 	bl	80001f4 <app_main_peripherals_init_pru8>
 80001d6:	4603      	mov	r3, r0
 80001d8:	71fb      	strb	r3, [r7, #7]
	ret_val_u8 += app_main_pre_os_periph_config_pru8();
 80001da:	f000 f845 	bl	8000268 <app_main_pre_os_periph_config_pru8>
 80001de:	4603      	mov	r3, r0
 80001e0:	461a      	mov	r2, r3
 80001e2:	79fb      	ldrb	r3, [r7, #7]
 80001e4:	4413      	add	r3, r2
 80001e6:	71fb      	strb	r3, [r7, #7]

	return (ret_val_u8);
 80001e8:	79fb      	ldrb	r3, [r7, #7]
}
 80001ea:	4618      	mov	r0, r3
 80001ec:	3708      	adds	r7, #8
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bd80      	pop	{r7, pc}
	...

080001f4 <app_main_peripherals_init_pru8>:
Description  :
Input Data   :
Return Value :
**/
static U8 app_main_peripherals_init_pru8(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b086      	sub	sp, #24
 80001f8:	af00      	add	r7, sp, #0
	U8 ret_val_u8 = 0;
 80001fa:	2300      	movs	r3, #0
 80001fc:	75fb      	strb	r3, [r7, #23]

	bootsm_boot_status_e = BOOTSM_SYS_APP_PERP_INIT;
 80001fe:	4b17      	ldr	r3, [pc, #92]	; (800025c <app_main_peripherals_init_pru8+0x68>)
 8000200:	2206      	movs	r2, #6
 8000202:	701a      	strb	r2, [r3, #0]

	/* Pin Mux Initialization - Done based on the pins used in the schematics */
	ret_val_u8 = gpio_pin_mux_init_u8(); /* No core state change - because no fault case*/
 8000204:	f000 f986 	bl	8000514 <gpio_pin_mux_init_u8>
 8000208:	4603      	mov	r3, r0
 800020a:	75fb      	strb	r3, [r7, #23]

	/* CAN Engine Initialization - CAN1 at 250Kbps and CAN Interrupt*/
	bootsm_init_state_e = BOOTSM_APPCORE_CAN_STATE;
 800020c:	4b14      	ldr	r3, [pc, #80]	; (8000260 <app_main_peripherals_init_pru8+0x6c>)
 800020e:	2205      	movs	r2, #5
 8000210:	701a      	strb	r2, [r3, #0]
	ret_val_u8 += can_app_init_u8();
 8000212:	f000 f83b 	bl	800028c <can_app_init_u8>
 8000216:	4603      	mov	r3, r0
 8000218:	461a      	mov	r2, r3
 800021a:	7dfb      	ldrb	r3, [r7, #23]
 800021c:	4413      	add	r3, r2
 800021e:	75fb      	strb	r3, [r7, #23]

	can_message_tst tx_message;
	tx_message.can_id_u32 = 0x18984010;
 8000220:	4b10      	ldr	r3, [pc, #64]	; (8000264 <app_main_peripherals_init_pru8+0x70>)
 8000222:	607b      	str	r3, [r7, #4]
	tx_message.data_au8[0] = 'D';
 8000224:	2344      	movs	r3, #68	; 0x44
 8000226:	723b      	strb	r3, [r7, #8]
	tx_message.data_au8[1] = 'O';
 8000228:	234f      	movs	r3, #79	; 0x4f
 800022a:	727b      	strb	r3, [r7, #9]
	tx_message.data_au8[2] = 'N';
 800022c:	234e      	movs	r3, #78	; 0x4e
 800022e:	72bb      	strb	r3, [r7, #10]
	tx_message.data_au8[3] = 'E';
 8000230:	2345      	movs	r3, #69	; 0x45
 8000232:	72fb      	strb	r3, [r7, #11]
	tx_message.length_u8 = 4;
 8000234:	2304      	movs	r3, #4
 8000236:	743b      	strb	r3, [r7, #16]

	ret_val_u8 += can_app_transmit_data_u8(&tx_message);
 8000238:	1d3b      	adds	r3, r7, #4
 800023a:	4618      	mov	r0, r3
 800023c:	f000 f838 	bl	80002b0 <can_app_transmit_data_u8>
 8000240:	4603      	mov	r3, r0
 8000242:	461a      	mov	r2, r3
 8000244:	7dfb      	ldrb	r3, [r7, #23]
 8000246:	4413      	add	r3, r2
 8000248:	75fb      	strb	r3, [r7, #23]

	bootsm_init_state_e = BOOTSM_APPCORE_STATE_ENDS;
 800024a:	4b05      	ldr	r3, [pc, #20]	; (8000260 <app_main_peripherals_init_pru8+0x6c>)
 800024c:	220c      	movs	r2, #12
 800024e:	701a      	strb	r2, [r3, #0]

	/* NVIC Initialization - Disable all the interrupts and set the appropriate priority */
	//nvic_init_v();

	return (ret_val_u8);
 8000250:	7dfb      	ldrb	r3, [r7, #23]
}
 8000252:	4618      	mov	r0, r3
 8000254:	3718      	adds	r7, #24
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	20000000 	.word	0x20000000
 8000260:	20000001 	.word	0x20000001
 8000264:	18984010 	.word	0x18984010

08000268 <app_main_pre_os_periph_config_pru8>:
Description  :
Input Data   :
Return Value :
**/
static U8 app_main_pre_os_periph_config_pru8(void)
{
 8000268:	b480      	push	{r7}
 800026a:	b083      	sub	sp, #12
 800026c:	af00      	add	r7, sp, #0
	U8 ret_val_u8 = 0;
 800026e:	2300      	movs	r3, #0
 8000270:	71fb      	strb	r3, [r7, #7]
	/* TODO: Enable this once boot state machine file is included */
	bootsm_boot_status_e = BOOTSM_SYS_APP_PREOS_CONFIGURATION;
 8000272:	4b05      	ldr	r3, [pc, #20]	; (8000288 <app_main_pre_os_periph_config_pru8+0x20>)
 8000274:	2207      	movs	r2, #7
 8000276:	701a      	strb	r2, [r3, #0]
	#if !TEST_COMM_HARD_CODE
	/** Powering all the sensor after core initialisation */
	app_main_sensor_on_v();
	#endif
#endif
	return (ret_val_u8);
 8000278:	79fb      	ldrb	r3, [r7, #7]
}
 800027a:	4618      	mov	r0, r3
 800027c:	370c      	adds	r7, #12
 800027e:	46bd      	mov	sp, r7
 8000280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000284:	4770      	bx	lr
 8000286:	bf00      	nop
 8000288:	20000000 	.word	0x20000000

0800028c <can_app_init_u8>:
Description  :
Input Data   :
Return Value :
**/
U8 can_app_init_u8()
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
	U8 ret_val_u8 = 0;
 8000292:	2300      	movs	r3, #0
 8000294:	71fb      	strb	r3, [r7, #7]

	if(can_init_u8())
 8000296:	f000 f869 	bl	800036c <can_init_u8>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d002      	beq.n	80002a6 <can_app_init_u8+0x1a>
	{
		/*CAN APP Init Error*/
		ret_val_u8 += 1;
 80002a0:	79fb      	ldrb	r3, [r7, #7]
 80002a2:	3301      	adds	r3, #1
 80002a4:	71fb      	strb	r3, [r7, #7]
	}

	return ret_val_u8;
 80002a6:	79fb      	ldrb	r3, [r7, #7]
}
 80002a8:	4618      	mov	r0, r3
 80002aa:	3708      	adds	r7, #8
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}

080002b0 <can_app_transmit_data_u8>:
Description  :
Input Data   :
Return Value :
**/
U8 can_app_transmit_data_u8(can_app_message_tst *msg_arpst)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
	U8 ret_val_u8 = 0;
 80002b8:	2300      	movs	r3, #0
 80002ba:	73fb      	strb	r3, [r7, #15]

	ret_val_u8 = can_transmit_data_u8((can_message_tst*)msg_arpst);
 80002bc:	6878      	ldr	r0, [r7, #4]
 80002be:	f000 f8c3 	bl	8000448 <can_transmit_data_u8>
 80002c2:	4603      	mov	r3, r0
 80002c4:	73fb      	strb	r3, [r7, #15]

	if(ret_val_u8)
 80002c6:	7bfb      	ldrb	r3, [r7, #15]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d002      	beq.n	80002d2 <can_app_transmit_data_u8+0x22>
	{
		ret_val_u8++;
 80002cc:	7bfb      	ldrb	r3, [r7, #15]
 80002ce:	3301      	adds	r3, #1
 80002d0:	73fb      	strb	r3, [r7, #15]
		//app_main_system_flt_status_u64 |= ((U64)1 << FAULT_BIT_CAN_TX);
	}
	return ret_val_u8;
 80002d2:	7bfb      	ldrb	r3, [r7, #15]

}
 80002d4:	4618      	mov	r0, r3
 80002d6:	3710      	adds	r7, #16
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}

080002dc <can_app_0_rx_callback>:
Description  :
Input Data   :
Return Value :
**/
void can_app_0_rx_callback()
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
//	}
//
//	xQueueSendFromISR(os_can_comm_queue_handler_ge, &os_can_rx_queue_st, &xHigherPriorityTaskWoken);
//	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);

}
 80002e0:	bf00      	nop
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr

080002ea <core_main_start_u8>:
Description  :
Input Data   :
Return Value :
**/
U8 core_main_start_u8(void)
{
 80002ea:	b580      	push	{r7, lr}
 80002ec:	b082      	sub	sp, #8
 80002ee:	af00      	add	r7, sp, #0
	U8 ret_val_u8 = 0;
 80002f0:	2300      	movs	r3, #0
 80002f2:	71fb      	strb	r3, [r7, #7]
	ret_val_u8 =  core_main_core_init_pru8();
 80002f4:	f000 f80e 	bl	8000314 <core_main_core_init_pru8>
 80002f8:	4603      	mov	r3, r0
 80002fa:	71fb      	strb	r3, [r7, #7]
	ret_val_u8 += core_main_core_peripherals_init_pru8();
 80002fc:	f000 f822 	bl	8000344 <core_main_core_peripherals_init_pru8>
 8000300:	4603      	mov	r3, r0
 8000302:	461a      	mov	r2, r3
 8000304:	79fb      	ldrb	r3, [r7, #7]
 8000306:	4413      	add	r3, r2
 8000308:	71fb      	strb	r3, [r7, #7]

	return (ret_val_u8);
 800030a:	79fb      	ldrb	r3, [r7, #7]
}
 800030c:	4618      	mov	r0, r3
 800030e:	3708      	adds	r7, #8
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}

08000314 <core_main_core_init_pru8>:
Description  :
Input Data   :
Return Value :
**/
static U8 core_main_core_init_pru8(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
	U8 ret_val_u8 = 0;
 800031a:	2300      	movs	r3, #0
 800031c:	71fb      	strb	r3, [r7, #7]

	/* System Core Init is happening */
	bootsm_boot_status_e = BOOTSM_SYS_CORE_INIT;
 800031e:	4b07      	ldr	r3, [pc, #28]	; (800033c <core_main_core_init_pru8+0x28>)
 8000320:	2203      	movs	r2, #3
 8000322:	701a      	strb	r2, [r3, #0]

	/* Configure the system clock with required specifications */
	bootsm_init_state_e = BOOTSM_APPCORE_CLOCK_STATE;
 8000324:	4b06      	ldr	r3, [pc, #24]	; (8000340 <core_main_core_init_pru8+0x2c>)
 8000326:	2204      	movs	r2, #4
 8000328:	701a      	strb	r2, [r3, #0]
	ret_val_u8 = clock_pwr_system_clock_config_u8();
 800032a:	f000 f8e7 	bl	80004fc <clock_pwr_system_clock_config_u8>
 800032e:	4603      	mov	r3, r0
 8000330:	71fb      	strb	r3, [r7, #7]
		app_main_system_flt_status_u32 |= (app_main_system_flt_status_u32 << 9);
	}
#endif


	return (ret_val_u8);
 8000332:	79fb      	ldrb	r3, [r7, #7]
}
 8000334:	4618      	mov	r0, r3
 8000336:	3708      	adds	r7, #8
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}
 800033c:	20000000 	.word	0x20000000
 8000340:	20000001 	.word	0x20000001

08000344 <core_main_core_peripherals_init_pru8>:
Description  :
Input Data   :
Return Value :
**/
static U8 core_main_core_peripherals_init_pru8(void)
{
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
	U8 ret_val_u8 = 0;
 800034a:	2300      	movs	r3, #0
 800034c:	71fb      	strb	r3, [r7, #7]

	/* System Core Peripheral Init is happening */
	bootsm_boot_status_e = BOOTSM_SYS_CORE_PERL_INIT;
 800034e:	4b06      	ldr	r3, [pc, #24]	; (8000368 <core_main_core_peripherals_init_pru8+0x24>)
 8000350:	2204      	movs	r2, #4
 8000352:	701a      	strb	r2, [r3, #0]
	/*  ret_val_u8 += wdg_init_u8(); */

	/* TODO Configure the backup SRAM */

	/* TODO Configure the System Boot */
	bootsm_boot_status_e = BOOTSM_SYS_STORE_RESTART_INFO;
 8000354:	4b04      	ldr	r3, [pc, #16]	; (8000368 <core_main_core_peripherals_init_pru8+0x24>)
 8000356:	2205      	movs	r2, #5
 8000358:	701a      	strb	r2, [r3, #0]

	return (ret_val_u8);
 800035a:	79fb      	ldrb	r3, [r7, #7]
}
 800035c:	4618      	mov	r0, r3
 800035e:	370c      	adds	r7, #12
 8000360:	46bd      	mov	sp, r7
 8000362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000366:	4770      	bx	lr
 8000368:	20000000 	.word	0x20000000

0800036c <can_init_u8>:
Description  :
Input Data   :
Return Value :
**/
U8 can_init_u8()
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
	/* 250Kbps configuration */
	U8 ret_val_u8 = 0;
 8000372:	2300      	movs	r3, #0
 8000374:	71fb      	strb	r3, [r7, #7]
	hcan.Instance = CAN;
 8000376:	4b22      	ldr	r3, [pc, #136]	; (8000400 <can_init_u8+0x94>)
 8000378:	4a22      	ldr	r2, [pc, #136]	; (8000404 <can_init_u8+0x98>)
 800037a:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 6;
 800037c:	4b20      	ldr	r3, [pc, #128]	; (8000400 <can_init_u8+0x94>)
 800037e:	2206      	movs	r2, #6
 8000380:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8000382:	4b1f      	ldr	r3, [pc, #124]	; (8000400 <can_init_u8+0x94>)
 8000384:	2200      	movs	r2, #0
 8000386:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000388:	4b1d      	ldr	r3, [pc, #116]	; (8000400 <can_init_u8+0x94>)
 800038a:	2200      	movs	r2, #0
 800038c:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 800038e:	4b1c      	ldr	r3, [pc, #112]	; (8000400 <can_init_u8+0x94>)
 8000390:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000394:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000396:	4b1a      	ldr	r3, [pc, #104]	; (8000400 <can_init_u8+0x94>)
 8000398:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800039c:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 800039e:	4b18      	ldr	r3, [pc, #96]	; (8000400 <can_init_u8+0x94>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 80003a4:	4b16      	ldr	r3, [pc, #88]	; (8000400 <can_init_u8+0x94>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 80003aa:	4b15      	ldr	r3, [pc, #84]	; (8000400 <can_init_u8+0x94>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 80003b0:	4b13      	ldr	r3, [pc, #76]	; (8000400 <can_init_u8+0x94>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 80003b6:	4b12      	ldr	r3, [pc, #72]	; (8000400 <can_init_u8+0x94>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 80003bc:	4b10      	ldr	r3, [pc, #64]	; (8000400 <can_init_u8+0x94>)
 80003be:	2200      	movs	r2, #0
 80003c0:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK)
 80003c2:	480f      	ldr	r0, [pc, #60]	; (8000400 <can_init_u8+0x94>)
 80003c4:	f000 fc92 	bl	8000cec <HAL_CAN_Init>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <can_init_u8+0x66>
	{
		Error_Handler();/*CAN Init configuration Error */
 80003ce:	f000 fa4b 	bl	8000868 <Error_Handler>
	}
	/* Start the CAN module */
	HAL_CAN_Start(&hcan);
 80003d2:	480b      	ldr	r0, [pc, #44]	; (8000400 <can_init_u8+0x94>)
 80003d4:	f000 fe4f 	bl	8001076 <HAL_CAN_Start>
	/*Enable CAN interrupts*/
	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80003d8:	2102      	movs	r1, #2
 80003da:	4809      	ldr	r0, [pc, #36]	; (8000400 <can_init_u8+0x94>)
 80003dc:	f001 f8a5 	bl	800152a <HAL_CAN_ActivateNotification>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <can_init_u8+0x7e>
	{
	  Error_Handler(); /*CAN Interrupt Activation Error*/
 80003e6:	f000 fa3f 	bl	8000868 <Error_Handler>
	}
	HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 80003ea:	2014      	movs	r0, #20
 80003ec:	f001 fbf3 	bl	8001bd6 <HAL_NVIC_EnableIRQ>
	/* CAN Filter configuration */
	can_filter_init_v();
 80003f0:	f000 f80a 	bl	8000408 <can_filter_init_v>
	return(ret_val_u8);
 80003f4:	79fb      	ldrb	r3, [r7, #7]
}
 80003f6:	4618      	mov	r0, r3
 80003f8:	3708      	adds	r7, #8
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	20000b28 	.word	0x20000b28
 8000404:	40006400 	.word	0x40006400

08000408 <can_filter_init_v>:
Input Data   :
Return Value :
**/

void can_filter_init_v()
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b08a      	sub	sp, #40	; 0x28
 800040c:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig;

	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800040e:	2300      	movs	r3, #0
 8000410:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000412:	2301      	movs	r3, #1
 8000414:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0;
 8000416:	2300      	movs	r3, #0
 8000418:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0;
 800041a:	2300      	movs	r3, #0
 800041c:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0;
 800041e:	2300      	movs	r3, #0
 8000420:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0;
 8000422:	2300      	movs	r3, #0
 8000424:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000426:	2300      	movs	r3, #0
 8000428:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 800042a:	2301      	movs	r3, #1
 800042c:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterBank = 0;
 800042e:	2300      	movs	r3, #0
 8000430:	617b      	str	r3, [r7, #20]

	if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8000432:	463b      	mov	r3, r7
 8000434:	4619      	mov	r1, r3
 8000436:	4803      	ldr	r0, [pc, #12]	; (8000444 <can_filter_init_v+0x3c>)
 8000438:	f000 fd53 	bl	8000ee2 <HAL_CAN_ConfigFilter>
	{
		/* Filter configuration Error */
	}

}
 800043c:	bf00      	nop
 800043e:	3728      	adds	r7, #40	; 0x28
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	20000b28 	.word	0x20000b28

08000448 <can_transmit_data_u8>:
Description  :
Input Data   :
Return Value :
**/
U8 can_transmit_data_u8(can_message_tst *msg_arpst)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b08a      	sub	sp, #40	; 0x28
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
	U8 ret_val_u8 = 0;
 8000450:	2300      	movs	r3, #0
 8000452:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* Transmit the CAN message based on the required mode */
	CAN_TxHeaderTypeDef tx_header_st;
	U32 tx_mail_box_u32 = 0;
 8000456:	2300      	movs	r3, #0
 8000458:	60bb      	str	r3, [r7, #8]

	tx_header_st.DLC = msg_arpst->length_u8;
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	7b1b      	ldrb	r3, [r3, #12]
 800045e:	61fb      	str	r3, [r7, #28]
	tx_header_st.IDE = CAN_IDE;
 8000460:	2304      	movs	r3, #4
 8000462:	617b      	str	r3, [r7, #20]
	if(CAN_IDE == CAN_ID_EXT)
	{
		tx_header_st.ExtId = msg_arpst->can_id_u32;
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	613b      	str	r3, [r7, #16]
	else if (CAN_IDE == CAN_ID_STD)
	{
		tx_header_st.StdId = msg_arpst->can_id_u32;
	}

	tx_header_st.RTR = CAN_RTR_DATA;
 800046a:	2300      	movs	r3, #0
 800046c:	61bb      	str	r3, [r7, #24]

	if(HAL_CAN_AddTxMessage(&hcan, &tx_header_st, msg_arpst->data_au8, &tx_mail_box_u32) != HAL_OK)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	1d1a      	adds	r2, r3, #4
 8000472:	f107 0308 	add.w	r3, r7, #8
 8000476:	f107 010c 	add.w	r1, r7, #12
 800047a:	480f      	ldr	r0, [pc, #60]	; (80004b8 <can_transmit_data_u8+0x70>)
 800047c:	f000 fe3f 	bl	80010fe <HAL_CAN_AddTxMessage>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d004      	beq.n	8000490 <can_transmit_data_u8+0x48>
	{
		ret_val_u8 ++;/* CAM Transmission Error */
 8000486:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800048a:	3301      	adds	r3, #1
 800048c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	if(HAL_CAN_IsTxMessagePending(&hcan,tx_mail_box_u32)!= HAL_OK)
 8000490:	68bb      	ldr	r3, [r7, #8]
 8000492:	4619      	mov	r1, r3
 8000494:	4808      	ldr	r0, [pc, #32]	; (80004b8 <can_transmit_data_u8+0x70>)
 8000496:	f000 ff02 	bl	800129e <HAL_CAN_IsTxMessagePending>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d004      	beq.n	80004aa <can_transmit_data_u8+0x62>
	{
		ret_val_u8 ++; /* CAM Pending Error */
 80004a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80004a4:	3301      	adds	r3, #1
 80004a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
	return ret_val_u8;
 80004aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	3728      	adds	r7, #40	; 0x28
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	20000b28 	.word	0x20000b28

080004bc <USB_LP_CAN_RX0_IRQHandler>:
Input Data   :
Return Value :
**/

void USB_LP_CAN_RX0_IRQHandler(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan);
 80004c0:	480a      	ldr	r0, [pc, #40]	; (80004ec <USB_LP_CAN_RX0_IRQHandler+0x30>)
 80004c2:	f001 f858 	bl	8001576 <HAL_CAN_IRQHandler>
	if(HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &can_rx_header_st[arrary_size_u8], can_rx_data_u8) == HAL_OK)
 80004c6:	4b0a      	ldr	r3, [pc, #40]	; (80004f0 <USB_LP_CAN_RX0_IRQHandler+0x34>)
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	461a      	mov	r2, r3
 80004cc:	4613      	mov	r3, r2
 80004ce:	00db      	lsls	r3, r3, #3
 80004d0:	1a9b      	subs	r3, r3, r2
 80004d2:	009b      	lsls	r3, r3, #2
 80004d4:	4a07      	ldr	r2, [pc, #28]	; (80004f4 <USB_LP_CAN_RX0_IRQHandler+0x38>)
 80004d6:	441a      	add	r2, r3
 80004d8:	4b07      	ldr	r3, [pc, #28]	; (80004f8 <USB_LP_CAN_RX0_IRQHandler+0x3c>)
 80004da:	2100      	movs	r1, #0
 80004dc:	4803      	ldr	r0, [pc, #12]	; (80004ec <USB_LP_CAN_RX0_IRQHandler+0x30>)
 80004de:	f000 ff02 	bl	80012e6 <HAL_CAN_GetRxMessage>
	}
	else
	{

	}
	can_app_0_rx_callback();
 80004e2:	f7ff fefb 	bl	80002dc <can_app_0_rx_callback>
}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	20000b28 	.word	0x20000b28
 80004f0:	20000b24 	.word	0x20000b24
 80004f4:	20000034 	.word	0x20000034
 80004f8:	2000002c 	.word	0x2000002c

080004fc <clock_pwr_system_clock_config_u8>:
Input Data   : NULL
Return Value : zero if success, non-zero if failed.

**/
U8 clock_pwr_system_clock_config_u8(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
	U8 ret_val_u8 = 0;
 8000502:	2300      	movs	r3, #0
 8000504:	71fb      	strb	r3, [r7, #7]
	SystemClock_Config();
 8000506:	f000 f8ad 	bl	8000664 <SystemClock_Config>

	return ret_val_u8;
 800050a:	79fb      	ldrb	r3, [r7, #7]
}
 800050c:	4618      	mov	r0, r3
 800050e:	3708      	adds	r7, #8
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}

08000514 <gpio_pin_mux_init_u8>:
Description  :
Input Data   :
Return Value :
**/
U8 gpio_pin_mux_init_u8(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b08c      	sub	sp, #48	; 0x30
 8000518:	af00      	add	r7, sp, #0
	U8 ret_val_u8 = 0;
 800051a:	2300      	movs	r3, #0
 800051c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000520:	f107 0318 	add.w	r3, r7, #24
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]
 800052e:	611a      	str	r2, [r3, #16]

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000530:	4b3e      	ldr	r3, [pc, #248]	; (800062c <gpio_pin_mux_init_u8+0x118>)
 8000532:	695b      	ldr	r3, [r3, #20]
 8000534:	4a3d      	ldr	r2, [pc, #244]	; (800062c <gpio_pin_mux_init_u8+0x118>)
 8000536:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800053a:	6153      	str	r3, [r2, #20]
 800053c:	4b3b      	ldr	r3, [pc, #236]	; (800062c <gpio_pin_mux_init_u8+0x118>)
 800053e:	695b      	ldr	r3, [r3, #20]
 8000540:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000544:	617b      	str	r3, [r7, #20]
 8000546:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000548:	4b38      	ldr	r3, [pc, #224]	; (800062c <gpio_pin_mux_init_u8+0x118>)
 800054a:	695b      	ldr	r3, [r3, #20]
 800054c:	4a37      	ldr	r2, [pc, #220]	; (800062c <gpio_pin_mux_init_u8+0x118>)
 800054e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000552:	6153      	str	r3, [r2, #20]
 8000554:	4b35      	ldr	r3, [pc, #212]	; (800062c <gpio_pin_mux_init_u8+0x118>)
 8000556:	695b      	ldr	r3, [r3, #20]
 8000558:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800055c:	613b      	str	r3, [r7, #16]
 800055e:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000560:	4b32      	ldr	r3, [pc, #200]	; (800062c <gpio_pin_mux_init_u8+0x118>)
 8000562:	695b      	ldr	r3, [r3, #20]
 8000564:	4a31      	ldr	r2, [pc, #196]	; (800062c <gpio_pin_mux_init_u8+0x118>)
 8000566:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800056a:	6153      	str	r3, [r2, #20]
 800056c:	4b2f      	ldr	r3, [pc, #188]	; (800062c <gpio_pin_mux_init_u8+0x118>)
 800056e:	695b      	ldr	r3, [r3, #20]
 8000570:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000574:	60fb      	str	r3, [r7, #12]
 8000576:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000578:	4b2c      	ldr	r3, [pc, #176]	; (800062c <gpio_pin_mux_init_u8+0x118>)
 800057a:	695b      	ldr	r3, [r3, #20]
 800057c:	4a2b      	ldr	r2, [pc, #172]	; (800062c <gpio_pin_mux_init_u8+0x118>)
 800057e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000582:	6153      	str	r3, [r2, #20]
 8000584:	4b29      	ldr	r3, [pc, #164]	; (800062c <gpio_pin_mux_init_u8+0x118>)
 8000586:	695b      	ldr	r3, [r3, #20]
 8000588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800058c:	60bb      	str	r3, [r7, #8]
 800058e:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000590:	4b26      	ldr	r3, [pc, #152]	; (800062c <gpio_pin_mux_init_u8+0x118>)
 8000592:	695b      	ldr	r3, [r3, #20]
 8000594:	4a25      	ldr	r2, [pc, #148]	; (800062c <gpio_pin_mux_init_u8+0x118>)
 8000596:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800059a:	6153      	str	r3, [r2, #20]
 800059c:	4b23      	ldr	r3, [pc, #140]	; (800062c <gpio_pin_mux_init_u8+0x118>)
 800059e:	695b      	ldr	r3, [r3, #20]
 80005a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a8:	4b20      	ldr	r3, [pc, #128]	; (800062c <gpio_pin_mux_init_u8+0x118>)
 80005aa:	695b      	ldr	r3, [r3, #20]
 80005ac:	4a1f      	ldr	r2, [pc, #124]	; (800062c <gpio_pin_mux_init_u8+0x118>)
 80005ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005b2:	6153      	str	r3, [r2, #20]
 80005b4:	4b1d      	ldr	r3, [pc, #116]	; (800062c <gpio_pin_mux_init_u8+0x118>)
 80005b6:	695b      	ldr	r3, [r3, #20]
 80005b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005bc:	603b      	str	r3, [r7, #0]
 80005be:	683b      	ldr	r3, [r7, #0]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80005c0:	2200      	movs	r2, #0
 80005c2:	f64f 7108 	movw	r1, #65288	; 0xff08
 80005c6:	481a      	ldr	r0, [pc, #104]	; (8000630 <gpio_pin_mux_init_u8+0x11c>)
 80005c8:	f001 fc9a 	bl	8001f00 <HAL_GPIO_WritePin>
	                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
	                          |LD6_Pin, GPIO_PIN_RESET);

	  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
	                           MEMS_INT2_Pin */
	  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80005cc:	2337      	movs	r3, #55	; 0x37
 80005ce:	61bb      	str	r3, [r7, #24]
	                          |MEMS_INT2_Pin;
	  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80005d0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80005d4:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005da:	f107 0318 	add.w	r3, r7, #24
 80005de:	4619      	mov	r1, r3
 80005e0:	4813      	ldr	r0, [pc, #76]	; (8000630 <gpio_pin_mux_init_u8+0x11c>)
 80005e2:	f001 fb13 	bl	8001c0c <HAL_GPIO_Init>

	  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
	                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
	                           LD6_Pin */
	  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80005e6:	f64f 7308 	movw	r3, #65288	; 0xff08
 80005ea:	61bb      	str	r3, [r7, #24]
	                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
	                          |LD6_Pin;
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ec:	2301      	movs	r3, #1
 80005ee:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f0:	2300      	movs	r3, #0
 80005f2:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f4:	2300      	movs	r3, #0
 80005f6:	627b      	str	r3, [r7, #36]	; 0x24
	  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005f8:	f107 0318 	add.w	r3, r7, #24
 80005fc:	4619      	mov	r1, r3
 80005fe:	480c      	ldr	r0, [pc, #48]	; (8000630 <gpio_pin_mux_init_u8+0x11c>)
 8000600:	f001 fb04 	bl	8001c0c <HAL_GPIO_Init>

	  /*Configure GPIO pin : B1_Pin */
	  GPIO_InitStruct.Pin = B1_Pin;
 8000604:	2301      	movs	r3, #1
 8000606:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000608:	2300      	movs	r3, #0
 800060a:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000610:	f107 0318 	add.w	r3, r7, #24
 8000614:	4619      	mov	r1, r3
 8000616:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800061a:	f001 faf7 	bl	8001c0c <HAL_GPIO_Init>

	return(ret_val_u8);
 800061e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000622:	4618      	mov	r0, r3
 8000624:	3730      	adds	r7, #48	; 0x30
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40021000 	.word	0x40021000
 8000630:	48001000 	.word	0x48001000

08000634 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800063a:	f000 faf1 	bl	8000c20 <HAL_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  int ret_val;
  ret_val += core_main_start_u8();
 800063e:	f7ff fe54 	bl	80002ea <core_main_start_u8>
 8000642:	4602      	mov	r2, r0
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	4413      	add	r3, r2
 8000648:	607b      	str	r3, [r7, #4]
  ret_val += app_main_start_u8();
 800064a:	f7ff fdbd 	bl	80001c8 <app_main_start_u8>
 800064e:	4602      	mov	r2, r0
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	4413      	add	r3, r2
 8000654:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  I2C1_Init();
 8000656:	f000 f867 	bl	8000728 <I2C1_Init>
  SPI1_Init();
 800065a:	f000 f8a5 	bl	80007a8 <SPI1_Init>
  USB_PCD_Init();
 800065e:	f000 f8e1 	bl	8000824 <USB_PCD_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000662:	e7fe      	b.n	8000662 <main+0x2e>

08000664 <SystemClock_Config>:
  }
  /* USER CODE END 3 */
}

void SystemClock_Config()
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b09e      	sub	sp, #120	; 0x78
 8000668:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800066e:	2228      	movs	r2, #40	; 0x28
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f003 fb34 	bl	8003ce0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000688:	463b      	mov	r3, r7
 800068a:	223c      	movs	r2, #60	; 0x3c
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f003 fb26 	bl	8003ce0 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000694:	2303      	movs	r3, #3
 8000696:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000698:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800069c:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a2:	2301      	movs	r3, #1
 80006a4:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a6:	2310      	movs	r3, #16
 80006a8:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006aa:	2302      	movs	r3, #2
 80006ac:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b2:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80006b4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80006b8:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80006be:	4618      	mov	r0, r3
 80006c0:	f001 fe2e 	bl	8002320 <HAL_RCC_OscConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0x6a>
	{
		Error_Handler();
 80006ca:	f000 f8cd 	bl	8000868 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ce:	230f      	movs	r3, #15
 80006d0:	63fb      	str	r3, [r7, #60]	; 0x3c
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d2:	2302      	movs	r3, #2
 80006d4:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006de:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006e8:	2101      	movs	r1, #1
 80006ea:	4618      	mov	r0, r3
 80006ec:	f002 fe56 	bl	800339c <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0x96>
	{
	Error_Handler();
 80006f6:	f000 f8b7 	bl	8000868 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 80006fa:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <SystemClock_Config+0xc0>)
 80006fc:	603b      	str	r3, [r7, #0]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80006fe:	2300      	movs	r3, #0
 8000700:	61fb      	str	r3, [r7, #28]
	PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000702:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000706:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000708:	463b      	mov	r3, r7
 800070a:	4618      	mov	r0, r3
 800070c:	f003 f82c 	bl	8003768 <HAL_RCCEx_PeriphCLKConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xb6>
	{
	Error_Handler();
 8000716:	f000 f8a7 	bl	8000868 <Error_Handler>
	}

}
 800071a:	bf00      	nop
 800071c:	3778      	adds	r7, #120	; 0x78
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	00020020 	.word	0x00020020

08000728 <I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void I2C1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800072c:	4b1b      	ldr	r3, [pc, #108]	; (800079c <I2C1_Init+0x74>)
 800072e:	4a1c      	ldr	r2, [pc, #112]	; (80007a0 <I2C1_Init+0x78>)
 8000730:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000732:	4b1a      	ldr	r3, [pc, #104]	; (800079c <I2C1_Init+0x74>)
 8000734:	4a1b      	ldr	r2, [pc, #108]	; (80007a4 <I2C1_Init+0x7c>)
 8000736:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000738:	4b18      	ldr	r3, [pc, #96]	; (800079c <I2C1_Init+0x74>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800073e:	4b17      	ldr	r3, [pc, #92]	; (800079c <I2C1_Init+0x74>)
 8000740:	2201      	movs	r2, #1
 8000742:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000744:	4b15      	ldr	r3, [pc, #84]	; (800079c <I2C1_Init+0x74>)
 8000746:	2200      	movs	r2, #0
 8000748:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800074a:	4b14      	ldr	r3, [pc, #80]	; (800079c <I2C1_Init+0x74>)
 800074c:	2200      	movs	r2, #0
 800074e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <I2C1_Init+0x74>)
 8000752:	2200      	movs	r2, #0
 8000754:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <I2C1_Init+0x74>)
 8000758:	2200      	movs	r2, #0
 800075a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <I2C1_Init+0x74>)
 800075e:	2200      	movs	r2, #0
 8000760:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000762:	480e      	ldr	r0, [pc, #56]	; (800079c <I2C1_Init+0x74>)
 8000764:	f001 fbe4 	bl	8001f30 <HAL_I2C_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <I2C1_Init+0x4a>
  {
    Error_Handler();
 800076e:	f000 f87b 	bl	8000868 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000772:	2100      	movs	r1, #0
 8000774:	4809      	ldr	r0, [pc, #36]	; (800079c <I2C1_Init+0x74>)
 8000776:	f001 fc6a 	bl	800204e <HAL_I2CEx_ConfigAnalogFilter>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <I2C1_Init+0x5c>
  {
    Error_Handler();
 8000780:	f000 f872 	bl	8000868 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000784:	2100      	movs	r1, #0
 8000786:	4805      	ldr	r0, [pc, #20]	; (800079c <I2C1_Init+0x74>)
 8000788:	f001 fcac 	bl	80020e4 <HAL_I2CEx_ConfigDigitalFilter>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <I2C1_Init+0x6e>
  {
    Error_Handler();
 8000792:	f000 f869 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000b50 	.word	0x20000b50
 80007a0:	40005400 	.word	0x40005400
 80007a4:	2000090e 	.word	0x2000090e

080007a8 <SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void SPI1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007ac:	4b1b      	ldr	r3, [pc, #108]	; (800081c <SPI1_Init+0x74>)
 80007ae:	4a1c      	ldr	r2, [pc, #112]	; (8000820 <SPI1_Init+0x78>)
 80007b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007b2:	4b1a      	ldr	r3, [pc, #104]	; (800081c <SPI1_Init+0x74>)
 80007b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007ba:	4b18      	ldr	r3, [pc, #96]	; (800081c <SPI1_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80007c0:	4b16      	ldr	r3, [pc, #88]	; (800081c <SPI1_Init+0x74>)
 80007c2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80007c6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007c8:	4b14      	ldr	r3, [pc, #80]	; (800081c <SPI1_Init+0x74>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007ce:	4b13      	ldr	r3, [pc, #76]	; (800081c <SPI1_Init+0x74>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007d4:	4b11      	ldr	r3, [pc, #68]	; (800081c <SPI1_Init+0x74>)
 80007d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007da:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <SPI1_Init+0x74>)
 80007de:	2208      	movs	r2, #8
 80007e0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <SPI1_Init+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <SPI1_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <SPI1_Init+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007f4:	4b09      	ldr	r3, [pc, #36]	; (800081c <SPI1_Init+0x74>)
 80007f6:	2207      	movs	r2, #7
 80007f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <SPI1_Init+0x74>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <SPI1_Init+0x74>)
 8000802:	2208      	movs	r2, #8
 8000804:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <SPI1_Init+0x74>)
 8000808:	f003 f95e 	bl	8003ac8 <HAL_SPI_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SPI1_Init+0x6e>
  {
    Error_Handler();
 8000812:	f000 f829 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000ba4 	.word	0x20000ba4
 8000820:	40013000 	.word	0x40013000

08000824 <USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void USB_PCD_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000828:	4b0d      	ldr	r3, [pc, #52]	; (8000860 <USB_PCD_Init+0x3c>)
 800082a:	4a0e      	ldr	r2, [pc, #56]	; (8000864 <USB_PCD_Init+0x40>)
 800082c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800082e:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <USB_PCD_Init+0x3c>)
 8000830:	2208      	movs	r2, #8
 8000832:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000834:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <USB_PCD_Init+0x3c>)
 8000836:	2202      	movs	r2, #2
 8000838:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <USB_PCD_Init+0x3c>)
 800083c:	2202      	movs	r2, #2
 800083e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000840:	4b07      	ldr	r3, [pc, #28]	; (8000860 <USB_PCD_Init+0x3c>)
 8000842:	2200      	movs	r2, #0
 8000844:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <USB_PCD_Init+0x3c>)
 8000848:	2200      	movs	r2, #0
 800084a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800084c:	4804      	ldr	r0, [pc, #16]	; (8000860 <USB_PCD_Init+0x3c>)
 800084e:	f001 fc95 	bl	800217c <HAL_PCD_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000858:	f000 f806 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000c08 	.word	0x20000c08
 8000864:	40005c00 	.word	0x40005c00

08000868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800086c:	b672      	cpsid	i
}
 800086e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000870:	e7fe      	b.n	8000870 <Error_Handler+0x8>
	...

08000874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087a:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <HAL_MspInit+0x44>)
 800087c:	699b      	ldr	r3, [r3, #24]
 800087e:	4a0e      	ldr	r2, [pc, #56]	; (80008b8 <HAL_MspInit+0x44>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6193      	str	r3, [r2, #24]
 8000886:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <HAL_MspInit+0x44>)
 8000888:	699b      	ldr	r3, [r3, #24]
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000892:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <HAL_MspInit+0x44>)
 8000894:	69db      	ldr	r3, [r3, #28]
 8000896:	4a08      	ldr	r2, [pc, #32]	; (80008b8 <HAL_MspInit+0x44>)
 8000898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800089c:	61d3      	str	r3, [r2, #28]
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <HAL_MspInit+0x44>)
 80008a0:	69db      	ldr	r3, [r3, #28]
 80008a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008aa:	2007      	movs	r0, #7
 80008ac:	f001 f96c 	bl	8001b88 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b0:	bf00      	nop
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40021000 	.word	0x40021000

080008bc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	; 0x28
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a27      	ldr	r2, [pc, #156]	; (8000978 <HAL_CAN_MspInit+0xbc>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d147      	bne.n	800096e <HAL_CAN_MspInit+0xb2>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008de:	4b27      	ldr	r3, [pc, #156]	; (800097c <HAL_CAN_MspInit+0xc0>)
 80008e0:	69db      	ldr	r3, [r3, #28]
 80008e2:	4a26      	ldr	r2, [pc, #152]	; (800097c <HAL_CAN_MspInit+0xc0>)
 80008e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008e8:	61d3      	str	r3, [r2, #28]
 80008ea:	4b24      	ldr	r3, [pc, #144]	; (800097c <HAL_CAN_MspInit+0xc0>)
 80008ec:	69db      	ldr	r3, [r3, #28]
 80008ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008f2:	613b      	str	r3, [r7, #16]
 80008f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008f6:	4b21      	ldr	r3, [pc, #132]	; (800097c <HAL_CAN_MspInit+0xc0>)
 80008f8:	695b      	ldr	r3, [r3, #20]
 80008fa:	4a20      	ldr	r2, [pc, #128]	; (800097c <HAL_CAN_MspInit+0xc0>)
 80008fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000900:	6153      	str	r3, [r2, #20]
 8000902:	4b1e      	ldr	r3, [pc, #120]	; (800097c <HAL_CAN_MspInit+0xc0>)
 8000904:	695b      	ldr	r3, [r3, #20]
 8000906:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PD0     ------> CAN_RX
    PD1     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800090e:	2303      	movs	r3, #3
 8000910:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000912:	2302      	movs	r3, #2
 8000914:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800091a:	2303      	movs	r3, #3
 800091c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_CAN;
 800091e:	2307      	movs	r3, #7
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	4619      	mov	r1, r3
 8000928:	4815      	ldr	r0, [pc, #84]	; (8000980 <HAL_CAN_MspInit+0xc4>)
 800092a:	f001 f96f 	bl	8001c0c <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN_TX_IRQn, 15, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	210f      	movs	r1, #15
 8000932:	2013      	movs	r0, #19
 8000934:	f001 f933 	bl	8001b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN_TX_IRQn);
 8000938:	2013      	movs	r0, #19
 800093a:	f001 f94c 	bl	8001bd6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 15, 0);
 800093e:	2200      	movs	r2, #0
 8000940:	210f      	movs	r1, #15
 8000942:	2014      	movs	r0, #20
 8000944:	f001 f92b 	bl	8001b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8000948:	2014      	movs	r0, #20
 800094a:	f001 f944 	bl	8001bd6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 15, 0);
 800094e:	2200      	movs	r2, #0
 8000950:	210f      	movs	r1, #15
 8000952:	2015      	movs	r0, #21
 8000954:	f001 f923 	bl	8001b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8000958:	2015      	movs	r0, #21
 800095a:	f001 f93c 	bl	8001bd6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_SCE_IRQn, 15, 0);
 800095e:	2200      	movs	r2, #0
 8000960:	210f      	movs	r1, #15
 8000962:	2016      	movs	r0, #22
 8000964:	f001 f91b 	bl	8001b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
 8000968:	2016      	movs	r0, #22
 800096a:	f001 f934 	bl	8001bd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800096e:	bf00      	nop
 8000970:	3728      	adds	r7, #40	; 0x28
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40006400 	.word	0x40006400
 800097c:	40021000 	.word	0x40021000
 8000980:	48000c00 	.word	0x48000c00

08000984 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	; 0x28
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a17      	ldr	r2, [pc, #92]	; (8000a00 <HAL_I2C_MspInit+0x7c>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d127      	bne.n	80009f6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a6:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <HAL_I2C_MspInit+0x80>)
 80009a8:	695b      	ldr	r3, [r3, #20]
 80009aa:	4a16      	ldr	r2, [pc, #88]	; (8000a04 <HAL_I2C_MspInit+0x80>)
 80009ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009b0:	6153      	str	r3, [r2, #20]
 80009b2:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <HAL_I2C_MspInit+0x80>)
 80009b4:	695b      	ldr	r3, [r3, #20]
 80009b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80009be:	23c0      	movs	r3, #192	; 0xc0
 80009c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009c2:	2312      	movs	r3, #18
 80009c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009c6:	2301      	movs	r3, #1
 80009c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ca:	2303      	movs	r3, #3
 80009cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009ce:	2304      	movs	r3, #4
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d2:	f107 0314 	add.w	r3, r7, #20
 80009d6:	4619      	mov	r1, r3
 80009d8:	480b      	ldr	r0, [pc, #44]	; (8000a08 <HAL_I2C_MspInit+0x84>)
 80009da:	f001 f917 	bl	8001c0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <HAL_I2C_MspInit+0x80>)
 80009e0:	69db      	ldr	r3, [r3, #28]
 80009e2:	4a08      	ldr	r2, [pc, #32]	; (8000a04 <HAL_I2C_MspInit+0x80>)
 80009e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009e8:	61d3      	str	r3, [r2, #28]
 80009ea:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <HAL_I2C_MspInit+0x80>)
 80009ec:	69db      	ldr	r3, [r3, #28]
 80009ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009f6:	bf00      	nop
 80009f8:	3728      	adds	r7, #40	; 0x28
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40005400 	.word	0x40005400
 8000a04:	40021000 	.word	0x40021000
 8000a08:	48000400 	.word	0x48000400

08000a0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	; 0x28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a17      	ldr	r2, [pc, #92]	; (8000a88 <HAL_SPI_MspInit+0x7c>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d128      	bne.n	8000a80 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a2e:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <HAL_SPI_MspInit+0x80>)
 8000a30:	699b      	ldr	r3, [r3, #24]
 8000a32:	4a16      	ldr	r2, [pc, #88]	; (8000a8c <HAL_SPI_MspInit+0x80>)
 8000a34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a38:	6193      	str	r3, [r2, #24]
 8000a3a:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <HAL_SPI_MspInit+0x80>)
 8000a3c:	699b      	ldr	r3, [r3, #24]
 8000a3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a46:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <HAL_SPI_MspInit+0x80>)
 8000a48:	695b      	ldr	r3, [r3, #20]
 8000a4a:	4a10      	ldr	r2, [pc, #64]	; (8000a8c <HAL_SPI_MspInit+0x80>)
 8000a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a50:	6153      	str	r3, [r2, #20]
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <HAL_SPI_MspInit+0x80>)
 8000a54:	695b      	ldr	r3, [r3, #20]
 8000a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000a5e:	23e0      	movs	r3, #224	; 0xe0
 8000a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	2302      	movs	r3, #2
 8000a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a6e:	2305      	movs	r3, #5
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	4619      	mov	r1, r3
 8000a78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a7c:	f001 f8c6 	bl	8001c0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a80:	bf00      	nop
 8000a82:	3728      	adds	r7, #40	; 0x28
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40013000 	.word	0x40013000
 8000a8c:	40021000 	.word	0x40021000

08000a90 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08a      	sub	sp, #40	; 0x28
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a18      	ldr	r2, [pc, #96]	; (8000b10 <HAL_PCD_MspInit+0x80>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d129      	bne.n	8000b06 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab2:	4b18      	ldr	r3, [pc, #96]	; (8000b14 <HAL_PCD_MspInit+0x84>)
 8000ab4:	695b      	ldr	r3, [r3, #20]
 8000ab6:	4a17      	ldr	r2, [pc, #92]	; (8000b14 <HAL_PCD_MspInit+0x84>)
 8000ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000abc:	6153      	str	r3, [r2, #20]
 8000abe:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <HAL_PCD_MspInit+0x84>)
 8000ac0:	695b      	ldr	r3, [r3, #20]
 8000ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000aca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ace:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ad8:	2303      	movs	r3, #3
 8000ada:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000adc:	230e      	movs	r3, #14
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aea:	f001 f88f 	bl	8001c0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000aee:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <HAL_PCD_MspInit+0x84>)
 8000af0:	69db      	ldr	r3, [r3, #28]
 8000af2:	4a08      	ldr	r2, [pc, #32]	; (8000b14 <HAL_PCD_MspInit+0x84>)
 8000af4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000af8:	61d3      	str	r3, [r2, #28]
 8000afa:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <HAL_PCD_MspInit+0x84>)
 8000afc:	69db      	ldr	r3, [r3, #28]
 8000afe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000b06:	bf00      	nop
 8000b08:	3728      	adds	r7, #40	; 0x28
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40005c00 	.word	0x40005c00
 8000b14:	40021000 	.word	0x40021000

08000b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <NMI_Handler+0x4>

08000b1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b22:	e7fe      	b.n	8000b22 <HardFault_Handler+0x4>

08000b24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <MemManage_Handler+0x4>

08000b2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b2e:	e7fe      	b.n	8000b2e <BusFault_Handler+0x4>

08000b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <UsageFault_Handler+0x4>

08000b36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b64:	f000 f8a2 	bl	8000cac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <USB_HP_CAN_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN_TX interrupts.
  */
void USB_HP_CAN_TX_IRQHandler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000b70:	4802      	ldr	r0, [pc, #8]	; (8000b7c <USB_HP_CAN_TX_IRQHandler+0x10>)
 8000b72:	f000 fd00 	bl	8001576 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000b28 	.word	0x20000b28

08000b80 <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000b84:	4802      	ldr	r0, [pc, #8]	; (8000b90 <CAN_RX1_IRQHandler+0x10>)
 8000b86:	f000 fcf6 	bl	8001576 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000b28 	.word	0x20000b28

08000b94 <CAN_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN_SCE_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_SCE_IRQn 0 */

  /* USER CODE END CAN_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000b98:	4802      	ldr	r0, [pc, #8]	; (8000ba4 <CAN_SCE_IRQHandler+0x10>)
 8000b9a:	f000 fcec 	bl	8001576 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_SCE_IRQn 1 */

  /* USER CODE END CAN_SCE_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000b28 	.word	0x20000b28

08000ba8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <SystemInit+0x20>)
 8000bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bb2:	4a05      	ldr	r2, [pc, #20]	; (8000bc8 <SystemInit+0x20>)
 8000bb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c04 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bd0:	f7ff ffea 	bl	8000ba8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bd4:	480c      	ldr	r0, [pc, #48]	; (8000c08 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bd6:	490d      	ldr	r1, [pc, #52]	; (8000c0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bd8:	4a0d      	ldr	r2, [pc, #52]	; (8000c10 <LoopForever+0xe>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bdc:	e002      	b.n	8000be4 <LoopCopyDataInit>

08000bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be2:	3304      	adds	r3, #4

08000be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be8:	d3f9      	bcc.n	8000bde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bea:	4a0a      	ldr	r2, [pc, #40]	; (8000c14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bec:	4c0a      	ldr	r4, [pc, #40]	; (8000c18 <LoopForever+0x16>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf0:	e001      	b.n	8000bf6 <LoopFillZerobss>

08000bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf4:	3204      	adds	r2, #4

08000bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf8:	d3fb      	bcc.n	8000bf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bfa:	f003 f84d 	bl	8003c98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bfe:	f7ff fd19 	bl	8000634 <main>

08000c02 <LoopForever>:

LoopForever:
    b LoopForever
 8000c02:	e7fe      	b.n	8000c02 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c04:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c0c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c10:	08003d40 	.word	0x08003d40
  ldr r2, =_sbss
 8000c14:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c18:	20000ef8 	.word	0x20000ef8

08000c1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c1c:	e7fe      	b.n	8000c1c <ADC1_2_IRQHandler>
	...

08000c20 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c24:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <HAL_Init+0x28>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a07      	ldr	r2, [pc, #28]	; (8000c48 <HAL_Init+0x28>)
 8000c2a:	f043 0310 	orr.w	r3, r3, #16
 8000c2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c30:	2003      	movs	r0, #3
 8000c32:	f000 ffa9 	bl	8001b88 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c36:	2000      	movs	r0, #0
 8000c38:	f000 f808 	bl	8000c4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c3c:	f7ff fe1a 	bl	8000874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40022000 	.word	0x40022000

08000c4c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c54:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <HAL_InitTick+0x54>)
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <HAL_InitTick+0x58>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 ffc1 	bl	8001bf2 <HAL_SYSTICK_Config>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e00e      	b.n	8000c98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2b0f      	cmp	r3, #15
 8000c7e:	d80a      	bhi.n	8000c96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c80:	2200      	movs	r2, #0
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	f04f 30ff 	mov.w	r0, #4294967295
 8000c88:	f000 ff89 	bl	8001b9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c8c:	4a06      	ldr	r2, [pc, #24]	; (8000ca8 <HAL_InitTick+0x5c>)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c92:	2300      	movs	r3, #0
 8000c94:	e000      	b.n	8000c98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000004 	.word	0x20000004
 8000ca4:	2000000c 	.word	0x2000000c
 8000ca8:	20000008 	.word	0x20000008

08000cac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_IncTick+0x20>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <HAL_IncTick+0x24>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4413      	add	r3, r2
 8000cbc:	4a04      	ldr	r2, [pc, #16]	; (8000cd0 <HAL_IncTick+0x24>)
 8000cbe:	6013      	str	r3, [r2, #0]
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	2000000c 	.word	0x2000000c
 8000cd0:	20000ef4 	.word	0x20000ef4

08000cd4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000cd8:	4b03      	ldr	r3, [pc, #12]	; (8000ce8 <HAL_GetTick+0x14>)
 8000cda:	681b      	ldr	r3, [r3, #0]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	20000ef4 	.word	0x20000ef4

08000cec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d101      	bne.n	8000cfe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e0ed      	b.n	8000eda <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d102      	bne.n	8000d10 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f7ff fdd6 	bl	80008bc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f042 0201 	orr.w	r2, r2, #1
 8000d1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d20:	f7ff ffd8 	bl	8000cd4 <HAL_GetTick>
 8000d24:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d26:	e012      	b.n	8000d4e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d28:	f7ff ffd4 	bl	8000cd4 <HAL_GetTick>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	2b0a      	cmp	r3, #10
 8000d34:	d90b      	bls.n	8000d4e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d3a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2205      	movs	r2, #5
 8000d46:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e0c5      	b.n	8000eda <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f003 0301 	and.w	r3, r3, #1
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d0e5      	beq.n	8000d28 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f022 0202 	bic.w	r2, r2, #2
 8000d6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d6c:	f7ff ffb2 	bl	8000cd4 <HAL_GetTick>
 8000d70:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d72:	e012      	b.n	8000d9a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d74:	f7ff ffae 	bl	8000cd4 <HAL_GetTick>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	2b0a      	cmp	r3, #10
 8000d80:	d90b      	bls.n	8000d9a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d86:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2205      	movs	r2, #5
 8000d92:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e09f      	b.n	8000eda <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f003 0302 	and.w	r3, r3, #2
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d1e5      	bne.n	8000d74 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	7e1b      	ldrb	r3, [r3, #24]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d108      	bne.n	8000dc2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	e007      	b.n	8000dd2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000dd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	7e5b      	ldrb	r3, [r3, #25]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d108      	bne.n	8000dec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	e007      	b.n	8000dfc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000dfa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	7e9b      	ldrb	r3, [r3, #26]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d108      	bne.n	8000e16 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f042 0220 	orr.w	r2, r2, #32
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	e007      	b.n	8000e26 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f022 0220 	bic.w	r2, r2, #32
 8000e24:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	7edb      	ldrb	r3, [r3, #27]
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d108      	bne.n	8000e40 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f022 0210 	bic.w	r2, r2, #16
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	e007      	b.n	8000e50 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f042 0210 	orr.w	r2, r2, #16
 8000e4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	7f1b      	ldrb	r3, [r3, #28]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d108      	bne.n	8000e6a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f042 0208 	orr.w	r2, r2, #8
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	e007      	b.n	8000e7a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f022 0208 	bic.w	r2, r2, #8
 8000e78:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	7f5b      	ldrb	r3, [r3, #29]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d108      	bne.n	8000e94 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f042 0204 	orr.w	r2, r2, #4
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	e007      	b.n	8000ea4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f022 0204 	bic.w	r2, r2, #4
 8000ea2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	689a      	ldr	r2, [r3, #8]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	431a      	orrs	r2, r3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	691b      	ldr	r3, [r3, #16]
 8000eb2:	431a      	orrs	r2, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	695b      	ldr	r3, [r3, #20]
 8000eb8:	ea42 0103 	orr.w	r1, r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	1e5a      	subs	r2, r3, #1
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	b087      	sub	sp, #28
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
 8000eea:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ef8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000efa:	7cfb      	ldrb	r3, [r7, #19]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d003      	beq.n	8000f08 <HAL_CAN_ConfigFilter+0x26>
 8000f00:	7cfb      	ldrb	r3, [r7, #19]
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	f040 80aa 	bne.w	800105c <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f0e:	f043 0201 	orr.w	r2, r3, #1
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	695b      	ldr	r3, [r3, #20]
 8000f1c:	f003 031f 	and.w	r3, r3, #31
 8000f20:	2201      	movs	r2, #1
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	43db      	mvns	r3, r3
 8000f32:	401a      	ands	r2, r3
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	69db      	ldr	r3, [r3, #28]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d123      	bne.n	8000f8a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	401a      	ands	r2, r3
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f60:	683a      	ldr	r2, [r7, #0]
 8000f62:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f64:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	3248      	adds	r2, #72	; 0x48
 8000f6a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f7e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f80:	6979      	ldr	r1, [r7, #20]
 8000f82:	3348      	adds	r3, #72	; 0x48
 8000f84:	00db      	lsls	r3, r3, #3
 8000f86:	440b      	add	r3, r1
 8000f88:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d122      	bne.n	8000fd8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	431a      	orrs	r2, r3
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fae:	683a      	ldr	r2, [r7, #0]
 8000fb0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000fb2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	3248      	adds	r2, #72	; 0x48
 8000fb8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fcc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fce:	6979      	ldr	r1, [r7, #20]
 8000fd0:	3348      	adds	r3, #72	; 0x48
 8000fd2:	00db      	lsls	r3, r3, #3
 8000fd4:	440b      	add	r3, r1
 8000fd6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d109      	bne.n	8000ff4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	401a      	ands	r2, r3
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000ff2:	e007      	b.n	8001004 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	431a      	orrs	r2, r3
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	691b      	ldr	r3, [r3, #16]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d109      	bne.n	8001020 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	43db      	mvns	r3, r3
 8001016:	401a      	ands	r2, r3
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800101e:	e007      	b.n	8001030 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	431a      	orrs	r2, r3
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	6a1b      	ldr	r3, [r3, #32]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d107      	bne.n	8001048 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	431a      	orrs	r2, r3
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800104e:	f023 0201 	bic.w	r2, r3, #1
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001058:	2300      	movs	r3, #0
 800105a:	e006      	b.n	800106a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001060:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001068:	2301      	movs	r3, #1
  }
}
 800106a:	4618      	mov	r0, r3
 800106c:	371c      	adds	r7, #28
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b084      	sub	sp, #16
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b01      	cmp	r3, #1
 8001088:	d12e      	bne.n	80010e8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2202      	movs	r2, #2
 800108e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f022 0201 	bic.w	r2, r2, #1
 80010a0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80010a2:	f7ff fe17 	bl	8000cd4 <HAL_GetTick>
 80010a6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80010a8:	e012      	b.n	80010d0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010aa:	f7ff fe13 	bl	8000cd4 <HAL_GetTick>
 80010ae:	4602      	mov	r2, r0
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	2b0a      	cmp	r3, #10
 80010b6:	d90b      	bls.n	80010d0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010bc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2205      	movs	r2, #5
 80010c8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e012      	b.n	80010f6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d1e5      	bne.n	80010aa <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80010e4:	2300      	movs	r3, #0
 80010e6:	e006      	b.n	80010f6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ec:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
  }
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80010fe:	b480      	push	{r7}
 8001100:	b089      	sub	sp, #36	; 0x24
 8001102:	af00      	add	r7, sp, #0
 8001104:	60f8      	str	r0, [r7, #12]
 8001106:	60b9      	str	r1, [r7, #8]
 8001108:	607a      	str	r2, [r7, #4]
 800110a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001112:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800111c:	7ffb      	ldrb	r3, [r7, #31]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d003      	beq.n	800112a <HAL_CAN_AddTxMessage+0x2c>
 8001122:	7ffb      	ldrb	r3, [r7, #31]
 8001124:	2b02      	cmp	r3, #2
 8001126:	f040 80ad 	bne.w	8001284 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d10a      	bne.n	800114a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800113a:	2b00      	cmp	r3, #0
 800113c:	d105      	bne.n	800114a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001144:	2b00      	cmp	r3, #0
 8001146:	f000 8095 	beq.w	8001274 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	0e1b      	lsrs	r3, r3, #24
 800114e:	f003 0303 	and.w	r3, r3, #3
 8001152:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001154:	2201      	movs	r2, #1
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	409a      	lsls	r2, r3
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d10d      	bne.n	8001182 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001170:	68f9      	ldr	r1, [r7, #12]
 8001172:	6809      	ldr	r1, [r1, #0]
 8001174:	431a      	orrs	r2, r3
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	3318      	adds	r3, #24
 800117a:	011b      	lsls	r3, r3, #4
 800117c:	440b      	add	r3, r1
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	e00f      	b.n	80011a2 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800118c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001192:	68f9      	ldr	r1, [r7, #12]
 8001194:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001196:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	3318      	adds	r3, #24
 800119c:	011b      	lsls	r3, r3, #4
 800119e:	440b      	add	r3, r1
 80011a0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	6819      	ldr	r1, [r3, #0]
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	691a      	ldr	r2, [r3, #16]
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	3318      	adds	r3, #24
 80011ae:	011b      	lsls	r3, r3, #4
 80011b0:	440b      	add	r3, r1
 80011b2:	3304      	adds	r3, #4
 80011b4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	7d1b      	ldrb	r3, [r3, #20]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d111      	bne.n	80011e2 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	3318      	adds	r3, #24
 80011c6:	011b      	lsls	r3, r3, #4
 80011c8:	4413      	add	r3, r2
 80011ca:	3304      	adds	r3, #4
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	6811      	ldr	r1, [r2, #0]
 80011d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	3318      	adds	r3, #24
 80011da:	011b      	lsls	r3, r3, #4
 80011dc:	440b      	add	r3, r1
 80011de:	3304      	adds	r3, #4
 80011e0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	3307      	adds	r3, #7
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	061a      	lsls	r2, r3, #24
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	3306      	adds	r3, #6
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	041b      	lsls	r3, r3, #16
 80011f2:	431a      	orrs	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3305      	adds	r3, #5
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	021b      	lsls	r3, r3, #8
 80011fc:	4313      	orrs	r3, r2
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	3204      	adds	r2, #4
 8001202:	7812      	ldrb	r2, [r2, #0]
 8001204:	4610      	mov	r0, r2
 8001206:	68fa      	ldr	r2, [r7, #12]
 8001208:	6811      	ldr	r1, [r2, #0]
 800120a:	ea43 0200 	orr.w	r2, r3, r0
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	011b      	lsls	r3, r3, #4
 8001212:	440b      	add	r3, r1
 8001214:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001218:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	3303      	adds	r3, #3
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	061a      	lsls	r2, r3, #24
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	3302      	adds	r3, #2
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	041b      	lsls	r3, r3, #16
 800122a:	431a      	orrs	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3301      	adds	r3, #1
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	021b      	lsls	r3, r3, #8
 8001234:	4313      	orrs	r3, r2
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	7812      	ldrb	r2, [r2, #0]
 800123a:	4610      	mov	r0, r2
 800123c:	68fa      	ldr	r2, [r7, #12]
 800123e:	6811      	ldr	r1, [r2, #0]
 8001240:	ea43 0200 	orr.w	r2, r3, r0
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	011b      	lsls	r3, r3, #4
 8001248:	440b      	add	r3, r1
 800124a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800124e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	3318      	adds	r3, #24
 8001258:	011b      	lsls	r3, r3, #4
 800125a:	4413      	add	r3, r2
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	68fa      	ldr	r2, [r7, #12]
 8001260:	6811      	ldr	r1, [r2, #0]
 8001262:	f043 0201 	orr.w	r2, r3, #1
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	3318      	adds	r3, #24
 800126a:	011b      	lsls	r3, r3, #4
 800126c:	440b      	add	r3, r1
 800126e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001270:	2300      	movs	r3, #0
 8001272:	e00e      	b.n	8001292 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001278:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e006      	b.n	8001292 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001288:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
  }
}
 8001292:	4618      	mov	r0, r3
 8001294:	3724      	adds	r7, #36	; 0x24
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 800129e:	b480      	push	{r7}
 80012a0:	b085      	sub	sp, #20
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
 80012a6:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012b2:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80012b4:	7afb      	ldrb	r3, [r7, #11]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d002      	beq.n	80012c0 <HAL_CAN_IsTxMessagePending+0x22>
 80012ba:	7afb      	ldrb	r3, [r7, #11]
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d10b      	bne.n	80012d8 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	689a      	ldr	r2, [r3, #8]
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	069b      	lsls	r3, r3, #26
 80012ca:	401a      	ands	r2, r3
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	069b      	lsls	r3, r3, #26
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d001      	beq.n	80012d8 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 80012d4:	2301      	movs	r3, #1
 80012d6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 80012d8:	68fb      	ldr	r3, [r7, #12]
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3714      	adds	r7, #20
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80012e6:	b480      	push	{r7}
 80012e8:	b087      	sub	sp, #28
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	60f8      	str	r0, [r7, #12]
 80012ee:	60b9      	str	r1, [r7, #8]
 80012f0:	607a      	str	r2, [r7, #4]
 80012f2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012fa:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80012fc:	7dfb      	ldrb	r3, [r7, #23]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d003      	beq.n	800130a <HAL_CAN_GetRxMessage+0x24>
 8001302:	7dfb      	ldrb	r3, [r7, #23]
 8001304:	2b02      	cmp	r3, #2
 8001306:	f040 8103 	bne.w	8001510 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d10e      	bne.n	800132e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	f003 0303 	and.w	r3, r3, #3
 800131a:	2b00      	cmp	r3, #0
 800131c:	d116      	bne.n	800134c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001322:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e0f7      	b.n	800151e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	691b      	ldr	r3, [r3, #16]
 8001334:	f003 0303 	and.w	r3, r3, #3
 8001338:	2b00      	cmp	r3, #0
 800133a:	d107      	bne.n	800134c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001340:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e0e8      	b.n	800151e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	331b      	adds	r3, #27
 8001354:	011b      	lsls	r3, r3, #4
 8001356:	4413      	add	r3, r2
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0204 	and.w	r2, r3, #4
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d10c      	bne.n	8001384 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	331b      	adds	r3, #27
 8001372:	011b      	lsls	r3, r3, #4
 8001374:	4413      	add	r3, r2
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	0d5b      	lsrs	r3, r3, #21
 800137a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	e00b      	b.n	800139c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	331b      	adds	r3, #27
 800138c:	011b      	lsls	r3, r3, #4
 800138e:	4413      	add	r3, r2
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	08db      	lsrs	r3, r3, #3
 8001394:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	331b      	adds	r3, #27
 80013a4:	011b      	lsls	r3, r3, #4
 80013a6:	4413      	add	r3, r2
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0202 	and.w	r2, r3, #2
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	331b      	adds	r3, #27
 80013ba:	011b      	lsls	r3, r3, #4
 80013bc:	4413      	add	r3, r2
 80013be:	3304      	adds	r3, #4
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0308 	and.w	r3, r3, #8
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2208      	movs	r2, #8
 80013ce:	611a      	str	r2, [r3, #16]
 80013d0:	e00b      	b.n	80013ea <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	331b      	adds	r3, #27
 80013da:	011b      	lsls	r3, r3, #4
 80013dc:	4413      	add	r3, r2
 80013de:	3304      	adds	r3, #4
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 020f 	and.w	r2, r3, #15
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	331b      	adds	r3, #27
 80013f2:	011b      	lsls	r3, r3, #4
 80013f4:	4413      	add	r3, r2
 80013f6:	3304      	adds	r3, #4
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	0a1b      	lsrs	r3, r3, #8
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	331b      	adds	r3, #27
 800140a:	011b      	lsls	r3, r3, #4
 800140c:	4413      	add	r3, r2
 800140e:	3304      	adds	r3, #4
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	0c1b      	lsrs	r3, r3, #16
 8001414:	b29a      	uxth	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	011b      	lsls	r3, r3, #4
 8001422:	4413      	add	r3, r2
 8001424:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	b2da      	uxtb	r2, r3
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	011b      	lsls	r3, r3, #4
 8001438:	4413      	add	r3, r2
 800143a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	0a1a      	lsrs	r2, r3, #8
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	3301      	adds	r3, #1
 8001446:	b2d2      	uxtb	r2, r2
 8001448:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	011b      	lsls	r3, r3, #4
 8001452:	4413      	add	r3, r2
 8001454:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	0c1a      	lsrs	r2, r3, #16
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	3302      	adds	r3, #2
 8001460:	b2d2      	uxtb	r2, r2
 8001462:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	011b      	lsls	r3, r3, #4
 800146c:	4413      	add	r3, r2
 800146e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	0e1a      	lsrs	r2, r3, #24
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	3303      	adds	r3, #3
 800147a:	b2d2      	uxtb	r2, r2
 800147c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	011b      	lsls	r3, r3, #4
 8001486:	4413      	add	r3, r2
 8001488:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	3304      	adds	r3, #4
 8001492:	b2d2      	uxtb	r2, r2
 8001494:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	011b      	lsls	r3, r3, #4
 800149e:	4413      	add	r3, r2
 80014a0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	0a1a      	lsrs	r2, r3, #8
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	3305      	adds	r3, #5
 80014ac:	b2d2      	uxtb	r2, r2
 80014ae:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	011b      	lsls	r3, r3, #4
 80014b8:	4413      	add	r3, r2
 80014ba:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	0c1a      	lsrs	r2, r3, #16
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	3306      	adds	r3, #6
 80014c6:	b2d2      	uxtb	r2, r2
 80014c8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	011b      	lsls	r3, r3, #4
 80014d2:	4413      	add	r3, r2
 80014d4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	0e1a      	lsrs	r2, r3, #24
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	3307      	adds	r3, #7
 80014e0:	b2d2      	uxtb	r2, r2
 80014e2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d108      	bne.n	80014fc <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	68da      	ldr	r2, [r3, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f042 0220 	orr.w	r2, r2, #32
 80014f8:	60da      	str	r2, [r3, #12]
 80014fa:	e007      	b.n	800150c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	691a      	ldr	r2, [r3, #16]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f042 0220 	orr.w	r2, r2, #32
 800150a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800150c:	2300      	movs	r3, #0
 800150e:	e006      	b.n	800151e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001514:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
  }
}
 800151e:	4618      	mov	r0, r3
 8001520:	371c      	adds	r7, #28
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800152a:	b480      	push	{r7}
 800152c:	b085      	sub	sp, #20
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
 8001532:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f893 3020 	ldrb.w	r3, [r3, #32]
 800153a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800153c:	7bfb      	ldrb	r3, [r7, #15]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d002      	beq.n	8001548 <HAL_CAN_ActivateNotification+0x1e>
 8001542:	7bfb      	ldrb	r3, [r7, #15]
 8001544:	2b02      	cmp	r3, #2
 8001546:	d109      	bne.n	800155c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6959      	ldr	r1, [r3, #20]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	430a      	orrs	r2, r1
 8001556:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001558:	2300      	movs	r3, #0
 800155a:	e006      	b.n	800156a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001560:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
  }
}
 800156a:	4618      	mov	r0, r3
 800156c:	3714      	adds	r7, #20
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b08a      	sub	sp, #40	; 0x28
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800157e:	2300      	movs	r3, #0
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	695b      	ldr	r3, [r3, #20]
 8001588:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	691b      	ldr	r3, [r3, #16]
 80015a8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80015b2:	6a3b      	ldr	r3, [r7, #32]
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d07c      	beq.n	80016b6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d023      	beq.n	800160e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2201      	movs	r2, #1
 80015cc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d003      	beq.n	80015e0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f000 f983 	bl	80018e4 <HAL_CAN_TxMailbox0CompleteCallback>
 80015de:	e016      	b.n	800160e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	f003 0304 	and.w	r3, r3, #4
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d004      	beq.n	80015f4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80015ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
 80015f2:	e00c      	b.n	800160e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	f003 0308 	and.w	r3, r3, #8
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d004      	beq.n	8001608 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80015fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001600:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
 8001606:	e002      	b.n	800160e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f000 f989 	bl	8001920 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001614:	2b00      	cmp	r3, #0
 8001616:	d024      	beq.n	8001662 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001620:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001628:	2b00      	cmp	r3, #0
 800162a:	d003      	beq.n	8001634 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f000 f963 	bl	80018f8 <HAL_CAN_TxMailbox1CompleteCallback>
 8001632:	e016      	b.n	8001662 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800163a:	2b00      	cmp	r3, #0
 800163c:	d004      	beq.n	8001648 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001640:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
 8001646:	e00c      	b.n	8001662 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800164e:	2b00      	cmp	r3, #0
 8001650:	d004      	beq.n	800165c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001654:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001658:	627b      	str	r3, [r7, #36]	; 0x24
 800165a:	e002      	b.n	8001662 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f000 f969 	bl	8001934 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d024      	beq.n	80016b6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001674:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d003      	beq.n	8001688 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f000 f943 	bl	800190c <HAL_CAN_TxMailbox2CompleteCallback>
 8001686:	e016      	b.n	80016b6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d004      	beq.n	800169c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001694:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
 800169a:	e00c      	b.n	80016b6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d004      	beq.n	80016b0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80016a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
 80016ae:	e002      	b.n	80016b6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f000 f949 	bl	8001948 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80016b6:	6a3b      	ldr	r3, [r7, #32]
 80016b8:	f003 0308 	and.w	r3, r3, #8
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d00c      	beq.n	80016da <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	f003 0310 	and.w	r3, r3, #16
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d007      	beq.n	80016da <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80016ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016d0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2210      	movs	r2, #16
 80016d8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80016da:	6a3b      	ldr	r3, [r7, #32]
 80016dc:	f003 0304 	and.w	r3, r3, #4
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d00b      	beq.n	80016fc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	f003 0308 	and.w	r3, r3, #8
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d006      	beq.n	80016fc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2208      	movs	r2, #8
 80016f4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f000 f93a 	bl	8001970 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80016fc:	6a3b      	ldr	r3, [r7, #32]
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d009      	beq.n	800171a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	f003 0303 	and.w	r3, r3, #3
 8001710:	2b00      	cmp	r3, #0
 8001712:	d002      	beq.n	800171a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f000 f921 	bl	800195c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800171a:	6a3b      	ldr	r3, [r7, #32]
 800171c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001720:	2b00      	cmp	r3, #0
 8001722:	d00c      	beq.n	800173e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	f003 0310 	and.w	r3, r3, #16
 800172a:	2b00      	cmp	r3, #0
 800172c:	d007      	beq.n	800173e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800172e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001730:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001734:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2210      	movs	r2, #16
 800173c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800173e:	6a3b      	ldr	r3, [r7, #32]
 8001740:	f003 0320 	and.w	r3, r3, #32
 8001744:	2b00      	cmp	r3, #0
 8001746:	d00b      	beq.n	8001760 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	f003 0308 	and.w	r3, r3, #8
 800174e:	2b00      	cmp	r3, #0
 8001750:	d006      	beq.n	8001760 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2208      	movs	r2, #8
 8001758:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f000 f91c 	bl	8001998 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001760:	6a3b      	ldr	r3, [r7, #32]
 8001762:	f003 0310 	and.w	r3, r3, #16
 8001766:	2b00      	cmp	r3, #0
 8001768:	d009      	beq.n	800177e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	f003 0303 	and.w	r3, r3, #3
 8001774:	2b00      	cmp	r3, #0
 8001776:	d002      	beq.n	800177e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f000 f903 	bl	8001984 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800177e:	6a3b      	ldr	r3, [r7, #32]
 8001780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d00b      	beq.n	80017a0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f003 0310 	and.w	r3, r3, #16
 800178e:	2b00      	cmp	r3, #0
 8001790:	d006      	beq.n	80017a0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2210      	movs	r2, #16
 8001798:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f000 f906 	bl	80019ac <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80017a0:	6a3b      	ldr	r3, [r7, #32]
 80017a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d00b      	beq.n	80017c2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	f003 0308 	and.w	r3, r3, #8
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d006      	beq.n	80017c2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2208      	movs	r2, #8
 80017ba:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f000 f8ff 	bl	80019c0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80017c2:	6a3b      	ldr	r3, [r7, #32]
 80017c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d07b      	beq.n	80018c4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	f003 0304 	and.w	r3, r3, #4
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d072      	beq.n	80018bc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80017d6:	6a3b      	ldr	r3, [r7, #32]
 80017d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d008      	beq.n	80017f2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d003      	beq.n	80017f2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80017ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80017f2:	6a3b      	ldr	r3, [r7, #32]
 80017f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d008      	beq.n	800180e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	f043 0302 	orr.w	r3, r3, #2
 800180c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800180e:	6a3b      	ldr	r3, [r7, #32]
 8001810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001814:	2b00      	cmp	r3, #0
 8001816:	d008      	beq.n	800182a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001824:	f043 0304 	orr.w	r3, r3, #4
 8001828:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800182a:	6a3b      	ldr	r3, [r7, #32]
 800182c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001830:	2b00      	cmp	r3, #0
 8001832:	d043      	beq.n	80018bc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800183a:	2b00      	cmp	r3, #0
 800183c:	d03e      	beq.n	80018bc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001844:	2b60      	cmp	r3, #96	; 0x60
 8001846:	d02b      	beq.n	80018a0 <HAL_CAN_IRQHandler+0x32a>
 8001848:	2b60      	cmp	r3, #96	; 0x60
 800184a:	d82e      	bhi.n	80018aa <HAL_CAN_IRQHandler+0x334>
 800184c:	2b50      	cmp	r3, #80	; 0x50
 800184e:	d022      	beq.n	8001896 <HAL_CAN_IRQHandler+0x320>
 8001850:	2b50      	cmp	r3, #80	; 0x50
 8001852:	d82a      	bhi.n	80018aa <HAL_CAN_IRQHandler+0x334>
 8001854:	2b40      	cmp	r3, #64	; 0x40
 8001856:	d019      	beq.n	800188c <HAL_CAN_IRQHandler+0x316>
 8001858:	2b40      	cmp	r3, #64	; 0x40
 800185a:	d826      	bhi.n	80018aa <HAL_CAN_IRQHandler+0x334>
 800185c:	2b30      	cmp	r3, #48	; 0x30
 800185e:	d010      	beq.n	8001882 <HAL_CAN_IRQHandler+0x30c>
 8001860:	2b30      	cmp	r3, #48	; 0x30
 8001862:	d822      	bhi.n	80018aa <HAL_CAN_IRQHandler+0x334>
 8001864:	2b10      	cmp	r3, #16
 8001866:	d002      	beq.n	800186e <HAL_CAN_IRQHandler+0x2f8>
 8001868:	2b20      	cmp	r3, #32
 800186a:	d005      	beq.n	8001878 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800186c:	e01d      	b.n	80018aa <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	f043 0308 	orr.w	r3, r3, #8
 8001874:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001876:	e019      	b.n	80018ac <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	f043 0310 	orr.w	r3, r3, #16
 800187e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001880:	e014      	b.n	80018ac <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001884:	f043 0320 	orr.w	r3, r3, #32
 8001888:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800188a:	e00f      	b.n	80018ac <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800188c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001892:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001894:	e00a      	b.n	80018ac <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800189e:	e005      	b.n	80018ac <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80018a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80018a8:	e000      	b.n	80018ac <HAL_CAN_IRQHandler+0x336>
            break;
 80018aa:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	699a      	ldr	r2, [r3, #24]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80018ba:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2204      	movs	r2, #4
 80018c2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80018c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d008      	beq.n	80018dc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d0:	431a      	orrs	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f000 f87c 	bl	80019d4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80018dc:	bf00      	nop
 80018de:	3728      	adds	r7, #40	; 0x28
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f003 0307 	and.w	r3, r3, #7
 80019f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f8:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <__NVIC_SetPriorityGrouping+0x44>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019fe:	68ba      	ldr	r2, [r7, #8]
 8001a00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a04:	4013      	ands	r3, r2
 8001a06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a1a:	4a04      	ldr	r2, [pc, #16]	; (8001a2c <__NVIC_SetPriorityGrouping+0x44>)
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	60d3      	str	r3, [r2, #12]
}
 8001a20:	bf00      	nop
 8001a22:	3714      	adds	r7, #20
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a34:	4b04      	ldr	r3, [pc, #16]	; (8001a48 <__NVIC_GetPriorityGrouping+0x18>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	0a1b      	lsrs	r3, r3, #8
 8001a3a:	f003 0307 	and.w	r3, r3, #7
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	db0b      	blt.n	8001a76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
 8001a60:	f003 021f 	and.w	r2, r3, #31
 8001a64:	4907      	ldr	r1, [pc, #28]	; (8001a84 <__NVIC_EnableIRQ+0x38>)
 8001a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6a:	095b      	lsrs	r3, r3, #5
 8001a6c:	2001      	movs	r0, #1
 8001a6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	e000e100 	.word	0xe000e100

08001a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	6039      	str	r1, [r7, #0]
 8001a92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	db0a      	blt.n	8001ab2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	b2da      	uxtb	r2, r3
 8001aa0:	490c      	ldr	r1, [pc, #48]	; (8001ad4 <__NVIC_SetPriority+0x4c>)
 8001aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa6:	0112      	lsls	r2, r2, #4
 8001aa8:	b2d2      	uxtb	r2, r2
 8001aaa:	440b      	add	r3, r1
 8001aac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ab0:	e00a      	b.n	8001ac8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	4908      	ldr	r1, [pc, #32]	; (8001ad8 <__NVIC_SetPriority+0x50>)
 8001ab8:	79fb      	ldrb	r3, [r7, #7]
 8001aba:	f003 030f 	and.w	r3, r3, #15
 8001abe:	3b04      	subs	r3, #4
 8001ac0:	0112      	lsls	r2, r2, #4
 8001ac2:	b2d2      	uxtb	r2, r2
 8001ac4:	440b      	add	r3, r1
 8001ac6:	761a      	strb	r2, [r3, #24]
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	e000e100 	.word	0xe000e100
 8001ad8:	e000ed00 	.word	0xe000ed00

08001adc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b089      	sub	sp, #36	; 0x24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	f1c3 0307 	rsb	r3, r3, #7
 8001af6:	2b04      	cmp	r3, #4
 8001af8:	bf28      	it	cs
 8001afa:	2304      	movcs	r3, #4
 8001afc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	3304      	adds	r3, #4
 8001b02:	2b06      	cmp	r3, #6
 8001b04:	d902      	bls.n	8001b0c <NVIC_EncodePriority+0x30>
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	3b03      	subs	r3, #3
 8001b0a:	e000      	b.n	8001b0e <NVIC_EncodePriority+0x32>
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b10:	f04f 32ff 	mov.w	r2, #4294967295
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	43da      	mvns	r2, r3
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	401a      	ands	r2, r3
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b24:	f04f 31ff 	mov.w	r1, #4294967295
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2e:	43d9      	mvns	r1, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b34:	4313      	orrs	r3, r2
         );
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3724      	adds	r7, #36	; 0x24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
	...

08001b44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b54:	d301      	bcc.n	8001b5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b56:	2301      	movs	r3, #1
 8001b58:	e00f      	b.n	8001b7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b5a:	4a0a      	ldr	r2, [pc, #40]	; (8001b84 <SysTick_Config+0x40>)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b62:	210f      	movs	r1, #15
 8001b64:	f04f 30ff 	mov.w	r0, #4294967295
 8001b68:	f7ff ff8e 	bl	8001a88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b6c:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <SysTick_Config+0x40>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b72:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <SysTick_Config+0x40>)
 8001b74:	2207      	movs	r2, #7
 8001b76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	e000e010 	.word	0xe000e010

08001b88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff ff29 	bl	80019e8 <__NVIC_SetPriorityGrouping>
}
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b086      	sub	sp, #24
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	60b9      	str	r1, [r7, #8]
 8001ba8:	607a      	str	r2, [r7, #4]
 8001baa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bac:	2300      	movs	r3, #0
 8001bae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bb0:	f7ff ff3e 	bl	8001a30 <__NVIC_GetPriorityGrouping>
 8001bb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	68b9      	ldr	r1, [r7, #8]
 8001bba:	6978      	ldr	r0, [r7, #20]
 8001bbc:	f7ff ff8e 	bl	8001adc <NVIC_EncodePriority>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bc6:	4611      	mov	r1, r2
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff ff5d 	bl	8001a88 <__NVIC_SetPriority>
}
 8001bce:	bf00      	nop
 8001bd0:	3718      	adds	r7, #24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b082      	sub	sp, #8
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	4603      	mov	r3, r0
 8001bde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff ff31 	bl	8001a4c <__NVIC_EnableIRQ>
}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7ff ffa2 	bl	8001b44 <SysTick_Config>
 8001c00:	4603      	mov	r3, r0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
	...

08001c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b087      	sub	sp, #28
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c16:	2300      	movs	r3, #0
 8001c18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c1a:	e154      	b.n	8001ec6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	2101      	movs	r1, #1
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	fa01 f303 	lsl.w	r3, r1, r3
 8001c28:	4013      	ands	r3, r2
 8001c2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f000 8146 	beq.w	8001ec0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 0303 	and.w	r3, r3, #3
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d005      	beq.n	8001c4c <HAL_GPIO_Init+0x40>
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 0303 	and.w	r3, r3, #3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d130      	bne.n	8001cae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	2203      	movs	r2, #3
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	4013      	ands	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	68da      	ldr	r2, [r3, #12]
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c82:	2201      	movs	r2, #1
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	091b      	lsrs	r3, r3, #4
 8001c98:	f003 0201 	and.w	r2, r3, #1
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f003 0303 	and.w	r3, r3, #3
 8001cb6:	2b03      	cmp	r3, #3
 8001cb8:	d017      	beq.n	8001cea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	2203      	movs	r2, #3
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	689a      	ldr	r2, [r3, #8]
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d123      	bne.n	8001d3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	08da      	lsrs	r2, r3, #3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	3208      	adds	r2, #8
 8001cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	220f      	movs	r2, #15
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	43db      	mvns	r3, r3
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	4013      	ands	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	691a      	ldr	r2, [r3, #16]
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	08da      	lsrs	r2, r3, #3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3208      	adds	r2, #8
 8001d38:	6939      	ldr	r1, [r7, #16]
 8001d3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	2203      	movs	r2, #3
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	4013      	ands	r3, r2
 8001d54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 0203 	and.w	r2, r3, #3
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f000 80a0 	beq.w	8001ec0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d80:	4b58      	ldr	r3, [pc, #352]	; (8001ee4 <HAL_GPIO_Init+0x2d8>)
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	4a57      	ldr	r2, [pc, #348]	; (8001ee4 <HAL_GPIO_Init+0x2d8>)
 8001d86:	f043 0301 	orr.w	r3, r3, #1
 8001d8a:	6193      	str	r3, [r2, #24]
 8001d8c:	4b55      	ldr	r3, [pc, #340]	; (8001ee4 <HAL_GPIO_Init+0x2d8>)
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	60bb      	str	r3, [r7, #8]
 8001d96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d98:	4a53      	ldr	r2, [pc, #332]	; (8001ee8 <HAL_GPIO_Init+0x2dc>)
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	089b      	lsrs	r3, r3, #2
 8001d9e:	3302      	adds	r3, #2
 8001da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	f003 0303 	and.w	r3, r3, #3
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	220f      	movs	r2, #15
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	43db      	mvns	r3, r3
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	4013      	ands	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001dc2:	d019      	beq.n	8001df8 <HAL_GPIO_Init+0x1ec>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a49      	ldr	r2, [pc, #292]	; (8001eec <HAL_GPIO_Init+0x2e0>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d013      	beq.n	8001df4 <HAL_GPIO_Init+0x1e8>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a48      	ldr	r2, [pc, #288]	; (8001ef0 <HAL_GPIO_Init+0x2e4>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d00d      	beq.n	8001df0 <HAL_GPIO_Init+0x1e4>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a47      	ldr	r2, [pc, #284]	; (8001ef4 <HAL_GPIO_Init+0x2e8>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d007      	beq.n	8001dec <HAL_GPIO_Init+0x1e0>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a46      	ldr	r2, [pc, #280]	; (8001ef8 <HAL_GPIO_Init+0x2ec>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d101      	bne.n	8001de8 <HAL_GPIO_Init+0x1dc>
 8001de4:	2304      	movs	r3, #4
 8001de6:	e008      	b.n	8001dfa <HAL_GPIO_Init+0x1ee>
 8001de8:	2305      	movs	r3, #5
 8001dea:	e006      	b.n	8001dfa <HAL_GPIO_Init+0x1ee>
 8001dec:	2303      	movs	r3, #3
 8001dee:	e004      	b.n	8001dfa <HAL_GPIO_Init+0x1ee>
 8001df0:	2302      	movs	r3, #2
 8001df2:	e002      	b.n	8001dfa <HAL_GPIO_Init+0x1ee>
 8001df4:	2301      	movs	r3, #1
 8001df6:	e000      	b.n	8001dfa <HAL_GPIO_Init+0x1ee>
 8001df8:	2300      	movs	r3, #0
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	f002 0203 	and.w	r2, r2, #3
 8001e00:	0092      	lsls	r2, r2, #2
 8001e02:	4093      	lsls	r3, r2
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e0a:	4937      	ldr	r1, [pc, #220]	; (8001ee8 <HAL_GPIO_Init+0x2dc>)
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	089b      	lsrs	r3, r3, #2
 8001e10:	3302      	adds	r3, #2
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e18:	4b38      	ldr	r3, [pc, #224]	; (8001efc <HAL_GPIO_Init+0x2f0>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	43db      	mvns	r3, r3
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	4013      	ands	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001e3c:	4a2f      	ldr	r2, [pc, #188]	; (8001efc <HAL_GPIO_Init+0x2f0>)
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e42:	4b2e      	ldr	r3, [pc, #184]	; (8001efc <HAL_GPIO_Init+0x2f0>)
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e66:	4a25      	ldr	r2, [pc, #148]	; (8001efc <HAL_GPIO_Init+0x2f0>)
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e6c:	4b23      	ldr	r3, [pc, #140]	; (8001efc <HAL_GPIO_Init+0x2f0>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	43db      	mvns	r3, r3
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d003      	beq.n	8001e90 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e90:	4a1a      	ldr	r2, [pc, #104]	; (8001efc <HAL_GPIO_Init+0x2f0>)
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e96:	4b19      	ldr	r3, [pc, #100]	; (8001efc <HAL_GPIO_Init+0x2f0>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001eba:	4a10      	ldr	r2, [pc, #64]	; (8001efc <HAL_GPIO_Init+0x2f0>)
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f47f aea3 	bne.w	8001c1c <HAL_GPIO_Init+0x10>
  }
}
 8001ed6:	bf00      	nop
 8001ed8:	bf00      	nop
 8001eda:	371c      	adds	r7, #28
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	40010000 	.word	0x40010000
 8001eec:	48000400 	.word	0x48000400
 8001ef0:	48000800 	.word	0x48000800
 8001ef4:	48000c00 	.word	0x48000c00
 8001ef8:	48001000 	.word	0x48001000
 8001efc:	40010400 	.word	0x40010400

08001f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	807b      	strh	r3, [r7, #2]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f10:	787b      	ldrb	r3, [r7, #1]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f16:	887a      	ldrh	r2, [r7, #2]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f1c:	e002      	b.n	8001f24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f1e:	887a      	ldrh	r2, [r7, #2]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e081      	b.n	8002046 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d106      	bne.n	8001f5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7fe fd14 	bl	8000984 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2224      	movs	r2, #36	; 0x24
 8001f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 0201 	bic.w	r2, r2, #1
 8001f72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f80:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f90:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d107      	bne.n	8001faa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	e006      	b.n	8001fb8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689a      	ldr	r2, [r3, #8]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001fb6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d104      	bne.n	8001fca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fc8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	6812      	ldr	r2, [r2, #0]
 8001fd4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fdc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68da      	ldr	r2, [r3, #12]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	691a      	ldr	r2, [r3, #16]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	430a      	orrs	r2, r1
 8002006:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	69d9      	ldr	r1, [r3, #28]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a1a      	ldr	r2, [r3, #32]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	430a      	orrs	r2, r1
 8002016:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f042 0201 	orr.w	r2, r2, #1
 8002026:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2220      	movs	r2, #32
 8002032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
 8002056:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b20      	cmp	r3, #32
 8002062:	d138      	bne.n	80020d6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800206a:	2b01      	cmp	r3, #1
 800206c:	d101      	bne.n	8002072 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800206e:	2302      	movs	r3, #2
 8002070:	e032      	b.n	80020d8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2224      	movs	r2, #36	; 0x24
 800207e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 0201 	bic.w	r2, r2, #1
 8002090:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80020a0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6819      	ldr	r1, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	430a      	orrs	r2, r1
 80020b0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f042 0201 	orr.w	r2, r2, #1
 80020c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2220      	movs	r2, #32
 80020c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020d2:	2300      	movs	r3, #0
 80020d4:	e000      	b.n	80020d8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80020d6:	2302      	movs	r3, #2
  }
}
 80020d8:	4618      	mov	r0, r3
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b20      	cmp	r3, #32
 80020f8:	d139      	bne.n	800216e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002100:	2b01      	cmp	r3, #1
 8002102:	d101      	bne.n	8002108 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002104:	2302      	movs	r3, #2
 8002106:	e033      	b.n	8002170 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2224      	movs	r2, #36	; 0x24
 8002114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f022 0201 	bic.w	r2, r2, #1
 8002126:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002136:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	021b      	lsls	r3, r3, #8
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	4313      	orrs	r3, r2
 8002140:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f042 0201 	orr.w	r2, r2, #1
 8002158:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2220      	movs	r2, #32
 800215e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800216a:	2300      	movs	r3, #0
 800216c:	e000      	b.n	8002170 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800216e:	2302      	movs	r3, #2
  }
}
 8002170:	4618      	mov	r0, r3
 8002172:	3714      	adds	r7, #20
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800217c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800217e:	b08b      	sub	sp, #44	; 0x2c
 8002180:	af06      	add	r7, sp, #24
 8002182:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e0c4      	b.n	8002318 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d106      	bne.n	80021a8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7fe fc74 	bl	8000a90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2203      	movs	r2, #3
 80021ac:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f001 fd32 	bl	8003c1e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021ba:	2300      	movs	r3, #0
 80021bc:	73fb      	strb	r3, [r7, #15]
 80021be:	e040      	b.n	8002242 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80021c0:	7bfb      	ldrb	r3, [r7, #15]
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	1c5a      	adds	r2, r3, #1
 80021c6:	4613      	mov	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	440b      	add	r3, r1
 80021d0:	3301      	adds	r3, #1
 80021d2:	2201      	movs	r2, #1
 80021d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80021d6:	7bfb      	ldrb	r3, [r7, #15]
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	1c5a      	adds	r2, r3, #1
 80021dc:	4613      	mov	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	440b      	add	r3, r1
 80021e6:	7bfa      	ldrb	r2, [r7, #15]
 80021e8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021ea:	7bfb      	ldrb	r3, [r7, #15]
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	1c5a      	adds	r2, r3, #1
 80021f0:	4613      	mov	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	440b      	add	r3, r1
 80021fa:	3303      	adds	r3, #3
 80021fc:	2200      	movs	r2, #0
 80021fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002200:	7bfa      	ldrb	r2, [r7, #15]
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	4613      	mov	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4413      	add	r3, r2
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	440b      	add	r3, r1
 800220e:	3338      	adds	r3, #56	; 0x38
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002214:	7bfa      	ldrb	r2, [r7, #15]
 8002216:	6879      	ldr	r1, [r7, #4]
 8002218:	4613      	mov	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	440b      	add	r3, r1
 8002222:	333c      	adds	r3, #60	; 0x3c
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002228:	7bfa      	ldrb	r2, [r7, #15]
 800222a:	6879      	ldr	r1, [r7, #4]
 800222c:	4613      	mov	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	440b      	add	r3, r1
 8002236:	3340      	adds	r3, #64	; 0x40
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800223c:	7bfb      	ldrb	r3, [r7, #15]
 800223e:	3301      	adds	r3, #1
 8002240:	73fb      	strb	r3, [r7, #15]
 8002242:	7bfa      	ldrb	r2, [r7, #15]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	429a      	cmp	r2, r3
 800224a:	d3b9      	bcc.n	80021c0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800224c:	2300      	movs	r3, #0
 800224e:	73fb      	strb	r3, [r7, #15]
 8002250:	e044      	b.n	80022dc <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002252:	7bfa      	ldrb	r2, [r7, #15]
 8002254:	6879      	ldr	r1, [r7, #4]
 8002256:	4613      	mov	r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	4413      	add	r3, r2
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	440b      	add	r3, r1
 8002260:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002264:	2200      	movs	r2, #0
 8002266:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002268:	7bfa      	ldrb	r2, [r7, #15]
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	4613      	mov	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	440b      	add	r3, r1
 8002276:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800227a:	7bfa      	ldrb	r2, [r7, #15]
 800227c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800227e:	7bfa      	ldrb	r2, [r7, #15]
 8002280:	6879      	ldr	r1, [r7, #4]
 8002282:	4613      	mov	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	440b      	add	r3, r1
 800228c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002290:	2200      	movs	r2, #0
 8002292:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002294:	7bfa      	ldrb	r2, [r7, #15]
 8002296:	6879      	ldr	r1, [r7, #4]
 8002298:	4613      	mov	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4413      	add	r3, r2
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	440b      	add	r3, r1
 80022a2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80022aa:	7bfa      	ldrb	r2, [r7, #15]
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	4613      	mov	r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	4413      	add	r3, r2
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	440b      	add	r3, r1
 80022b8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80022c0:	7bfa      	ldrb	r2, [r7, #15]
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	4613      	mov	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	4413      	add	r3, r2
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	440b      	add	r3, r1
 80022ce:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
 80022d8:	3301      	adds	r3, #1
 80022da:	73fb      	strb	r3, [r7, #15]
 80022dc:	7bfa      	ldrb	r2, [r7, #15]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d3b5      	bcc.n	8002252 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	603b      	str	r3, [r7, #0]
 80022ec:	687e      	ldr	r6, [r7, #4]
 80022ee:	466d      	mov	r5, sp
 80022f0:	f106 0410 	add.w	r4, r6, #16
 80022f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022f8:	6823      	ldr	r3, [r4, #0]
 80022fa:	602b      	str	r3, [r5, #0]
 80022fc:	1d33      	adds	r3, r6, #4
 80022fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002300:	6838      	ldr	r0, [r7, #0]
 8002302:	f001 fca7 	bl	8003c54 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2201      	movs	r2, #1
 8002312:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3714      	adds	r7, #20
 800231c:	46bd      	mov	sp, r7
 800231e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002320 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002326:	af00      	add	r7, sp, #0
 8002328:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800232c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002330:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002332:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002336:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d102      	bne.n	8002346 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	f001 b823 	b.w	800338c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002346:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800234a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	f000 817d 	beq.w	8002656 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800235c:	4bbc      	ldr	r3, [pc, #752]	; (8002650 <HAL_RCC_OscConfig+0x330>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 030c 	and.w	r3, r3, #12
 8002364:	2b04      	cmp	r3, #4
 8002366:	d00c      	beq.n	8002382 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002368:	4bb9      	ldr	r3, [pc, #740]	; (8002650 <HAL_RCC_OscConfig+0x330>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f003 030c 	and.w	r3, r3, #12
 8002370:	2b08      	cmp	r3, #8
 8002372:	d15c      	bne.n	800242e <HAL_RCC_OscConfig+0x10e>
 8002374:	4bb6      	ldr	r3, [pc, #728]	; (8002650 <HAL_RCC_OscConfig+0x330>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800237c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002380:	d155      	bne.n	800242e <HAL_RCC_OscConfig+0x10e>
 8002382:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002386:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800238e:	fa93 f3a3 	rbit	r3, r3
 8002392:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002396:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800239a:	fab3 f383 	clz	r3, r3
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	095b      	lsrs	r3, r3, #5
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	f043 0301 	orr.w	r3, r3, #1
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d102      	bne.n	80023b4 <HAL_RCC_OscConfig+0x94>
 80023ae:	4ba8      	ldr	r3, [pc, #672]	; (8002650 <HAL_RCC_OscConfig+0x330>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	e015      	b.n	80023e0 <HAL_RCC_OscConfig+0xc0>
 80023b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023b8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023bc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80023c0:	fa93 f3a3 	rbit	r3, r3
 80023c4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80023c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023cc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80023d0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80023d4:	fa93 f3a3 	rbit	r3, r3
 80023d8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80023dc:	4b9c      	ldr	r3, [pc, #624]	; (8002650 <HAL_RCC_OscConfig+0x330>)
 80023de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023e4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80023e8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80023ec:	fa92 f2a2 	rbit	r2, r2
 80023f0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80023f4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80023f8:	fab2 f282 	clz	r2, r2
 80023fc:	b2d2      	uxtb	r2, r2
 80023fe:	f042 0220 	orr.w	r2, r2, #32
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	f002 021f 	and.w	r2, r2, #31
 8002408:	2101      	movs	r1, #1
 800240a:	fa01 f202 	lsl.w	r2, r1, r2
 800240e:	4013      	ands	r3, r2
 8002410:	2b00      	cmp	r3, #0
 8002412:	f000 811f 	beq.w	8002654 <HAL_RCC_OscConfig+0x334>
 8002416:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800241a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	f040 8116 	bne.w	8002654 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	f000 bfaf 	b.w	800338c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800242e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002432:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800243e:	d106      	bne.n	800244e <HAL_RCC_OscConfig+0x12e>
 8002440:	4b83      	ldr	r3, [pc, #524]	; (8002650 <HAL_RCC_OscConfig+0x330>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a82      	ldr	r2, [pc, #520]	; (8002650 <HAL_RCC_OscConfig+0x330>)
 8002446:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800244a:	6013      	str	r3, [r2, #0]
 800244c:	e036      	b.n	80024bc <HAL_RCC_OscConfig+0x19c>
 800244e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002452:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10c      	bne.n	8002478 <HAL_RCC_OscConfig+0x158>
 800245e:	4b7c      	ldr	r3, [pc, #496]	; (8002650 <HAL_RCC_OscConfig+0x330>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a7b      	ldr	r2, [pc, #492]	; (8002650 <HAL_RCC_OscConfig+0x330>)
 8002464:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	4b79      	ldr	r3, [pc, #484]	; (8002650 <HAL_RCC_OscConfig+0x330>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a78      	ldr	r2, [pc, #480]	; (8002650 <HAL_RCC_OscConfig+0x330>)
 8002470:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	e021      	b.n	80024bc <HAL_RCC_OscConfig+0x19c>
 8002478:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800247c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002488:	d10c      	bne.n	80024a4 <HAL_RCC_OscConfig+0x184>
 800248a:	4b71      	ldr	r3, [pc, #452]	; (8002650 <HAL_RCC_OscConfig+0x330>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a70      	ldr	r2, [pc, #448]	; (8002650 <HAL_RCC_OscConfig+0x330>)
 8002490:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002494:	6013      	str	r3, [r2, #0]
 8002496:	4b6e      	ldr	r3, [pc, #440]	; (8002650 <HAL_RCC_OscConfig+0x330>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a6d      	ldr	r2, [pc, #436]	; (8002650 <HAL_RCC_OscConfig+0x330>)
 800249c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	e00b      	b.n	80024bc <HAL_RCC_OscConfig+0x19c>
 80024a4:	4b6a      	ldr	r3, [pc, #424]	; (8002650 <HAL_RCC_OscConfig+0x330>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a69      	ldr	r2, [pc, #420]	; (8002650 <HAL_RCC_OscConfig+0x330>)
 80024aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ae:	6013      	str	r3, [r2, #0]
 80024b0:	4b67      	ldr	r3, [pc, #412]	; (8002650 <HAL_RCC_OscConfig+0x330>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a66      	ldr	r2, [pc, #408]	; (8002650 <HAL_RCC_OscConfig+0x330>)
 80024b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ba:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024bc:	4b64      	ldr	r3, [pc, #400]	; (8002650 <HAL_RCC_OscConfig+0x330>)
 80024be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c0:	f023 020f 	bic.w	r2, r3, #15
 80024c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	495f      	ldr	r1, [pc, #380]	; (8002650 <HAL_RCC_OscConfig+0x330>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d059      	beq.n	800259a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e6:	f7fe fbf5 	bl	8000cd4 <HAL_GetTick>
 80024ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ee:	e00a      	b.n	8002506 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024f0:	f7fe fbf0 	bl	8000cd4 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b64      	cmp	r3, #100	; 0x64
 80024fe:	d902      	bls.n	8002506 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	f000 bf43 	b.w	800338c <HAL_RCC_OscConfig+0x106c>
 8002506:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800250a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002512:	fa93 f3a3 	rbit	r3, r3
 8002516:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800251a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800251e:	fab3 f383 	clz	r3, r3
 8002522:	b2db      	uxtb	r3, r3
 8002524:	095b      	lsrs	r3, r3, #5
 8002526:	b2db      	uxtb	r3, r3
 8002528:	f043 0301 	orr.w	r3, r3, #1
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b01      	cmp	r3, #1
 8002530:	d102      	bne.n	8002538 <HAL_RCC_OscConfig+0x218>
 8002532:	4b47      	ldr	r3, [pc, #284]	; (8002650 <HAL_RCC_OscConfig+0x330>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	e015      	b.n	8002564 <HAL_RCC_OscConfig+0x244>
 8002538:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800253c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002540:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002544:	fa93 f3a3 	rbit	r3, r3
 8002548:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800254c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002550:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002554:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002558:	fa93 f3a3 	rbit	r3, r3
 800255c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002560:	4b3b      	ldr	r3, [pc, #236]	; (8002650 <HAL_RCC_OscConfig+0x330>)
 8002562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002564:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002568:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800256c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002570:	fa92 f2a2 	rbit	r2, r2
 8002574:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002578:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800257c:	fab2 f282 	clz	r2, r2
 8002580:	b2d2      	uxtb	r2, r2
 8002582:	f042 0220 	orr.w	r2, r2, #32
 8002586:	b2d2      	uxtb	r2, r2
 8002588:	f002 021f 	and.w	r2, r2, #31
 800258c:	2101      	movs	r1, #1
 800258e:	fa01 f202 	lsl.w	r2, r1, r2
 8002592:	4013      	ands	r3, r2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d0ab      	beq.n	80024f0 <HAL_RCC_OscConfig+0x1d0>
 8002598:	e05d      	b.n	8002656 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259a:	f7fe fb9b 	bl	8000cd4 <HAL_GetTick>
 800259e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025a2:	e00a      	b.n	80025ba <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025a4:	f7fe fb96 	bl	8000cd4 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b64      	cmp	r3, #100	; 0x64
 80025b2:	d902      	bls.n	80025ba <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	f000 bee9 	b.w	800338c <HAL_RCC_OscConfig+0x106c>
 80025ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025be:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80025c6:	fa93 f3a3 	rbit	r3, r3
 80025ca:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80025ce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025d2:	fab3 f383 	clz	r3, r3
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	095b      	lsrs	r3, r3, #5
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	f043 0301 	orr.w	r3, r3, #1
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d102      	bne.n	80025ec <HAL_RCC_OscConfig+0x2cc>
 80025e6:	4b1a      	ldr	r3, [pc, #104]	; (8002650 <HAL_RCC_OscConfig+0x330>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	e015      	b.n	8002618 <HAL_RCC_OscConfig+0x2f8>
 80025ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025f0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80025f8:	fa93 f3a3 	rbit	r3, r3
 80025fc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002600:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002604:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002608:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800260c:	fa93 f3a3 	rbit	r3, r3
 8002610:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002614:	4b0e      	ldr	r3, [pc, #56]	; (8002650 <HAL_RCC_OscConfig+0x330>)
 8002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002618:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800261c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002620:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002624:	fa92 f2a2 	rbit	r2, r2
 8002628:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800262c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002630:	fab2 f282 	clz	r2, r2
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	f042 0220 	orr.w	r2, r2, #32
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	f002 021f 	and.w	r2, r2, #31
 8002640:	2101      	movs	r1, #1
 8002642:	fa01 f202 	lsl.w	r2, r1, r2
 8002646:	4013      	ands	r3, r2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1ab      	bne.n	80025a4 <HAL_RCC_OscConfig+0x284>
 800264c:	e003      	b.n	8002656 <HAL_RCC_OscConfig+0x336>
 800264e:	bf00      	nop
 8002650:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002654:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002656:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800265a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 817d 	beq.w	8002966 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800266c:	4ba6      	ldr	r3, [pc, #664]	; (8002908 <HAL_RCC_OscConfig+0x5e8>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f003 030c 	and.w	r3, r3, #12
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00b      	beq.n	8002690 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002678:	4ba3      	ldr	r3, [pc, #652]	; (8002908 <HAL_RCC_OscConfig+0x5e8>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 030c 	and.w	r3, r3, #12
 8002680:	2b08      	cmp	r3, #8
 8002682:	d172      	bne.n	800276a <HAL_RCC_OscConfig+0x44a>
 8002684:	4ba0      	ldr	r3, [pc, #640]	; (8002908 <HAL_RCC_OscConfig+0x5e8>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d16c      	bne.n	800276a <HAL_RCC_OscConfig+0x44a>
 8002690:	2302      	movs	r3, #2
 8002692:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002696:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800269a:	fa93 f3a3 	rbit	r3, r3
 800269e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80026a2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026a6:	fab3 f383 	clz	r3, r3
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	095b      	lsrs	r3, r3, #5
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	f043 0301 	orr.w	r3, r3, #1
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d102      	bne.n	80026c0 <HAL_RCC_OscConfig+0x3a0>
 80026ba:	4b93      	ldr	r3, [pc, #588]	; (8002908 <HAL_RCC_OscConfig+0x5e8>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	e013      	b.n	80026e8 <HAL_RCC_OscConfig+0x3c8>
 80026c0:	2302      	movs	r3, #2
 80026c2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80026ca:	fa93 f3a3 	rbit	r3, r3
 80026ce:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80026d2:	2302      	movs	r3, #2
 80026d4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80026d8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80026dc:	fa93 f3a3 	rbit	r3, r3
 80026e0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80026e4:	4b88      	ldr	r3, [pc, #544]	; (8002908 <HAL_RCC_OscConfig+0x5e8>)
 80026e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e8:	2202      	movs	r2, #2
 80026ea:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80026ee:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80026f2:	fa92 f2a2 	rbit	r2, r2
 80026f6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80026fa:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80026fe:	fab2 f282 	clz	r2, r2
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	f042 0220 	orr.w	r2, r2, #32
 8002708:	b2d2      	uxtb	r2, r2
 800270a:	f002 021f 	and.w	r2, r2, #31
 800270e:	2101      	movs	r1, #1
 8002710:	fa01 f202 	lsl.w	r2, r1, r2
 8002714:	4013      	ands	r3, r2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00a      	beq.n	8002730 <HAL_RCC_OscConfig+0x410>
 800271a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800271e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d002      	beq.n	8002730 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	f000 be2e 	b.w	800338c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002730:	4b75      	ldr	r3, [pc, #468]	; (8002908 <HAL_RCC_OscConfig+0x5e8>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002738:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800273c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	21f8      	movs	r1, #248	; 0xf8
 8002746:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800274e:	fa91 f1a1 	rbit	r1, r1
 8002752:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002756:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800275a:	fab1 f181 	clz	r1, r1
 800275e:	b2c9      	uxtb	r1, r1
 8002760:	408b      	lsls	r3, r1
 8002762:	4969      	ldr	r1, [pc, #420]	; (8002908 <HAL_RCC_OscConfig+0x5e8>)
 8002764:	4313      	orrs	r3, r2
 8002766:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002768:	e0fd      	b.n	8002966 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800276a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800276e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	2b00      	cmp	r3, #0
 8002778:	f000 8088 	beq.w	800288c <HAL_RCC_OscConfig+0x56c>
 800277c:	2301      	movs	r3, #1
 800277e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002782:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002786:	fa93 f3a3 	rbit	r3, r3
 800278a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800278e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002792:	fab3 f383 	clz	r3, r3
 8002796:	b2db      	uxtb	r3, r3
 8002798:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800279c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	461a      	mov	r2, r3
 80027a4:	2301      	movs	r3, #1
 80027a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a8:	f7fe fa94 	bl	8000cd4 <HAL_GetTick>
 80027ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b0:	e00a      	b.n	80027c8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027b2:	f7fe fa8f 	bl	8000cd4 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d902      	bls.n	80027c8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	f000 bde2 	b.w	800338c <HAL_RCC_OscConfig+0x106c>
 80027c8:	2302      	movs	r3, #2
 80027ca:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ce:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80027d2:	fa93 f3a3 	rbit	r3, r3
 80027d6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80027da:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027de:	fab3 f383 	clz	r3, r3
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	095b      	lsrs	r3, r3, #5
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	f043 0301 	orr.w	r3, r3, #1
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d102      	bne.n	80027f8 <HAL_RCC_OscConfig+0x4d8>
 80027f2:	4b45      	ldr	r3, [pc, #276]	; (8002908 <HAL_RCC_OscConfig+0x5e8>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	e013      	b.n	8002820 <HAL_RCC_OscConfig+0x500>
 80027f8:	2302      	movs	r3, #2
 80027fa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fe:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002802:	fa93 f3a3 	rbit	r3, r3
 8002806:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800280a:	2302      	movs	r3, #2
 800280c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002810:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002814:	fa93 f3a3 	rbit	r3, r3
 8002818:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800281c:	4b3a      	ldr	r3, [pc, #232]	; (8002908 <HAL_RCC_OscConfig+0x5e8>)
 800281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002820:	2202      	movs	r2, #2
 8002822:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002826:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800282a:	fa92 f2a2 	rbit	r2, r2
 800282e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002832:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002836:	fab2 f282 	clz	r2, r2
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	f042 0220 	orr.w	r2, r2, #32
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	f002 021f 	and.w	r2, r2, #31
 8002846:	2101      	movs	r1, #1
 8002848:	fa01 f202 	lsl.w	r2, r1, r2
 800284c:	4013      	ands	r3, r2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d0af      	beq.n	80027b2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002852:	4b2d      	ldr	r3, [pc, #180]	; (8002908 <HAL_RCC_OscConfig+0x5e8>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800285a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800285e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	21f8      	movs	r1, #248	; 0xf8
 8002868:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002870:	fa91 f1a1 	rbit	r1, r1
 8002874:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002878:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800287c:	fab1 f181 	clz	r1, r1
 8002880:	b2c9      	uxtb	r1, r1
 8002882:	408b      	lsls	r3, r1
 8002884:	4920      	ldr	r1, [pc, #128]	; (8002908 <HAL_RCC_OscConfig+0x5e8>)
 8002886:	4313      	orrs	r3, r2
 8002888:	600b      	str	r3, [r1, #0]
 800288a:	e06c      	b.n	8002966 <HAL_RCC_OscConfig+0x646>
 800288c:	2301      	movs	r3, #1
 800288e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002892:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002896:	fa93 f3a3 	rbit	r3, r3
 800289a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800289e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028a2:	fab3 f383 	clz	r3, r3
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	461a      	mov	r2, r3
 80028b4:	2300      	movs	r3, #0
 80028b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b8:	f7fe fa0c 	bl	8000cd4 <HAL_GetTick>
 80028bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028c0:	e00a      	b.n	80028d8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028c2:	f7fe fa07 	bl	8000cd4 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d902      	bls.n	80028d8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	f000 bd5a 	b.w	800338c <HAL_RCC_OscConfig+0x106c>
 80028d8:	2302      	movs	r3, #2
 80028da:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028de:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80028e2:	fa93 f3a3 	rbit	r3, r3
 80028e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80028ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ee:	fab3 f383 	clz	r3, r3
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	095b      	lsrs	r3, r3, #5
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d104      	bne.n	800290c <HAL_RCC_OscConfig+0x5ec>
 8002902:	4b01      	ldr	r3, [pc, #4]	; (8002908 <HAL_RCC_OscConfig+0x5e8>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	e015      	b.n	8002934 <HAL_RCC_OscConfig+0x614>
 8002908:	40021000 	.word	0x40021000
 800290c:	2302      	movs	r3, #2
 800290e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002912:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002916:	fa93 f3a3 	rbit	r3, r3
 800291a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800291e:	2302      	movs	r3, #2
 8002920:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002924:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002928:	fa93 f3a3 	rbit	r3, r3
 800292c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002930:	4bc8      	ldr	r3, [pc, #800]	; (8002c54 <HAL_RCC_OscConfig+0x934>)
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	2202      	movs	r2, #2
 8002936:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800293a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800293e:	fa92 f2a2 	rbit	r2, r2
 8002942:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002946:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800294a:	fab2 f282 	clz	r2, r2
 800294e:	b2d2      	uxtb	r2, r2
 8002950:	f042 0220 	orr.w	r2, r2, #32
 8002954:	b2d2      	uxtb	r2, r2
 8002956:	f002 021f 	and.w	r2, r2, #31
 800295a:	2101      	movs	r1, #1
 800295c:	fa01 f202 	lsl.w	r2, r1, r2
 8002960:	4013      	ands	r3, r2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1ad      	bne.n	80028c2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002966:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800296a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0308 	and.w	r3, r3, #8
 8002976:	2b00      	cmp	r3, #0
 8002978:	f000 8110 	beq.w	8002b9c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800297c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002980:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d079      	beq.n	8002a80 <HAL_RCC_OscConfig+0x760>
 800298c:	2301      	movs	r3, #1
 800298e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002992:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002996:	fa93 f3a3 	rbit	r3, r3
 800299a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800299e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029a2:	fab3 f383 	clz	r3, r3
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	461a      	mov	r2, r3
 80029aa:	4bab      	ldr	r3, [pc, #684]	; (8002c58 <HAL_RCC_OscConfig+0x938>)
 80029ac:	4413      	add	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	461a      	mov	r2, r3
 80029b2:	2301      	movs	r3, #1
 80029b4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b6:	f7fe f98d 	bl	8000cd4 <HAL_GetTick>
 80029ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029be:	e00a      	b.n	80029d6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029c0:	f7fe f988 	bl	8000cd4 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d902      	bls.n	80029d6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	f000 bcdb 	b.w	800338c <HAL_RCC_OscConfig+0x106c>
 80029d6:	2302      	movs	r3, #2
 80029d8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80029e0:	fa93 f3a3 	rbit	r3, r3
 80029e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80029e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ec:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80029f0:	2202      	movs	r2, #2
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	fa93 f2a3 	rbit	r2, r3
 8002a02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002a14:	2202      	movs	r2, #2
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	fa93 f2a3 	rbit	r2, r3
 8002a26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a2a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002a2e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a30:	4b88      	ldr	r3, [pc, #544]	; (8002c54 <HAL_RCC_OscConfig+0x934>)
 8002a32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a38:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002a3c:	2102      	movs	r1, #2
 8002a3e:	6019      	str	r1, [r3, #0]
 8002a40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a44:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	fa93 f1a3 	rbit	r1, r3
 8002a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a52:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002a56:	6019      	str	r1, [r3, #0]
  return result;
 8002a58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a5c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	fab3 f383 	clz	r3, r3
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	f003 031f 	and.w	r3, r3, #31
 8002a72:	2101      	movs	r1, #1
 8002a74:	fa01 f303 	lsl.w	r3, r1, r3
 8002a78:	4013      	ands	r3, r2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d0a0      	beq.n	80029c0 <HAL_RCC_OscConfig+0x6a0>
 8002a7e:	e08d      	b.n	8002b9c <HAL_RCC_OscConfig+0x87c>
 8002a80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a84:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002a88:	2201      	movs	r2, #1
 8002a8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a90:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	fa93 f2a3 	rbit	r2, r3
 8002a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a9e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002aa2:	601a      	str	r2, [r3, #0]
  return result;
 8002aa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002aac:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aae:	fab3 f383 	clz	r3, r3
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	4b68      	ldr	r3, [pc, #416]	; (8002c58 <HAL_RCC_OscConfig+0x938>)
 8002ab8:	4413      	add	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	461a      	mov	r2, r3
 8002abe:	2300      	movs	r3, #0
 8002ac0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ac2:	f7fe f907 	bl	8000cd4 <HAL_GetTick>
 8002ac6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aca:	e00a      	b.n	8002ae2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002acc:	f7fe f902 	bl	8000cd4 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d902      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	f000 bc55 	b.w	800338c <HAL_RCC_OscConfig+0x106c>
 8002ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002aea:	2202      	movs	r2, #2
 8002aec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	fa93 f2a3 	rbit	r2, r3
 8002afc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b00:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b0a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002b0e:	2202      	movs	r2, #2
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b16:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	fa93 f2a3 	rbit	r2, r3
 8002b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002b28:	601a      	str	r2, [r3, #0]
 8002b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002b32:	2202      	movs	r2, #2
 8002b34:	601a      	str	r2, [r3, #0]
 8002b36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	fa93 f2a3 	rbit	r2, r3
 8002b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b48:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002b4c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b4e:	4b41      	ldr	r3, [pc, #260]	; (8002c54 <HAL_RCC_OscConfig+0x934>)
 8002b50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b56:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002b5a:	2102      	movs	r1, #2
 8002b5c:	6019      	str	r1, [r3, #0]
 8002b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b62:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	fa93 f1a3 	rbit	r1, r3
 8002b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b70:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002b74:	6019      	str	r1, [r3, #0]
  return result;
 8002b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	fab3 f383 	clz	r3, r3
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	f003 031f 	and.w	r3, r3, #31
 8002b90:	2101      	movs	r1, #1
 8002b92:	fa01 f303 	lsl.w	r3, r1, r3
 8002b96:	4013      	ands	r3, r2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d197      	bne.n	8002acc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0304 	and.w	r3, r3, #4
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f000 81a1 	beq.w	8002ef4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bb8:	4b26      	ldr	r3, [pc, #152]	; (8002c54 <HAL_RCC_OscConfig+0x934>)
 8002bba:	69db      	ldr	r3, [r3, #28]
 8002bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d116      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bc4:	4b23      	ldr	r3, [pc, #140]	; (8002c54 <HAL_RCC_OscConfig+0x934>)
 8002bc6:	69db      	ldr	r3, [r3, #28]
 8002bc8:	4a22      	ldr	r2, [pc, #136]	; (8002c54 <HAL_RCC_OscConfig+0x934>)
 8002bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bce:	61d3      	str	r3, [r2, #28]
 8002bd0:	4b20      	ldr	r3, [pc, #128]	; (8002c54 <HAL_RCC_OscConfig+0x934>)
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002bd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bdc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002bea:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002bec:	2301      	movs	r3, #1
 8002bee:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf2:	4b1a      	ldr	r3, [pc, #104]	; (8002c5c <HAL_RCC_OscConfig+0x93c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d11a      	bne.n	8002c34 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bfe:	4b17      	ldr	r3, [pc, #92]	; (8002c5c <HAL_RCC_OscConfig+0x93c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a16      	ldr	r2, [pc, #88]	; (8002c5c <HAL_RCC_OscConfig+0x93c>)
 8002c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c08:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c0a:	f7fe f863 	bl	8000cd4 <HAL_GetTick>
 8002c0e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c12:	e009      	b.n	8002c28 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c14:	f7fe f85e 	bl	8000cd4 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b64      	cmp	r3, #100	; 0x64
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e3b1      	b.n	800338c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c28:	4b0c      	ldr	r3, [pc, #48]	; (8002c5c <HAL_RCC_OscConfig+0x93c>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0ef      	beq.n	8002c14 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d10d      	bne.n	8002c60 <HAL_RCC_OscConfig+0x940>
 8002c44:	4b03      	ldr	r3, [pc, #12]	; (8002c54 <HAL_RCC_OscConfig+0x934>)
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	4a02      	ldr	r2, [pc, #8]	; (8002c54 <HAL_RCC_OscConfig+0x934>)
 8002c4a:	f043 0301 	orr.w	r3, r3, #1
 8002c4e:	6213      	str	r3, [r2, #32]
 8002c50:	e03c      	b.n	8002ccc <HAL_RCC_OscConfig+0x9ac>
 8002c52:	bf00      	nop
 8002c54:	40021000 	.word	0x40021000
 8002c58:	10908120 	.word	0x10908120
 8002c5c:	40007000 	.word	0x40007000
 8002c60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d10c      	bne.n	8002c8a <HAL_RCC_OscConfig+0x96a>
 8002c70:	4bc1      	ldr	r3, [pc, #772]	; (8002f78 <HAL_RCC_OscConfig+0xc58>)
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	4ac0      	ldr	r2, [pc, #768]	; (8002f78 <HAL_RCC_OscConfig+0xc58>)
 8002c76:	f023 0301 	bic.w	r3, r3, #1
 8002c7a:	6213      	str	r3, [r2, #32]
 8002c7c:	4bbe      	ldr	r3, [pc, #760]	; (8002f78 <HAL_RCC_OscConfig+0xc58>)
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	4abd      	ldr	r2, [pc, #756]	; (8002f78 <HAL_RCC_OscConfig+0xc58>)
 8002c82:	f023 0304 	bic.w	r3, r3, #4
 8002c86:	6213      	str	r3, [r2, #32]
 8002c88:	e020      	b.n	8002ccc <HAL_RCC_OscConfig+0x9ac>
 8002c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	2b05      	cmp	r3, #5
 8002c98:	d10c      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x994>
 8002c9a:	4bb7      	ldr	r3, [pc, #732]	; (8002f78 <HAL_RCC_OscConfig+0xc58>)
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	4ab6      	ldr	r2, [pc, #728]	; (8002f78 <HAL_RCC_OscConfig+0xc58>)
 8002ca0:	f043 0304 	orr.w	r3, r3, #4
 8002ca4:	6213      	str	r3, [r2, #32]
 8002ca6:	4bb4      	ldr	r3, [pc, #720]	; (8002f78 <HAL_RCC_OscConfig+0xc58>)
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	4ab3      	ldr	r2, [pc, #716]	; (8002f78 <HAL_RCC_OscConfig+0xc58>)
 8002cac:	f043 0301 	orr.w	r3, r3, #1
 8002cb0:	6213      	str	r3, [r2, #32]
 8002cb2:	e00b      	b.n	8002ccc <HAL_RCC_OscConfig+0x9ac>
 8002cb4:	4bb0      	ldr	r3, [pc, #704]	; (8002f78 <HAL_RCC_OscConfig+0xc58>)
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	4aaf      	ldr	r2, [pc, #700]	; (8002f78 <HAL_RCC_OscConfig+0xc58>)
 8002cba:	f023 0301 	bic.w	r3, r3, #1
 8002cbe:	6213      	str	r3, [r2, #32]
 8002cc0:	4bad      	ldr	r3, [pc, #692]	; (8002f78 <HAL_RCC_OscConfig+0xc58>)
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	4aac      	ldr	r2, [pc, #688]	; (8002f78 <HAL_RCC_OscConfig+0xc58>)
 8002cc6:	f023 0304 	bic.w	r3, r3, #4
 8002cca:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ccc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 8081 	beq.w	8002de0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cde:	f7fd fff9 	bl	8000cd4 <HAL_GetTick>
 8002ce2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ce6:	e00b      	b.n	8002d00 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ce8:	f7fd fff4 	bl	8000cd4 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e345      	b.n	800338c <HAL_RCC_OscConfig+0x106c>
 8002d00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d04:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002d08:	2202      	movs	r2, #2
 8002d0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d10:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	fa93 f2a3 	rbit	r2, r3
 8002d1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d1e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d28:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d34:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	fa93 f2a3 	rbit	r2, r3
 8002d3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d42:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002d46:	601a      	str	r2, [r3, #0]
  return result;
 8002d48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d4c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002d50:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d52:	fab3 f383 	clz	r3, r3
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	095b      	lsrs	r3, r3, #5
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	f043 0302 	orr.w	r3, r3, #2
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d102      	bne.n	8002d6c <HAL_RCC_OscConfig+0xa4c>
 8002d66:	4b84      	ldr	r3, [pc, #528]	; (8002f78 <HAL_RCC_OscConfig+0xc58>)
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	e013      	b.n	8002d94 <HAL_RCC_OscConfig+0xa74>
 8002d6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d70:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002d74:	2202      	movs	r2, #2
 8002d76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d7c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	fa93 f2a3 	rbit	r2, r3
 8002d86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d8a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	4b79      	ldr	r3, [pc, #484]	; (8002f78 <HAL_RCC_OscConfig+0xc58>)
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d94:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d98:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002d9c:	2102      	movs	r1, #2
 8002d9e:	6011      	str	r1, [r2, #0]
 8002da0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002da4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002da8:	6812      	ldr	r2, [r2, #0]
 8002daa:	fa92 f1a2 	rbit	r1, r2
 8002dae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002db2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002db6:	6011      	str	r1, [r2, #0]
  return result;
 8002db8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002dbc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002dc0:	6812      	ldr	r2, [r2, #0]
 8002dc2:	fab2 f282 	clz	r2, r2
 8002dc6:	b2d2      	uxtb	r2, r2
 8002dc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dcc:	b2d2      	uxtb	r2, r2
 8002dce:	f002 021f 	and.w	r2, r2, #31
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8002dd8:	4013      	ands	r3, r2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d084      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x9c8>
 8002dde:	e07f      	b.n	8002ee0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de0:	f7fd ff78 	bl	8000cd4 <HAL_GetTick>
 8002de4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002de8:	e00b      	b.n	8002e02 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dea:	f7fd ff73 	bl	8000cd4 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e2c4      	b.n	800338c <HAL_RCC_OscConfig+0x106c>
 8002e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e06:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e12:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	fa93 f2a3 	rbit	r2, r3
 8002e1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e20:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002e24:	601a      	str	r2, [r3, #0]
 8002e26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e2a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002e2e:	2202      	movs	r2, #2
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e36:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	fa93 f2a3 	rbit	r2, r3
 8002e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e44:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002e48:	601a      	str	r2, [r3, #0]
  return result;
 8002e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e4e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002e52:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e54:	fab3 f383 	clz	r3, r3
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	095b      	lsrs	r3, r3, #5
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	f043 0302 	orr.w	r3, r3, #2
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d102      	bne.n	8002e6e <HAL_RCC_OscConfig+0xb4e>
 8002e68:	4b43      	ldr	r3, [pc, #268]	; (8002f78 <HAL_RCC_OscConfig+0xc58>)
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	e013      	b.n	8002e96 <HAL_RCC_OscConfig+0xb76>
 8002e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e72:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002e76:	2202      	movs	r2, #2
 8002e78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e7e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	fa93 f2a3 	rbit	r2, r3
 8002e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e8c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002e90:	601a      	str	r2, [r3, #0]
 8002e92:	4b39      	ldr	r3, [pc, #228]	; (8002f78 <HAL_RCC_OscConfig+0xc58>)
 8002e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e9a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002e9e:	2102      	movs	r1, #2
 8002ea0:	6011      	str	r1, [r2, #0]
 8002ea2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ea6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002eaa:	6812      	ldr	r2, [r2, #0]
 8002eac:	fa92 f1a2 	rbit	r1, r2
 8002eb0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002eb4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002eb8:	6011      	str	r1, [r2, #0]
  return result;
 8002eba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ebe:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002ec2:	6812      	ldr	r2, [r2, #0]
 8002ec4:	fab2 f282 	clz	r2, r2
 8002ec8:	b2d2      	uxtb	r2, r2
 8002eca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ece:	b2d2      	uxtb	r2, r2
 8002ed0:	f002 021f 	and.w	r2, r2, #31
 8002ed4:	2101      	movs	r1, #1
 8002ed6:	fa01 f202 	lsl.w	r2, r1, r2
 8002eda:	4013      	ands	r3, r2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d184      	bne.n	8002dea <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ee0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d105      	bne.n	8002ef4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ee8:	4b23      	ldr	r3, [pc, #140]	; (8002f78 <HAL_RCC_OscConfig+0xc58>)
 8002eea:	69db      	ldr	r3, [r3, #28]
 8002eec:	4a22      	ldr	r2, [pc, #136]	; (8002f78 <HAL_RCC_OscConfig+0xc58>)
 8002eee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ef2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ef4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f000 8242 	beq.w	800338a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f06:	4b1c      	ldr	r3, [pc, #112]	; (8002f78 <HAL_RCC_OscConfig+0xc58>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f003 030c 	and.w	r3, r3, #12
 8002f0e:	2b08      	cmp	r3, #8
 8002f10:	f000 8213 	beq.w	800333a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f18:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	69db      	ldr	r3, [r3, #28]
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	f040 8162 	bne.w	80031ea <HAL_RCC_OscConfig+0xeca>
 8002f26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f2a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002f2e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f38:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	fa93 f2a3 	rbit	r2, r3
 8002f42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f46:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002f4a:	601a      	str	r2, [r3, #0]
  return result;
 8002f4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f50:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002f54:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f56:	fab3 f383 	clz	r3, r3
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f60:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	461a      	mov	r2, r3
 8002f68:	2300      	movs	r3, #0
 8002f6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6c:	f7fd feb2 	bl	8000cd4 <HAL_GetTick>
 8002f70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f74:	e00c      	b.n	8002f90 <HAL_RCC_OscConfig+0xc70>
 8002f76:	bf00      	nop
 8002f78:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f7c:	f7fd feaa 	bl	8000cd4 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e1fd      	b.n	800338c <HAL_RCC_OscConfig+0x106c>
 8002f90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f94:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002f98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	fa93 f2a3 	rbit	r2, r3
 8002fac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002fb4:	601a      	str	r2, [r3, #0]
  return result;
 8002fb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fba:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002fbe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fc0:	fab3 f383 	clz	r3, r3
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	095b      	lsrs	r3, r3, #5
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	f043 0301 	orr.w	r3, r3, #1
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d102      	bne.n	8002fda <HAL_RCC_OscConfig+0xcba>
 8002fd4:	4bb0      	ldr	r3, [pc, #704]	; (8003298 <HAL_RCC_OscConfig+0xf78>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	e027      	b.n	800302a <HAL_RCC_OscConfig+0xd0a>
 8002fda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fde:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002fe2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fe6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fec:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	fa93 f2a3 	rbit	r2, r3
 8002ff6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ffa:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003004:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003008:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800300c:	601a      	str	r2, [r3, #0]
 800300e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003012:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	fa93 f2a3 	rbit	r2, r3
 800301c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003020:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	4b9c      	ldr	r3, [pc, #624]	; (8003298 <HAL_RCC_OscConfig+0xf78>)
 8003028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800302e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003032:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003036:	6011      	str	r1, [r2, #0]
 8003038:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800303c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003040:	6812      	ldr	r2, [r2, #0]
 8003042:	fa92 f1a2 	rbit	r1, r2
 8003046:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800304a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800304e:	6011      	str	r1, [r2, #0]
  return result;
 8003050:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003054:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003058:	6812      	ldr	r2, [r2, #0]
 800305a:	fab2 f282 	clz	r2, r2
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	f042 0220 	orr.w	r2, r2, #32
 8003064:	b2d2      	uxtb	r2, r2
 8003066:	f002 021f 	and.w	r2, r2, #31
 800306a:	2101      	movs	r1, #1
 800306c:	fa01 f202 	lsl.w	r2, r1, r2
 8003070:	4013      	ands	r3, r2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d182      	bne.n	8002f7c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003076:	4b88      	ldr	r3, [pc, #544]	; (8003298 <HAL_RCC_OscConfig+0xf78>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800307e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003082:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800308a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800308e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	430b      	orrs	r3, r1
 8003098:	497f      	ldr	r1, [pc, #508]	; (8003298 <HAL_RCC_OscConfig+0xf78>)
 800309a:	4313      	orrs	r3, r2
 800309c:	604b      	str	r3, [r1, #4]
 800309e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80030a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	fa93 f2a3 	rbit	r2, r3
 80030ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030be:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80030c2:	601a      	str	r2, [r3, #0]
  return result;
 80030c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80030cc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030ce:	fab3 f383 	clz	r3, r3
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	461a      	mov	r2, r3
 80030e0:	2301      	movs	r3, #1
 80030e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e4:	f7fd fdf6 	bl	8000cd4 <HAL_GetTick>
 80030e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030ec:	e009      	b.n	8003102 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ee:	f7fd fdf1 	bl	8000cd4 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e144      	b.n	800338c <HAL_RCC_OscConfig+0x106c>
 8003102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003106:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800310a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800310e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003114:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	fa93 f2a3 	rbit	r2, r3
 800311e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003122:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003126:	601a      	str	r2, [r3, #0]
  return result;
 8003128:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800312c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003130:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003132:	fab3 f383 	clz	r3, r3
 8003136:	b2db      	uxtb	r3, r3
 8003138:	095b      	lsrs	r3, r3, #5
 800313a:	b2db      	uxtb	r3, r3
 800313c:	f043 0301 	orr.w	r3, r3, #1
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b01      	cmp	r3, #1
 8003144:	d102      	bne.n	800314c <HAL_RCC_OscConfig+0xe2c>
 8003146:	4b54      	ldr	r3, [pc, #336]	; (8003298 <HAL_RCC_OscConfig+0xf78>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	e027      	b.n	800319c <HAL_RCC_OscConfig+0xe7c>
 800314c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003150:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003154:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003158:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800315e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	fa93 f2a3 	rbit	r2, r3
 8003168:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800316c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003170:	601a      	str	r2, [r3, #0]
 8003172:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003176:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800317a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003184:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	fa93 f2a3 	rbit	r2, r3
 800318e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003192:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	4b3f      	ldr	r3, [pc, #252]	; (8003298 <HAL_RCC_OscConfig+0xf78>)
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031a0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80031a4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80031a8:	6011      	str	r1, [r2, #0]
 80031aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031ae:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80031b2:	6812      	ldr	r2, [r2, #0]
 80031b4:	fa92 f1a2 	rbit	r1, r2
 80031b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031bc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80031c0:	6011      	str	r1, [r2, #0]
  return result;
 80031c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031c6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80031ca:	6812      	ldr	r2, [r2, #0]
 80031cc:	fab2 f282 	clz	r2, r2
 80031d0:	b2d2      	uxtb	r2, r2
 80031d2:	f042 0220 	orr.w	r2, r2, #32
 80031d6:	b2d2      	uxtb	r2, r2
 80031d8:	f002 021f 	and.w	r2, r2, #31
 80031dc:	2101      	movs	r1, #1
 80031de:	fa01 f202 	lsl.w	r2, r1, r2
 80031e2:	4013      	ands	r3, r2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d082      	beq.n	80030ee <HAL_RCC_OscConfig+0xdce>
 80031e8:	e0cf      	b.n	800338a <HAL_RCC_OscConfig+0x106a>
 80031ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ee:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80031f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031fc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	fa93 f2a3 	rbit	r2, r3
 8003206:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800320a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800320e:	601a      	str	r2, [r3, #0]
  return result;
 8003210:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003214:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003218:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800321a:	fab3 f383 	clz	r3, r3
 800321e:	b2db      	uxtb	r3, r3
 8003220:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003224:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	461a      	mov	r2, r3
 800322c:	2300      	movs	r3, #0
 800322e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003230:	f7fd fd50 	bl	8000cd4 <HAL_GetTick>
 8003234:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003238:	e009      	b.n	800324e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800323a:	f7fd fd4b 	bl	8000cd4 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e09e      	b.n	800338c <HAL_RCC_OscConfig+0x106c>
 800324e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003252:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003256:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800325a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003260:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	fa93 f2a3 	rbit	r2, r3
 800326a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800326e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003272:	601a      	str	r2, [r3, #0]
  return result;
 8003274:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003278:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800327c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800327e:	fab3 f383 	clz	r3, r3
 8003282:	b2db      	uxtb	r3, r3
 8003284:	095b      	lsrs	r3, r3, #5
 8003286:	b2db      	uxtb	r3, r3
 8003288:	f043 0301 	orr.w	r3, r3, #1
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b01      	cmp	r3, #1
 8003290:	d104      	bne.n	800329c <HAL_RCC_OscConfig+0xf7c>
 8003292:	4b01      	ldr	r3, [pc, #4]	; (8003298 <HAL_RCC_OscConfig+0xf78>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	e029      	b.n	80032ec <HAL_RCC_OscConfig+0xfcc>
 8003298:	40021000 	.word	0x40021000
 800329c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032a0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80032a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ae:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	fa93 f2a3 	rbit	r2, r3
 80032b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032bc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80032ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	fa93 f2a3 	rbit	r2, r3
 80032de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	4b2b      	ldr	r3, [pc, #172]	; (8003398 <HAL_RCC_OscConfig+0x1078>)
 80032ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032f0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80032f4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80032f8:	6011      	str	r1, [r2, #0]
 80032fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032fe:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003302:	6812      	ldr	r2, [r2, #0]
 8003304:	fa92 f1a2 	rbit	r1, r2
 8003308:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800330c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003310:	6011      	str	r1, [r2, #0]
  return result;
 8003312:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003316:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800331a:	6812      	ldr	r2, [r2, #0]
 800331c:	fab2 f282 	clz	r2, r2
 8003320:	b2d2      	uxtb	r2, r2
 8003322:	f042 0220 	orr.w	r2, r2, #32
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	f002 021f 	and.w	r2, r2, #31
 800332c:	2101      	movs	r1, #1
 800332e:	fa01 f202 	lsl.w	r2, r1, r2
 8003332:	4013      	ands	r3, r2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d180      	bne.n	800323a <HAL_RCC_OscConfig+0xf1a>
 8003338:	e027      	b.n	800338a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800333a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800333e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d101      	bne.n	800334e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e01e      	b.n	800338c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800334e:	4b12      	ldr	r3, [pc, #72]	; (8003398 <HAL_RCC_OscConfig+0x1078>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003356:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800335a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800335e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003362:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	429a      	cmp	r2, r3
 800336c:	d10b      	bne.n	8003386 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800336e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003372:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003376:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800337a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003382:	429a      	cmp	r2, r3
 8003384:	d001      	beq.n	800338a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e000      	b.n	800338c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40021000 	.word	0x40021000

0800339c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b09e      	sub	sp, #120	; 0x78
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80033a6:	2300      	movs	r3, #0
 80033a8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d101      	bne.n	80033b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e162      	b.n	800367a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033b4:	4b90      	ldr	r3, [pc, #576]	; (80035f8 <HAL_RCC_ClockConfig+0x25c>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0307 	and.w	r3, r3, #7
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d910      	bls.n	80033e4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033c2:	4b8d      	ldr	r3, [pc, #564]	; (80035f8 <HAL_RCC_ClockConfig+0x25c>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f023 0207 	bic.w	r2, r3, #7
 80033ca:	498b      	ldr	r1, [pc, #556]	; (80035f8 <HAL_RCC_ClockConfig+0x25c>)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033d2:	4b89      	ldr	r3, [pc, #548]	; (80035f8 <HAL_RCC_ClockConfig+0x25c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0307 	and.w	r3, r3, #7
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d001      	beq.n	80033e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e14a      	b.n	800367a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d008      	beq.n	8003402 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033f0:	4b82      	ldr	r3, [pc, #520]	; (80035fc <HAL_RCC_ClockConfig+0x260>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	497f      	ldr	r1, [pc, #508]	; (80035fc <HAL_RCC_ClockConfig+0x260>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b00      	cmp	r3, #0
 800340c:	f000 80dc 	beq.w	80035c8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d13c      	bne.n	8003492 <HAL_RCC_ClockConfig+0xf6>
 8003418:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800341c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003420:	fa93 f3a3 	rbit	r3, r3
 8003424:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003426:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003428:	fab3 f383 	clz	r3, r3
 800342c:	b2db      	uxtb	r3, r3
 800342e:	095b      	lsrs	r3, r3, #5
 8003430:	b2db      	uxtb	r3, r3
 8003432:	f043 0301 	orr.w	r3, r3, #1
 8003436:	b2db      	uxtb	r3, r3
 8003438:	2b01      	cmp	r3, #1
 800343a:	d102      	bne.n	8003442 <HAL_RCC_ClockConfig+0xa6>
 800343c:	4b6f      	ldr	r3, [pc, #444]	; (80035fc <HAL_RCC_ClockConfig+0x260>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	e00f      	b.n	8003462 <HAL_RCC_ClockConfig+0xc6>
 8003442:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003446:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003448:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800344a:	fa93 f3a3 	rbit	r3, r3
 800344e:	667b      	str	r3, [r7, #100]	; 0x64
 8003450:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003454:	663b      	str	r3, [r7, #96]	; 0x60
 8003456:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003458:	fa93 f3a3 	rbit	r3, r3
 800345c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800345e:	4b67      	ldr	r3, [pc, #412]	; (80035fc <HAL_RCC_ClockConfig+0x260>)
 8003460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003462:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003466:	65ba      	str	r2, [r7, #88]	; 0x58
 8003468:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800346a:	fa92 f2a2 	rbit	r2, r2
 800346e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003470:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003472:	fab2 f282 	clz	r2, r2
 8003476:	b2d2      	uxtb	r2, r2
 8003478:	f042 0220 	orr.w	r2, r2, #32
 800347c:	b2d2      	uxtb	r2, r2
 800347e:	f002 021f 	and.w	r2, r2, #31
 8003482:	2101      	movs	r1, #1
 8003484:	fa01 f202 	lsl.w	r2, r1, r2
 8003488:	4013      	ands	r3, r2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d17b      	bne.n	8003586 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e0f3      	b.n	800367a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	2b02      	cmp	r3, #2
 8003498:	d13c      	bne.n	8003514 <HAL_RCC_ClockConfig+0x178>
 800349a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800349e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034a2:	fa93 f3a3 	rbit	r3, r3
 80034a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80034a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034aa:	fab3 f383 	clz	r3, r3
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	095b      	lsrs	r3, r3, #5
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	f043 0301 	orr.w	r3, r3, #1
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d102      	bne.n	80034c4 <HAL_RCC_ClockConfig+0x128>
 80034be:	4b4f      	ldr	r3, [pc, #316]	; (80035fc <HAL_RCC_ClockConfig+0x260>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	e00f      	b.n	80034e4 <HAL_RCC_ClockConfig+0x148>
 80034c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034cc:	fa93 f3a3 	rbit	r3, r3
 80034d0:	647b      	str	r3, [r7, #68]	; 0x44
 80034d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034d6:	643b      	str	r3, [r7, #64]	; 0x40
 80034d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034da:	fa93 f3a3 	rbit	r3, r3
 80034de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034e0:	4b46      	ldr	r3, [pc, #280]	; (80035fc <HAL_RCC_ClockConfig+0x260>)
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034e8:	63ba      	str	r2, [r7, #56]	; 0x38
 80034ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034ec:	fa92 f2a2 	rbit	r2, r2
 80034f0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80034f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034f4:	fab2 f282 	clz	r2, r2
 80034f8:	b2d2      	uxtb	r2, r2
 80034fa:	f042 0220 	orr.w	r2, r2, #32
 80034fe:	b2d2      	uxtb	r2, r2
 8003500:	f002 021f 	and.w	r2, r2, #31
 8003504:	2101      	movs	r1, #1
 8003506:	fa01 f202 	lsl.w	r2, r1, r2
 800350a:	4013      	ands	r3, r2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d13a      	bne.n	8003586 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e0b2      	b.n	800367a <HAL_RCC_ClockConfig+0x2de>
 8003514:	2302      	movs	r3, #2
 8003516:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800351a:	fa93 f3a3 	rbit	r3, r3
 800351e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003522:	fab3 f383 	clz	r3, r3
 8003526:	b2db      	uxtb	r3, r3
 8003528:	095b      	lsrs	r3, r3, #5
 800352a:	b2db      	uxtb	r3, r3
 800352c:	f043 0301 	orr.w	r3, r3, #1
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b01      	cmp	r3, #1
 8003534:	d102      	bne.n	800353c <HAL_RCC_ClockConfig+0x1a0>
 8003536:	4b31      	ldr	r3, [pc, #196]	; (80035fc <HAL_RCC_ClockConfig+0x260>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	e00d      	b.n	8003558 <HAL_RCC_ClockConfig+0x1bc>
 800353c:	2302      	movs	r3, #2
 800353e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003542:	fa93 f3a3 	rbit	r3, r3
 8003546:	627b      	str	r3, [r7, #36]	; 0x24
 8003548:	2302      	movs	r3, #2
 800354a:	623b      	str	r3, [r7, #32]
 800354c:	6a3b      	ldr	r3, [r7, #32]
 800354e:	fa93 f3a3 	rbit	r3, r3
 8003552:	61fb      	str	r3, [r7, #28]
 8003554:	4b29      	ldr	r3, [pc, #164]	; (80035fc <HAL_RCC_ClockConfig+0x260>)
 8003556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003558:	2202      	movs	r2, #2
 800355a:	61ba      	str	r2, [r7, #24]
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	fa92 f2a2 	rbit	r2, r2
 8003562:	617a      	str	r2, [r7, #20]
  return result;
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	fab2 f282 	clz	r2, r2
 800356a:	b2d2      	uxtb	r2, r2
 800356c:	f042 0220 	orr.w	r2, r2, #32
 8003570:	b2d2      	uxtb	r2, r2
 8003572:	f002 021f 	and.w	r2, r2, #31
 8003576:	2101      	movs	r1, #1
 8003578:	fa01 f202 	lsl.w	r2, r1, r2
 800357c:	4013      	ands	r3, r2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e079      	b.n	800367a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003586:	4b1d      	ldr	r3, [pc, #116]	; (80035fc <HAL_RCC_ClockConfig+0x260>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f023 0203 	bic.w	r2, r3, #3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	491a      	ldr	r1, [pc, #104]	; (80035fc <HAL_RCC_ClockConfig+0x260>)
 8003594:	4313      	orrs	r3, r2
 8003596:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003598:	f7fd fb9c 	bl	8000cd4 <HAL_GetTick>
 800359c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800359e:	e00a      	b.n	80035b6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035a0:	f7fd fb98 	bl	8000cd4 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e061      	b.n	800367a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035b6:	4b11      	ldr	r3, [pc, #68]	; (80035fc <HAL_RCC_ClockConfig+0x260>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f003 020c 	and.w	r2, r3, #12
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d1eb      	bne.n	80035a0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035c8:	4b0b      	ldr	r3, [pc, #44]	; (80035f8 <HAL_RCC_ClockConfig+0x25c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d214      	bcs.n	8003600 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035d6:	4b08      	ldr	r3, [pc, #32]	; (80035f8 <HAL_RCC_ClockConfig+0x25c>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f023 0207 	bic.w	r2, r3, #7
 80035de:	4906      	ldr	r1, [pc, #24]	; (80035f8 <HAL_RCC_ClockConfig+0x25c>)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035e6:	4b04      	ldr	r3, [pc, #16]	; (80035f8 <HAL_RCC_ClockConfig+0x25c>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0307 	and.w	r3, r3, #7
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d005      	beq.n	8003600 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e040      	b.n	800367a <HAL_RCC_ClockConfig+0x2de>
 80035f8:	40022000 	.word	0x40022000
 80035fc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b00      	cmp	r3, #0
 800360a:	d008      	beq.n	800361e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800360c:	4b1d      	ldr	r3, [pc, #116]	; (8003684 <HAL_RCC_ClockConfig+0x2e8>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	491a      	ldr	r1, [pc, #104]	; (8003684 <HAL_RCC_ClockConfig+0x2e8>)
 800361a:	4313      	orrs	r3, r2
 800361c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0308 	and.w	r3, r3, #8
 8003626:	2b00      	cmp	r3, #0
 8003628:	d009      	beq.n	800363e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800362a:	4b16      	ldr	r3, [pc, #88]	; (8003684 <HAL_RCC_ClockConfig+0x2e8>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	4912      	ldr	r1, [pc, #72]	; (8003684 <HAL_RCC_ClockConfig+0x2e8>)
 800363a:	4313      	orrs	r3, r2
 800363c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800363e:	f000 f829 	bl	8003694 <HAL_RCC_GetSysClockFreq>
 8003642:	4601      	mov	r1, r0
 8003644:	4b0f      	ldr	r3, [pc, #60]	; (8003684 <HAL_RCC_ClockConfig+0x2e8>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800364c:	22f0      	movs	r2, #240	; 0xf0
 800364e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	fa92 f2a2 	rbit	r2, r2
 8003656:	60fa      	str	r2, [r7, #12]
  return result;
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	fab2 f282 	clz	r2, r2
 800365e:	b2d2      	uxtb	r2, r2
 8003660:	40d3      	lsrs	r3, r2
 8003662:	4a09      	ldr	r2, [pc, #36]	; (8003688 <HAL_RCC_ClockConfig+0x2ec>)
 8003664:	5cd3      	ldrb	r3, [r2, r3]
 8003666:	fa21 f303 	lsr.w	r3, r1, r3
 800366a:	4a08      	ldr	r2, [pc, #32]	; (800368c <HAL_RCC_ClockConfig+0x2f0>)
 800366c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800366e:	4b08      	ldr	r3, [pc, #32]	; (8003690 <HAL_RCC_ClockConfig+0x2f4>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	f7fd faea 	bl	8000c4c <HAL_InitTick>
  
  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3778      	adds	r7, #120	; 0x78
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	40021000 	.word	0x40021000
 8003688:	08003d08 	.word	0x08003d08
 800368c:	20000004 	.word	0x20000004
 8003690:	20000008 	.word	0x20000008

08003694 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003694:	b480      	push	{r7}
 8003696:	b08b      	sub	sp, #44	; 0x2c
 8003698:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800369a:	2300      	movs	r3, #0
 800369c:	61fb      	str	r3, [r7, #28]
 800369e:	2300      	movs	r3, #0
 80036a0:	61bb      	str	r3, [r7, #24]
 80036a2:	2300      	movs	r3, #0
 80036a4:	627b      	str	r3, [r7, #36]	; 0x24
 80036a6:	2300      	movs	r3, #0
 80036a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80036aa:	2300      	movs	r3, #0
 80036ac:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80036ae:	4b29      	ldr	r3, [pc, #164]	; (8003754 <HAL_RCC_GetSysClockFreq+0xc0>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	f003 030c 	and.w	r3, r3, #12
 80036ba:	2b04      	cmp	r3, #4
 80036bc:	d002      	beq.n	80036c4 <HAL_RCC_GetSysClockFreq+0x30>
 80036be:	2b08      	cmp	r3, #8
 80036c0:	d003      	beq.n	80036ca <HAL_RCC_GetSysClockFreq+0x36>
 80036c2:	e03c      	b.n	800373e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036c4:	4b24      	ldr	r3, [pc, #144]	; (8003758 <HAL_RCC_GetSysClockFreq+0xc4>)
 80036c6:	623b      	str	r3, [r7, #32]
      break;
 80036c8:	e03c      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80036d0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80036d4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d6:	68ba      	ldr	r2, [r7, #8]
 80036d8:	fa92 f2a2 	rbit	r2, r2
 80036dc:	607a      	str	r2, [r7, #4]
  return result;
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	fab2 f282 	clz	r2, r2
 80036e4:	b2d2      	uxtb	r2, r2
 80036e6:	40d3      	lsrs	r3, r2
 80036e8:	4a1c      	ldr	r2, [pc, #112]	; (800375c <HAL_RCC_GetSysClockFreq+0xc8>)
 80036ea:	5cd3      	ldrb	r3, [r2, r3]
 80036ec:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80036ee:	4b19      	ldr	r3, [pc, #100]	; (8003754 <HAL_RCC_GetSysClockFreq+0xc0>)
 80036f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f2:	f003 030f 	and.w	r3, r3, #15
 80036f6:	220f      	movs	r2, #15
 80036f8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	fa92 f2a2 	rbit	r2, r2
 8003700:	60fa      	str	r2, [r7, #12]
  return result;
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	fab2 f282 	clz	r2, r2
 8003708:	b2d2      	uxtb	r2, r2
 800370a:	40d3      	lsrs	r3, r2
 800370c:	4a14      	ldr	r2, [pc, #80]	; (8003760 <HAL_RCC_GetSysClockFreq+0xcc>)
 800370e:	5cd3      	ldrb	r3, [r2, r3]
 8003710:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d008      	beq.n	800372e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800371c:	4a0e      	ldr	r2, [pc, #56]	; (8003758 <HAL_RCC_GetSysClockFreq+0xc4>)
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	fbb2 f2f3 	udiv	r2, r2, r3
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	fb02 f303 	mul.w	r3, r2, r3
 800372a:	627b      	str	r3, [r7, #36]	; 0x24
 800372c:	e004      	b.n	8003738 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	4a0c      	ldr	r2, [pc, #48]	; (8003764 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003732:	fb02 f303 	mul.w	r3, r2, r3
 8003736:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373a:	623b      	str	r3, [r7, #32]
      break;
 800373c:	e002      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800373e:	4b06      	ldr	r3, [pc, #24]	; (8003758 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003740:	623b      	str	r3, [r7, #32]
      break;
 8003742:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003744:	6a3b      	ldr	r3, [r7, #32]
}
 8003746:	4618      	mov	r0, r3
 8003748:	372c      	adds	r7, #44	; 0x2c
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	40021000 	.word	0x40021000
 8003758:	007a1200 	.word	0x007a1200
 800375c:	08003d18 	.word	0x08003d18
 8003760:	08003d28 	.word	0x08003d28
 8003764:	003d0900 	.word	0x003d0900

08003768 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b092      	sub	sp, #72	; 0x48
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003770:	2300      	movs	r3, #0
 8003772:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003774:	2300      	movs	r3, #0
 8003776:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003778:	2300      	movs	r3, #0
 800377a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003786:	2b00      	cmp	r3, #0
 8003788:	f000 80d4 	beq.w	8003934 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800378c:	4b4e      	ldr	r3, [pc, #312]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800378e:	69db      	ldr	r3, [r3, #28]
 8003790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d10e      	bne.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003798:	4b4b      	ldr	r3, [pc, #300]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800379a:	69db      	ldr	r3, [r3, #28]
 800379c:	4a4a      	ldr	r2, [pc, #296]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800379e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a2:	61d3      	str	r3, [r2, #28]
 80037a4:	4b48      	ldr	r3, [pc, #288]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037a6:	69db      	ldr	r3, [r3, #28]
 80037a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ac:	60bb      	str	r3, [r7, #8]
 80037ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037b0:	2301      	movs	r3, #1
 80037b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b6:	4b45      	ldr	r3, [pc, #276]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d118      	bne.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037c2:	4b42      	ldr	r3, [pc, #264]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a41      	ldr	r2, [pc, #260]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037cc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ce:	f7fd fa81 	bl	8000cd4 <HAL_GetTick>
 80037d2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d4:	e008      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037d6:	f7fd fa7d 	bl	8000cd4 <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	2b64      	cmp	r3, #100	; 0x64
 80037e2:	d901      	bls.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e169      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e8:	4b38      	ldr	r3, [pc, #224]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d0f0      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037f4:	4b34      	ldr	r3, [pc, #208]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037f6:	6a1b      	ldr	r3, [r3, #32]
 80037f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 8084 	beq.w	800390e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800380e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003810:	429a      	cmp	r2, r3
 8003812:	d07c      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003814:	4b2c      	ldr	r3, [pc, #176]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800381c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800381e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003822:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003826:	fa93 f3a3 	rbit	r3, r3
 800382a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800382c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800382e:	fab3 f383 	clz	r3, r3
 8003832:	b2db      	uxtb	r3, r3
 8003834:	461a      	mov	r2, r3
 8003836:	4b26      	ldr	r3, [pc, #152]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003838:	4413      	add	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	461a      	mov	r2, r3
 800383e:	2301      	movs	r3, #1
 8003840:	6013      	str	r3, [r2, #0]
 8003842:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003846:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800384a:	fa93 f3a3 	rbit	r3, r3
 800384e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003852:	fab3 f383 	clz	r3, r3
 8003856:	b2db      	uxtb	r3, r3
 8003858:	461a      	mov	r2, r3
 800385a:	4b1d      	ldr	r3, [pc, #116]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800385c:	4413      	add	r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	461a      	mov	r2, r3
 8003862:	2300      	movs	r3, #0
 8003864:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003866:	4a18      	ldr	r2, [pc, #96]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800386a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800386c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b00      	cmp	r3, #0
 8003874:	d04b      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003876:	f7fd fa2d 	bl	8000cd4 <HAL_GetTick>
 800387a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800387c:	e00a      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800387e:	f7fd fa29 	bl	8000cd4 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	f241 3288 	movw	r2, #5000	; 0x1388
 800388c:	4293      	cmp	r3, r2
 800388e:	d901      	bls.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e113      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003894:	2302      	movs	r3, #2
 8003896:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800389a:	fa93 f3a3 	rbit	r3, r3
 800389e:	627b      	str	r3, [r7, #36]	; 0x24
 80038a0:	2302      	movs	r3, #2
 80038a2:	623b      	str	r3, [r7, #32]
 80038a4:	6a3b      	ldr	r3, [r7, #32]
 80038a6:	fa93 f3a3 	rbit	r3, r3
 80038aa:	61fb      	str	r3, [r7, #28]
  return result;
 80038ac:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ae:	fab3 f383 	clz	r3, r3
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	095b      	lsrs	r3, r3, #5
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	f043 0302 	orr.w	r3, r3, #2
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d108      	bne.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80038c2:	4b01      	ldr	r3, [pc, #4]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	e00d      	b.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80038c8:	40021000 	.word	0x40021000
 80038cc:	40007000 	.word	0x40007000
 80038d0:	10908100 	.word	0x10908100
 80038d4:	2302      	movs	r3, #2
 80038d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	fa93 f3a3 	rbit	r3, r3
 80038de:	617b      	str	r3, [r7, #20]
 80038e0:	4b78      	ldr	r3, [pc, #480]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e4:	2202      	movs	r2, #2
 80038e6:	613a      	str	r2, [r7, #16]
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	fa92 f2a2 	rbit	r2, r2
 80038ee:	60fa      	str	r2, [r7, #12]
  return result;
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	fab2 f282 	clz	r2, r2
 80038f6:	b2d2      	uxtb	r2, r2
 80038f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038fc:	b2d2      	uxtb	r2, r2
 80038fe:	f002 021f 	and.w	r2, r2, #31
 8003902:	2101      	movs	r1, #1
 8003904:	fa01 f202 	lsl.w	r2, r1, r2
 8003908:	4013      	ands	r3, r2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d0b7      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800390e:	4b6d      	ldr	r3, [pc, #436]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	496a      	ldr	r1, [pc, #424]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800391c:	4313      	orrs	r3, r2
 800391e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003920:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003924:	2b01      	cmp	r3, #1
 8003926:	d105      	bne.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003928:	4b66      	ldr	r3, [pc, #408]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800392a:	69db      	ldr	r3, [r3, #28]
 800392c:	4a65      	ldr	r2, [pc, #404]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800392e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003932:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	2b00      	cmp	r3, #0
 800393e:	d008      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003940:	4b60      	ldr	r3, [pc, #384]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003944:	f023 0203 	bic.w	r2, r3, #3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	495d      	ldr	r1, [pc, #372]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800394e:	4313      	orrs	r3, r2
 8003950:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d008      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800395e:	4b59      	ldr	r3, [pc, #356]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003962:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	4956      	ldr	r1, [pc, #344]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800396c:	4313      	orrs	r3, r2
 800396e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0304 	and.w	r3, r3, #4
 8003978:	2b00      	cmp	r3, #0
 800397a:	d008      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800397c:	4b51      	ldr	r3, [pc, #324]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800397e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003980:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	494e      	ldr	r1, [pc, #312]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800398a:	4313      	orrs	r3, r2
 800398c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0320 	and.w	r3, r3, #32
 8003996:	2b00      	cmp	r3, #0
 8003998:	d008      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800399a:	4b4a      	ldr	r3, [pc, #296]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800399c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399e:	f023 0210 	bic.w	r2, r3, #16
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	69db      	ldr	r3, [r3, #28]
 80039a6:	4947      	ldr	r1, [pc, #284]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d008      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80039b8:	4b42      	ldr	r3, [pc, #264]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c4:	493f      	ldr	r1, [pc, #252]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d008      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039d6:	4b3b      	ldr	r3, [pc, #236]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039da:	f023 0220 	bic.w	r2, r3, #32
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	4938      	ldr	r1, [pc, #224]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0308 	and.w	r3, r3, #8
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d008      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80039f4:	4b33      	ldr	r3, [pc, #204]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	695b      	ldr	r3, [r3, #20]
 8003a00:	4930      	ldr	r1, [pc, #192]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0310 	and.w	r3, r3, #16
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d008      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a12:	4b2c      	ldr	r3, [pc, #176]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a16:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	4929      	ldr	r1, [pc, #164]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d008      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a30:	4b24      	ldr	r3, [pc, #144]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3c:	4921      	ldr	r1, [pc, #132]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d008      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003a4e:	4b1d      	ldr	r3, [pc, #116]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a52:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5a:	491a      	ldr	r1, [pc, #104]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d008      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003a6c:	4b15      	ldr	r3, [pc, #84]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a70:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a78:	4912      	ldr	r1, [pc, #72]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d008      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003a8a:	4b0e      	ldr	r3, [pc, #56]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a96:	490b      	ldr	r1, [pc, #44]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d008      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003aa8:	4b06      	ldr	r3, [pc, #24]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab4:	4903      	ldr	r1, [pc, #12]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3748      	adds	r7, #72	; 0x48
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	40021000 	.word	0x40021000

08003ac8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e09d      	b.n	8003c16 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d108      	bne.n	8003af4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003aea:	d009      	beq.n	8003b00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	61da      	str	r2, [r3, #28]
 8003af2:	e005      	b.n	8003b00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d106      	bne.n	8003b20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7fc ff76 	bl	8000a0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2202      	movs	r2, #2
 8003b24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b36:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b40:	d902      	bls.n	8003b48 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b42:	2300      	movs	r3, #0
 8003b44:	60fb      	str	r3, [r7, #12]
 8003b46:	e002      	b.n	8003b4e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b4c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003b56:	d007      	beq.n	8003b68 <HAL_SPI_Init+0xa0>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b60:	d002      	beq.n	8003b68 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	431a      	orrs	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b96:	431a      	orrs	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ba0:	431a      	orrs	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003baa:	ea42 0103 	orr.w	r1, r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	0c1b      	lsrs	r3, r3, #16
 8003bc4:	f003 0204 	and.w	r2, r3, #4
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	f003 0310 	and.w	r3, r3, #16
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd6:	f003 0308 	and.w	r3, r3, #8
 8003bda:	431a      	orrs	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003be4:	ea42 0103 	orr.w	r1, r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	69da      	ldr	r2, [r3, #28]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003c1e:	b480      	push	{r7}
 8003c20:	b085      	sub	sp, #20
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003c26:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003c2a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3714      	adds	r7, #20
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003c54:	b084      	sub	sp, #16
 8003c56:	b480      	push	{r7}
 8003c58:	b083      	sub	sp, #12
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
 8003c5e:	f107 0014 	add.w	r0, r7, #20
 8003c62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	b004      	add	sp, #16
 8003c94:	4770      	bx	lr
	...

08003c98 <__libc_init_array>:
 8003c98:	b570      	push	{r4, r5, r6, lr}
 8003c9a:	4d0d      	ldr	r5, [pc, #52]	; (8003cd0 <__libc_init_array+0x38>)
 8003c9c:	4c0d      	ldr	r4, [pc, #52]	; (8003cd4 <__libc_init_array+0x3c>)
 8003c9e:	1b64      	subs	r4, r4, r5
 8003ca0:	10a4      	asrs	r4, r4, #2
 8003ca2:	2600      	movs	r6, #0
 8003ca4:	42a6      	cmp	r6, r4
 8003ca6:	d109      	bne.n	8003cbc <__libc_init_array+0x24>
 8003ca8:	4d0b      	ldr	r5, [pc, #44]	; (8003cd8 <__libc_init_array+0x40>)
 8003caa:	4c0c      	ldr	r4, [pc, #48]	; (8003cdc <__libc_init_array+0x44>)
 8003cac:	f000 f820 	bl	8003cf0 <_init>
 8003cb0:	1b64      	subs	r4, r4, r5
 8003cb2:	10a4      	asrs	r4, r4, #2
 8003cb4:	2600      	movs	r6, #0
 8003cb6:	42a6      	cmp	r6, r4
 8003cb8:	d105      	bne.n	8003cc6 <__libc_init_array+0x2e>
 8003cba:	bd70      	pop	{r4, r5, r6, pc}
 8003cbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cc0:	4798      	blx	r3
 8003cc2:	3601      	adds	r6, #1
 8003cc4:	e7ee      	b.n	8003ca4 <__libc_init_array+0xc>
 8003cc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cca:	4798      	blx	r3
 8003ccc:	3601      	adds	r6, #1
 8003cce:	e7f2      	b.n	8003cb6 <__libc_init_array+0x1e>
 8003cd0:	08003d38 	.word	0x08003d38
 8003cd4:	08003d38 	.word	0x08003d38
 8003cd8:	08003d38 	.word	0x08003d38
 8003cdc:	08003d3c 	.word	0x08003d3c

08003ce0 <memset>:
 8003ce0:	4402      	add	r2, r0
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d100      	bne.n	8003cea <memset+0xa>
 8003ce8:	4770      	bx	lr
 8003cea:	f803 1b01 	strb.w	r1, [r3], #1
 8003cee:	e7f9      	b.n	8003ce4 <memset+0x4>

08003cf0 <_init>:
 8003cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cf2:	bf00      	nop
 8003cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cf6:	bc08      	pop	{r3}
 8003cf8:	469e      	mov	lr, r3
 8003cfa:	4770      	bx	lr

08003cfc <_fini>:
 8003cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cfe:	bf00      	nop
 8003d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d02:	bc08      	pop	{r3}
 8003d04:	469e      	mov	lr, r3
 8003d06:	4770      	bx	lr
